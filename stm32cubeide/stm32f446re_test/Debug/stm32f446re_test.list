
stm32f446re_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078fc  080078fc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080078fc  080078fc  000178fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007904  08007904  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001754  200000d0  080079e0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001824  080079e0  00021824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b0a  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030fb  00000000  00000000  00035c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  00038d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00039e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024b76  00000000  00000000  0003aed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0b0  00000000  00000000  0005fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7502  00000000  00000000  0006dafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  0014507c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000d0 	.word	0x200000d0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007698 	.word	0x08007698

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000d4 	.word	0x200000d4
 8000200:	08007698 	.word	0x08007698

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_Init+0x40>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_Init+0x40>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x40>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fc7b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f005 fdda 	bl	8006100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fc93 	bl	8000ea2 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000594:	f000 fc5b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000064 	.word	0x20000064
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20001274 	.word	0x20001274

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20001274 	.word	0x20001274

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f7      	bhi.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e0ed      	b.n	800082a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d102      	bne.n	8000660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f003 fc64 	bl	8003f28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f022 0202 	bic.w	r2, r2, #2
 800066e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000670:	f7ff ffb6 	bl	80005e0 <HAL_GetTick>
 8000674:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000676:	e012      	b.n	800069e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000678:	f7ff ffb2 	bl	80005e0 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	2b0a      	cmp	r3, #10
 8000684:	d90b      	bls.n	800069e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2205      	movs	r2, #5
 8000696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	e0c5      	b.n	800082a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1e5      	bne.n	8000678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006bc:	f7ff ff90 	bl	80005e0 <HAL_GetTick>
 80006c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006c2:	e012      	b.n	80006ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006c4:	f7ff ff8c 	bl	80005e0 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b0a      	cmp	r3, #10
 80006d0:	d90b      	bls.n	80006ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2205      	movs	r2, #5
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e09f      	b.n	800082a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0e5      	beq.n	80006c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7e1b      	ldrb	r3, [r3, #24]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7e5b      	ldrb	r3, [r3, #25]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7e9b      	ldrb	r3, [r3, #26]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0220 	orr.w	r2, r2, #32
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0220 	bic.w	r2, r2, #32
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7edb      	ldrb	r3, [r3, #27]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0210 	bic.w	r2, r2, #16
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0210 	orr.w	r2, r2, #16
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7f1b      	ldrb	r3, [r3, #28]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0208 	orr.w	r2, r2, #8
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e007      	b.n	80007ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f022 0208 	bic.w	r2, r2, #8
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7f5b      	ldrb	r3, [r3, #29]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d108      	bne.n	80007e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f042 0204 	orr.w	r2, r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 0204 	bic.w	r2, r2, #4
 80007f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	431a      	orrs	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	ea42 0103 	orr.w	r1, r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	430a      	orrs	r2, r1
 8000818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2201      	movs	r2, #1
 8000824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b08a      	sub	sp, #40	; 0x28
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d07c      	beq.n	8000972 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d023      	beq.n	80008ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f97d 	bl	8000b94 <HAL_CAN_TxMailbox0CompleteCallback>
 800089a:	e016      	b.n	80008ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	e00c      	b.n	80008ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	e002      	b.n	80008ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f983 	bl	8000bd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d024      	beq.n	800091e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f95d 	bl	8000ba8 <HAL_CAN_TxMailbox1CompleteCallback>
 80008ee:	e016      	b.n	800091e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d004      	beq.n	8000904 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
 8000902:	e00c      	b.n	800091e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	e002      	b.n	800091e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f963 	bl	8000be4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000924:	2b00      	cmp	r3, #0
 8000926:	d024      	beq.n	8000972 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000930:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f93d 	bl	8000bbc <HAL_CAN_TxMailbox2CompleteCallback>
 8000942:	e016      	b.n	8000972 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
 8000956:	e00c      	b.n	8000972 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
 800096a:	e002      	b.n	8000972 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f943 	bl	8000bf8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000972:	6a3b      	ldr	r3, [r7, #32]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00c      	beq.n	8000996 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2210      	movs	r2, #16
 8000994:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00b      	beq.n	80009b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d006      	beq.n	80009b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2208      	movs	r2, #8
 80009b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f934 	bl	8000c20 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d009      	beq.n	80009d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f91b 	bl	8000c0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00c      	beq.n	80009fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2210      	movs	r2, #16
 80009f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	f003 0320 	and.w	r3, r3, #32
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2208      	movs	r2, #8
 8000a14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f916 	bl	8000c48 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d009      	beq.n	8000a3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f8fd 	bl	8000c34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00b      	beq.n	8000a5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d006      	beq.n	8000a5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2210      	movs	r2, #16
 8000a54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f900 	bl	8000c5c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00b      	beq.n	8000a7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2208      	movs	r2, #8
 8000a76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f8f9 	bl	8000c70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d075      	beq.n	8000b74 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d06c      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d008      	beq.n	8000aca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d03d      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d038      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b00:	2b30      	cmp	r3, #48	; 0x30
 8000b02:	d017      	beq.n	8000b34 <HAL_CAN_IRQHandler+0x302>
 8000b04:	2b30      	cmp	r3, #48	; 0x30
 8000b06:	d804      	bhi.n	8000b12 <HAL_CAN_IRQHandler+0x2e0>
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	d009      	beq.n	8000b20 <HAL_CAN_IRQHandler+0x2ee>
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d00c      	beq.n	8000b2a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000b10:	e024      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000b12:	2b50      	cmp	r3, #80	; 0x50
 8000b14:	d018      	beq.n	8000b48 <HAL_CAN_IRQHandler+0x316>
 8000b16:	2b60      	cmp	r3, #96	; 0x60
 8000b18:	d01b      	beq.n	8000b52 <HAL_CAN_IRQHandler+0x320>
 8000b1a:	2b40      	cmp	r3, #64	; 0x40
 8000b1c:	d00f      	beq.n	8000b3e <HAL_CAN_IRQHandler+0x30c>
            break;
 8000b1e:	e01d      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b28:	e018      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b32:	e013      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	f043 0320 	orr.w	r3, r3, #32
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b3c:	e00e      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b46:	e009      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b50:	e004      	b.n	8000b5c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2204      	movs	r2, #4
 8000b72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f87c 	bl	8000c84 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fb8a 	bl	80005e0 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e099      	b.n	800100c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0201 	bic.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef8:	e00f      	b.n	8000f1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000efa:	f7ff fb71 	bl	80005e0 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d908      	bls.n	8000f1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2203      	movs	r2, #3
 8000f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e078      	b.n	800100c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1e8      	bne.n	8000efa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <HAL_DMA_Init+0x158>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d107      	bne.n	8000f84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f023 0307 	bic.w	r3, r3, #7
 8000f9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d117      	bne.n	8000fde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00e      	beq.n	8000fde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fa99 	bl	80014f8 <DMA_CheckFifoParam>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d008      	beq.n	8000fde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2240      	movs	r2, #64	; 0x40
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e016      	b.n	800100c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 fa50 	bl	800148c <DMA_CalcBaseAndBitshift>
 8000fec:	4603      	mov	r3, r0
 8000fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff4:	223f      	movs	r2, #63	; 0x3f
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	f010803f 	.word	0xf010803f

08001018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_DMA_Start_IT+0x26>
 800103a:	2302      	movs	r3, #2
 800103c:	e048      	b.n	80010d0 <HAL_DMA_Start_IT+0xb8>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d137      	bne.n	80010c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2202      	movs	r2, #2
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f9e2 	bl	8001430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001070:	223f      	movs	r2, #63	; 0x3f
 8001072:	409a      	lsls	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0216 	orr.w	r2, r2, #22
 8001086:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001096:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0208 	orr.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e005      	b.n	80010ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010ca:	2302      	movs	r3, #2
 80010cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d004      	beq.n	80010f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00c      	b.n	8001110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2205      	movs	r2, #5
 80010fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001128:	4b92      	ldr	r3, [pc, #584]	; (8001374 <HAL_DMA_IRQHandler+0x258>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a92      	ldr	r2, [pc, #584]	; (8001378 <HAL_DMA_IRQHandler+0x25c>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0a9b      	lsrs	r3, r3, #10
 8001134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	2208      	movs	r2, #8
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01a      	beq.n	8001188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0204 	bic.w	r2, r2, #4
 800116e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	2208      	movs	r2, #8
 8001176:	409a      	lsls	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118c:	2201      	movs	r2, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d012      	beq.n	80011be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	2201      	movs	r2, #1
 80011ac:	409a      	lsls	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b6:	f043 0202 	orr.w	r2, r3, #2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	2204      	movs	r2, #4
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	2204      	movs	r2, #4
 80011e2:	409a      	lsls	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	f043 0204 	orr.w	r2, r3, #4
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	2210      	movs	r2, #16
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d043      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03c      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2210      	movs	r2, #16
 8001218:	409a      	lsls	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d018      	beq.n	800125e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d108      	bne.n	800124c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d024      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
 800124a:	e01f      	b.n	800128c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	4798      	blx	r3
 800125c:	e016      	b.n	800128c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0208 	bic.w	r2, r2, #8
 800127a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	2220      	movs	r2, #32
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 808e 	beq.w	80013ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8086 	beq.w	80013ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b2:	2220      	movs	r2, #32
 80012b4:	409a      	lsls	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d136      	bne.n	8001334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0216 	bic.w	r2, r2, #22
 80012d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d103      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x1da>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0208 	bic.w	r2, r2, #8
 8001304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130a:	223f      	movs	r2, #63	; 0x3f
 800130c:	409a      	lsls	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001326:	2b00      	cmp	r3, #0
 8001328:	d07d      	beq.n	8001426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	4798      	blx	r3
        }
        return;
 8001332:	e078      	b.n	8001426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d01c      	beq.n	800137c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d108      	bne.n	8001362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	2b00      	cmp	r3, #0
 8001356:	d030      	beq.n	80013ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	4798      	blx	r3
 8001360:	e02b      	b.n	80013ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d027      	beq.n	80013ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
 8001372:	e022      	b.n	80013ba <HAL_DMA_IRQHandler+0x29e>
 8001374:	20000064 	.word	0x20000064
 8001378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0210 	bic.w	r2, r2, #16
 8001398:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d032      	beq.n	8001428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d022      	beq.n	8001414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d307      	bcc.n	8001402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f2      	bne.n	80013e6 <HAL_DMA_IRQHandler+0x2ca>
 8001400:	e000      	b.n	8001404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001402:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
 8001424:	e000      	b.n	8001428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001426:	bf00      	nop
    }
  }
}
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop

08001430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800144c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b40      	cmp	r3, #64	; 0x40
 800145c:	d108      	bne.n	8001470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800146e:	e007      	b.n	8001480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	60da      	str	r2, [r3, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3b10      	subs	r3, #16
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <DMA_CalcBaseAndBitshift+0x64>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <DMA_CalcBaseAndBitshift+0x68>)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d909      	bls.n	80014ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	1d1a      	adds	r2, r3, #4
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	659a      	str	r2, [r3, #88]	; 0x58
 80014cc:	e007      	b.n	80014de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	aaaaaaab 	.word	0xaaaaaaab
 80014f4:	08007808 	.word	0x08007808

080014f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d11f      	bne.n	8001552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d855      	bhi.n	80015c4 <DMA_CheckFifoParam+0xcc>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <DMA_CheckFifoParam+0x28>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001531 	.word	0x08001531
 8001524:	08001543 	.word	0x08001543
 8001528:	08001531 	.word	0x08001531
 800152c:	080015c5 	.word	0x080015c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d045      	beq.n	80015c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001540:	e042      	b.n	80015c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800154a:	d13f      	bne.n	80015cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001550:	e03c      	b.n	80015cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155a:	d121      	bne.n	80015a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d836      	bhi.n	80015d0 <DMA_CheckFifoParam+0xd8>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <DMA_CheckFifoParam+0x70>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	08001579 	.word	0x08001579
 800156c:	0800157f 	.word	0x0800157f
 8001570:	08001579 	.word	0x08001579
 8001574:	08001591 	.word	0x08001591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
      break;
 800157c:	e02f      	b.n	80015de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d024      	beq.n	80015d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800158e:	e021      	b.n	80015d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001598:	d11e      	bne.n	80015d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800159e:	e01b      	b.n	80015d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d902      	bls.n	80015ac <DMA_CheckFifoParam+0xb4>
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d003      	beq.n	80015b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015aa:	e018      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
      break;
 80015b0:	e015      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00e      	beq.n	80015dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
      break;
 80015c2:	e00b      	b.n	80015dc <DMA_CheckFifoParam+0xe4>
      break;
 80015c4:	bf00      	nop
 80015c6:	e00a      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      break;
 80015c8:	bf00      	nop
 80015ca:	e008      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      break;
 80015cc:	bf00      	nop
 80015ce:	e006      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      break;
 80015d0:	bf00      	nop
 80015d2:	e004      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      break;
 80015d4:	bf00      	nop
 80015d6:	e002      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      break;   
 80015d8:	bf00      	nop
 80015da:	e000      	b.n	80015de <DMA_CheckFifoParam+0xe6>
      break;
 80015dc:	bf00      	nop
    }
  } 
  
  return status; 
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e165      	b.n	80018d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8154 	bne.w	80018ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x4a>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b12      	cmp	r3, #18
 8001634:	d123      	bne.n	800167e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	69b9      	ldr	r1, [r7, #24]
 800167a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0203 	and.w	r2, r3, #3
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d00b      	beq.n	80016d2 <HAL_GPIO_Init+0xe6>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c6:	2b11      	cmp	r3, #17
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d130      	bne.n	8001734 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0201 	and.w	r2, r3, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80ae 	beq.w	80018ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_GPIO_Init+0x2fc>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a5b      	ldr	r2, [pc, #364]	; (80018e8 <HAL_GPIO_Init+0x2fc>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_GPIO_Init+0x2fc>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_GPIO_Init+0x300>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_GPIO_Init+0x304>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d025      	beq.n	8001806 <HAL_GPIO_Init+0x21a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x308>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_Init+0x216>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x212>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_GPIO_Init+0x310>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x20e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <HAL_GPIO_Init+0x314>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x20a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a49      	ldr	r2, [pc, #292]	; (8001904 <HAL_GPIO_Init+0x318>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x206>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_GPIO_Init+0x31c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x202>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00c      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00a      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x21c>
 8001806:	2300      	movs	r3, #0
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001818:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_GPIO_Init+0x300>)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_GPIO_Init+0x320>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184a:	4a30      	ldr	r2, [pc, #192]	; (800190c <HAL_GPIO_Init+0x320>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_GPIO_Init+0x320>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_GPIO_Init+0x320>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_GPIO_Init+0x320>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <HAL_GPIO_Init+0x320>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_GPIO_Init+0x320>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_GPIO_Init+0x320>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	f67f ae96 	bls.w	8001608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	3724      	adds	r7, #36	; 0x24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40021400 	.word	0x40021400
 8001908:	40021800 	.word	0x40021800
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0ca      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_ClockConfig+0x1b4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90c      	bls.n	8001980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <HAL_RCC_ClockConfig+0x1b4>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <HAL_RCC_ClockConfig+0x1b4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b6      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a51      	ldr	r2, [pc, #324]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494c      	ldr	r1, [pc, #304]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d044      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07d      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06d      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e065      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4933      	ldr	r1, [pc, #204]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7fe fdd4 	bl	80005e0 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7fe fdd0 	bl	80005e0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04d      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e030      	b.n	8001aee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4915      	ldr	r1, [pc, #84]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490d      	ldr	r1, [pc, #52]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f851 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7fe fd36 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	080078e4 	.word	0x080078e4
 8001b04:	20000064 	.word	0x20000064

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000064 	.word	0x20000064

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	080078f4 	.word	0x080078f4

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff ffdc 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b50:	4601      	mov	r1, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	080078f4 	.word	0x080078f4

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8a:	4bc6      	ldr	r3, [pc, #792]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	f200 817e 	bhi.w	8001e94 <HAL_RCC_GetSysClockFreq+0x324>
 8001b98:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bd5 	.word	0x08001bd5
 8001ba4:	08001e95 	.word	0x08001e95
 8001ba8:	08001e95 	.word	0x08001e95
 8001bac:	08001e95 	.word	0x08001e95
 8001bb0:	08001bdb 	.word	0x08001bdb
 8001bb4:	08001e95 	.word	0x08001e95
 8001bb8:	08001e95 	.word	0x08001e95
 8001bbc:	08001e95 	.word	0x08001e95
 8001bc0:	08001be1 	.word	0x08001be1
 8001bc4:	08001e95 	.word	0x08001e95
 8001bc8:	08001e95 	.word	0x08001e95
 8001bcc:	08001e95 	.word	0x08001e95
 8001bd0:	08001d3d 	.word	0x08001d3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4bb4      	ldr	r3, [pc, #720]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001bd6:	613b      	str	r3, [r7, #16]
       break;
 8001bd8:	e15f      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bda:	4bb3      	ldr	r3, [pc, #716]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001bdc:	613b      	str	r3, [r7, #16]
      break;
 8001bde:	e15c      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be0:	4bb0      	ldr	r3, [pc, #704]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bea:	4bae      	ldr	r3, [pc, #696]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04a      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4bab      	ldr	r3, [pc, #684]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	f04f 0400 	mov.w	r4, #0
 8001c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	ea03 0501 	and.w	r5, r3, r1
 8001c0c:	ea04 0602 	and.w	r6, r4, r2
 8001c10:	4629      	mov	r1, r5
 8001c12:	4632      	mov	r2, r6
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f04f 0400 	mov.w	r4, #0
 8001c1c:	0154      	lsls	r4, r2, #5
 8001c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c22:	014b      	lsls	r3, r1, #5
 8001c24:	4619      	mov	r1, r3
 8001c26:	4622      	mov	r2, r4
 8001c28:	1b49      	subs	r1, r1, r5
 8001c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	f04f 0400 	mov.w	r4, #0
 8001c36:	0194      	lsls	r4, r2, #6
 8001c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c3c:	018b      	lsls	r3, r1, #6
 8001c3e:	1a5b      	subs	r3, r3, r1
 8001c40:	eb64 0402 	sbc.w	r4, r4, r2
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	00e2      	lsls	r2, r4, #3
 8001c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c52:	00d9      	lsls	r1, r3, #3
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	195b      	adds	r3, r3, r5
 8001c5a:	eb44 0406 	adc.w	r4, r4, r6
 8001c5e:	f04f 0100 	mov.w	r1, #0
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	02a2      	lsls	r2, r4, #10
 8001c68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c6c:	0299      	lsls	r1, r3, #10
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	4621      	mov	r1, r4
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f04f 0400 	mov.w	r4, #0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	f7fe fac8 	bl	8000214 <__aeabi_uldivmod>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e049      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8c:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	f04f 0400 	mov.w	r4, #0
 8001c96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	ea03 0501 	and.w	r5, r3, r1
 8001ca2:	ea04 0602 	and.w	r6, r4, r2
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	4632      	mov	r2, r6
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	f04f 0400 	mov.w	r4, #0
 8001cb2:	0154      	lsls	r4, r2, #5
 8001cb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cb8:	014b      	lsls	r3, r1, #5
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	1b49      	subs	r1, r1, r5
 8001cc0:	eb62 0206 	sbc.w	r2, r2, r6
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	0194      	lsls	r4, r2, #6
 8001cce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cd2:	018b      	lsls	r3, r1, #6
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	eb64 0402 	sbc.w	r4, r4, r2
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ce8:	00d9      	lsls	r1, r3, #3
 8001cea:	460b      	mov	r3, r1
 8001cec:	4614      	mov	r4, r2
 8001cee:	195b      	adds	r3, r3, r5
 8001cf0:	eb44 0406 	adc.w	r4, r4, r6
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	02a2      	lsls	r2, r4, #10
 8001cfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d02:	0299      	lsls	r1, r3, #10
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f04f 0400 	mov.w	r4, #0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4623      	mov	r3, r4
 8001d16:	f7fe fa7d 	bl	8000214 <__aeabi_uldivmod>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d20:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	613b      	str	r3, [r7, #16]
      break;
 8001d3a:	e0ae      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d44:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d46:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d04a      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	f04f 0400 	mov.w	r4, #0
 8001d5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	ea03 0501 	and.w	r5, r3, r1
 8001d68:	ea04 0602 	and.w	r6, r4, r2
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4632      	mov	r2, r6
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	0154      	lsls	r4, r2, #5
 8001d7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d7e:	014b      	lsls	r3, r1, #5
 8001d80:	4619      	mov	r1, r3
 8001d82:	4622      	mov	r2, r4
 8001d84:	1b49      	subs	r1, r1, r5
 8001d86:	eb62 0206 	sbc.w	r2, r2, r6
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f04f 0400 	mov.w	r4, #0
 8001d92:	0194      	lsls	r4, r2, #6
 8001d94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d98:	018b      	lsls	r3, r1, #6
 8001d9a:	1a5b      	subs	r3, r3, r1
 8001d9c:	eb64 0402 	sbc.w	r4, r4, r2
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	00e2      	lsls	r2, r4, #3
 8001daa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dae:	00d9      	lsls	r1, r3, #3
 8001db0:	460b      	mov	r3, r1
 8001db2:	4614      	mov	r4, r2
 8001db4:	195b      	adds	r3, r3, r5
 8001db6:	eb44 0406 	adc.w	r4, r4, r6
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	02a2      	lsls	r2, r4, #10
 8001dc4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dc8:	0299      	lsls	r1, r3, #10
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4614      	mov	r4, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4623      	mov	r3, r4
 8001ddc:	f7fe fa1a 	bl	8000214 <__aeabi_uldivmod>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e049      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	f04f 0400 	mov.w	r4, #0
 8001df2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	ea03 0501 	and.w	r5, r3, r1
 8001dfe:	ea04 0602 	and.w	r6, r4, r2
 8001e02:	4629      	mov	r1, r5
 8001e04:	4632      	mov	r2, r6
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f04f 0400 	mov.w	r4, #0
 8001e0e:	0154      	lsls	r4, r2, #5
 8001e10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e14:	014b      	lsls	r3, r1, #5
 8001e16:	4619      	mov	r1, r3
 8001e18:	4622      	mov	r2, r4
 8001e1a:	1b49      	subs	r1, r1, r5
 8001e1c:	eb62 0206 	sbc.w	r2, r2, r6
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f04f 0400 	mov.w	r4, #0
 8001e28:	0194      	lsls	r4, r2, #6
 8001e2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e2e:	018b      	lsls	r3, r1, #6
 8001e30:	1a5b      	subs	r3, r3, r1
 8001e32:	eb64 0402 	sbc.w	r4, r4, r2
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	00e2      	lsls	r2, r4, #3
 8001e40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e44:	00d9      	lsls	r1, r3, #3
 8001e46:	460b      	mov	r3, r1
 8001e48:	4614      	mov	r4, r2
 8001e4a:	195b      	adds	r3, r3, r5
 8001e4c:	eb44 0406 	adc.w	r4, r4, r6
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	02a2      	lsls	r2, r4, #10
 8001e5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e5e:	0299      	lsls	r1, r3, #10
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	4621      	mov	r1, r4
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f04f 0400 	mov.w	r4, #0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4623      	mov	r3, r4
 8001e72:	f7fe f9cf 	bl	8000214 <__aeabi_uldivmod>
 8001e76:	4603      	mov	r3, r0
 8001e78:	460c      	mov	r4, r1
 8001e7a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0f1b      	lsrs	r3, r3, #28
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	613b      	str	r3, [r7, #16]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	693b      	ldr	r3, [r7, #16]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400

08001eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8083 	beq.w	8001fcc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ec6:	4b95      	ldr	r3, [pc, #596]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d019      	beq.n	8001f06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed2:	4b92      	ldr	r3, [pc, #584]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ede:	4b8f      	ldr	r3, [pc, #572]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d00c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eec:	4b8b      	ldr	r3, [pc, #556]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d112      	bne.n	8001f1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f04:	d10b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	4b85      	ldr	r3, [pc, #532]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d05b      	beq.n	8001fca <HAL_RCC_OscConfig+0x11e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d157      	bne.n	8001fca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e216      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x8a>
 8001f28:	4b7c      	ldr	r3, [pc, #496]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a7b      	ldr	r2, [pc, #492]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e01d      	b.n	8001f72 <HAL_RCC_OscConfig+0xc6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0xae>
 8001f40:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a75      	ldr	r2, [pc, #468]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a72      	ldr	r2, [pc, #456]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0xc6>
 8001f5a:	4b70      	ldr	r3, [pc, #448]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6f      	ldr	r2, [pc, #444]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6d      	ldr	r3, [pc, #436]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6c      	ldr	r2, [pc, #432]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d013      	beq.n	8001fa2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fb31 	bl	80005e0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f82:	f7fe fb2d 	bl	80005e0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1db      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	4b61      	ldr	r3, [pc, #388]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0xd6>
 8001fa0:	e014      	b.n	8001fcc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fb1d 	bl	80005e0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001faa:	f7fe fb19 	bl	80005e0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1c7      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0xfe>
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d06f      	beq.n	80020b8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d017      	beq.n	8002014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d11c      	bne.n	8002042 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002008:	4b44      	ldr	r3, [pc, #272]	; (800211c <HAL_RCC_OscConfig+0x270>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d116      	bne.n	8002042 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002014:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x180>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e18f      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4938      	ldr	r1, [pc, #224]	; (800211c <HAL_RCC_OscConfig+0x270>)
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002040:	e03a      	b.n	80020b8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d020      	beq.n	800208c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204a:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0x274>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fac6 	bl	80005e0 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7fe fac2 	bl	80005e0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e170      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4925      	ldr	r1, [pc, #148]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_RCC_OscConfig+0x274>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe faa5 	bl	80005e0 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe faa1 	bl	80005e0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e14f      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d037      	beq.n	8002134 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_RCC_OscConfig+0x278>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fa85 	bl	80005e0 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7fe fa81 	bl	80005e0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e12f      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_OscConfig+0x270>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x22e>
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_OscConfig+0x278>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7fe fa6e 	bl	80005e0 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002106:	e00f      	b.n	8002128 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe fa6a 	bl	80005e0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d908      	bls.n	8002128 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e118      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	42470000 	.word	0x42470000
 8002124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b8a      	ldr	r3, [pc, #552]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e9      	bne.n	8002108 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8097 	beq.w	8002270 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b83      	ldr	r3, [pc, #524]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a7e      	ldr	r2, [pc, #504]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b7c      	ldr	r3, [pc, #496]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b79      	ldr	r3, [pc, #484]	; (8002358 <HAL_RCC_OscConfig+0x4ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7fe fa29 	bl	80005e0 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe fa25 	bl	80005e0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0d3      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x4ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x31a>
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
 80021c4:	e01c      	b.n	8002200 <HAL_RCC_OscConfig+0x354>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x33c>
 80021ce:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a60      	ldr	r2, [pc, #384]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0x354>
 80021e8:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a59      	ldr	r2, [pc, #356]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
 80021f4:	4b57      	ldr	r3, [pc, #348]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a56      	ldr	r2, [pc, #344]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe f9ea 	bl	80005e0 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe f9e6 	bl	80005e0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e092      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ee      	beq.n	8002210 <HAL_RCC_OscConfig+0x364>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe f9d4 	bl	80005e0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe f9d0 	bl	80005e0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e07c      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ee      	bne.n	800223c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d068      	beq.n	800234a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d060      	beq.n	8002346 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d145      	bne.n	8002318 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b33      	ldr	r3, [pc, #204]	; (800235c <HAL_RCC_OscConfig+0x4b0>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe f9a5 	bl	80005e0 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe f9a1 	bl	80005e0 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e04f      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ac:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	071b      	lsls	r3, r3, #28
 80022e4:	491b      	ldr	r1, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_RCC_OscConfig+0x4b0>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe f976 	bl	80005e0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe f972 	bl	80005e0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e020      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x44c>
 8002316:	e018      	b.n	800234a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x4b0>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe f95f 	bl	80005e0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe f95b 	bl	80005e0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e009      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_OscConfig+0x4a8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x47a>
 8002344:	e001      	b.n	800234a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000
 800235c:	42470060 	.word	0x42470060

08002360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e01d      	b.n	80023ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f004 fabe 	bl	8006908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f000 fba2 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d007      	beq.n	80023e8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01d      	b.n	800244c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f004 fa4d 	bl	80068c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f000 fb53 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e083      	b.n	8002570 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f004 fa63 	bl	8006948 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002498:	f023 0307 	bic.w	r3, r3, #7
 800249c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f000 fb1d 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4313      	orrs	r3, r2
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024f4:	f023 030c 	bic.w	r3, r3, #12
 80024f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4313      	orrs	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	031b      	lsls	r3, r3, #12
 8002524:	4313      	orrs	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800253a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4313      	orrs	r3, r2
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b02      	cmp	r3, #2
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0202 	mvn.w	r2, #2
 80025a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa75 	bl	8002aaa <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa67 	bl	8002a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fa78 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d122      	bne.n	8002628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d11b      	bne.n	8002628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0204 	mvn.w	r2, #4
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa4b 	bl	8002aaa <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa3d 	bl	8002a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fa4e 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b08      	cmp	r3, #8
 8002634:	d122      	bne.n	800267c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d11b      	bne.n	800267c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0208 	mvn.w	r2, #8
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa21 	bl	8002aaa <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa13 	bl	8002a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa24 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b10      	cmp	r3, #16
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0210 	mvn.w	r2, #16
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2208      	movs	r2, #8
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f9f7 	bl	8002aaa <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9e9 	bl	8002a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f9fa 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0201 	mvn.w	r2, #1
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f9c3 	bl	8002a82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fd6b 	bl	80031fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9bf 	bl	8002ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b20      	cmp	r3, #32
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b20      	cmp	r3, #32
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0220 	mvn.w	r2, #32
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fd35 	bl	80031ea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0b4      	b.n	800290c <HAL_TIM_PWM_ConfigChannel+0x184>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	f200 809f 	bhi.w	80028f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80027ba:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027f5 	.word	0x080027f5
 80027c4:	080028f9 	.word	0x080028f9
 80027c8:	080028f9 	.word	0x080028f9
 80027cc:	080028f9 	.word	0x080028f9
 80027d0:	08002835 	.word	0x08002835
 80027d4:	080028f9 	.word	0x080028f9
 80027d8:	080028f9 	.word	0x080028f9
 80027dc:	080028f9 	.word	0x080028f9
 80027e0:	08002877 	.word	0x08002877
 80027e4:	080028f9 	.word	0x080028f9
 80027e8:	080028f9 	.word	0x080028f9
 80027ec:	080028f9 	.word	0x080028f9
 80027f0:	080028b7 	.word	0x080028b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa14 	bl	8002c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0208 	orr.w	r2, r2, #8
 800280e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6999      	ldr	r1, [r3, #24]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]
      break;
 8002832:	e062      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fa64 	bl	8002d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6999      	ldr	r1, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
      break;
 8002874:	e041      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fab9 	bl	8002df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0204 	bic.w	r2, r2, #4
 80028a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69d9      	ldr	r1, [r3, #28]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	61da      	str	r2, [r3, #28]
      break;
 80028b4:	e021      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb0d 	bl	8002edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69d9      	ldr	r1, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	61da      	str	r2, [r3, #28]
      break;
 80028f6:	e000      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80028f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIM_ConfigClockSource+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e0a6      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x166>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800294a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002952:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d067      	beq.n	8002a34 <HAL_TIM_ConfigClockSource+0x120>
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d80b      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x6c>
 8002968:	2b10      	cmp	r3, #16
 800296a:	d073      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0x140>
 800296c:	2b10      	cmp	r3, #16
 800296e:	d802      	bhi.n	8002976 <HAL_TIM_ConfigClockSource+0x62>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d06f      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002974:	e078      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002976:	2b20      	cmp	r3, #32
 8002978:	d06c      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0x140>
 800297a:	2b30      	cmp	r3, #48	; 0x30
 800297c:	d06a      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800297e:	e073      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d00d      	beq.n	80029a0 <HAL_TIM_ConfigClockSource+0x8c>
 8002984:	2b70      	cmp	r3, #112	; 0x70
 8002986:	d804      	bhi.n	8002992 <HAL_TIM_ConfigClockSource+0x7e>
 8002988:	2b50      	cmp	r3, #80	; 0x50
 800298a:	d033      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0xe0>
 800298c:	2b60      	cmp	r3, #96	; 0x60
 800298e:	d041      	beq.n	8002a14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002990:	e06a      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	d066      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x152>
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299c:	d017      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800299e:	e063      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f000 fb64 	bl	800307c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	609a      	str	r2, [r3, #8]
      break;
 80029cc:	e04c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6899      	ldr	r1, [r3, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f000 fb4d 	bl	800307c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f0:	609a      	str	r2, [r3, #8]
      break;
 80029f2:	e039      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f000 fac1 	bl	8002f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2150      	movs	r1, #80	; 0x50
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fb1a 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002a12:	e029      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	461a      	mov	r2, r3
 8002a22:	f000 fae0 	bl	8002fe6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2160      	movs	r1, #96	; 0x60
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fb0a 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002a32:	e019      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	461a      	mov	r2, r3
 8002a42:	f000 faa1 	bl	8002f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fafa 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002a52:	e009      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 faf1 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002a64:	e000      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <TIM_Base_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b06:	d00f      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3d      	ldr	r2, [pc, #244]	; (8002c00 <TIM_Base_SetConfig+0x118>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3c      	ldr	r2, [pc, #240]	; (8002c04 <TIM_Base_SetConfig+0x11c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <TIM_Base_SetConfig+0x120>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <TIM_Base_SetConfig+0x124>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2f      	ldr	r2, [pc, #188]	; (8002bfc <TIM_Base_SetConfig+0x114>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02b      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d027      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2c      	ldr	r2, [pc, #176]	; (8002c00 <TIM_Base_SetConfig+0x118>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d023      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <TIM_Base_SetConfig+0x11c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01f      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <TIM_Base_SetConfig+0x120>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01b      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <TIM_Base_SetConfig+0x124>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d017      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <TIM_Base_SetConfig+0x128>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <TIM_Base_SetConfig+0x12c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00f      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <TIM_Base_SetConfig+0x130>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00b      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <TIM_Base_SetConfig+0x134>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <TIM_Base_SetConfig+0x138>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <TIM_Base_SetConfig+0x13c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d108      	bne.n	8002bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <TIM_Base_SetConfig+0x114>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0xf8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <TIM_Base_SetConfig+0x124>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d103      	bne.n	8002be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	615a      	str	r2, [r3, #20]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40000c00 	.word	0x40000c00
 8002c0c:	40010400 	.word	0x40010400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800
 8002c1c:	40001800 	.word	0x40001800
 8002c20:	40001c00 	.word	0x40001c00
 8002c24:	40002000 	.word	0x40002000

08002c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0201 	bic.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 0302 	bic.w	r3, r3, #2
 8002c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <TIM_OC1_SetConfig+0xd8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d003      	beq.n	8002c8c <TIM_OC1_SetConfig+0x64>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <TIM_OC1_SetConfig+0xdc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10c      	bne.n	8002ca6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f023 0308 	bic.w	r3, r3, #8
 8002c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <TIM_OC1_SetConfig+0xd8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_OC1_SetConfig+0x8e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <TIM_OC1_SetConfig+0xdc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d111      	bne.n	8002cda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	621a      	str	r2, [r3, #32]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40010400 	.word	0x40010400

08002d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0210 	bic.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f023 0320 	bic.w	r3, r3, #32
 8002d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <TIM_OC2_SetConfig+0xe4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_OC2_SetConfig+0x68>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <TIM_OC2_SetConfig+0xe8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10d      	bne.n	8002d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <TIM_OC2_SetConfig+0xe4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_OC2_SetConfig+0x94>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <TIM_OC2_SetConfig+0xe8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d113      	bne.n	8002dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40010400 	.word	0x40010400

08002df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <TIM_OC3_SetConfig+0xe0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_OC3_SetConfig+0x66>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <TIM_OC3_SetConfig+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10d      	bne.n	8002e76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <TIM_OC3_SetConfig+0xe0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_OC3_SetConfig+0x92>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <TIM_OC3_SetConfig+0xe4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d113      	bne.n	8002eae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	621a      	str	r2, [r3, #32]
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40010400 	.word	0x40010400

08002edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <TIM_OC4_SetConfig+0xa4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_OC4_SetConfig+0x68>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <TIM_OC4_SetConfig+0xa8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d109      	bne.n	8002f58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40010400 	.word	0x40010400

08002f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 030a 	bic.w	r3, r3, #10
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	031b      	lsls	r3, r3, #12
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	f043 0307 	orr.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	021a      	lsls	r2, r3, #8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	431a      	orrs	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e032      	b.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4313      	orrs	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800315e:	2302      	movs	r3, #2
 8003160:	e03d      	b.n	80031de <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e03f      	b.n	80032a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f003 fd8b 	bl	8006d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003254:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fc28 	bl	8003aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800326a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800327a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d153      	bne.n	800336e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_Transmit_DMA+0x26>
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e04c      	b.n	8003370 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Transmit_DMA+0x38>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e045      	b.n	8003370 <HAL_UART_Transmit_DMA+0xc4>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2221      	movs	r2, #33	; 0x21
 8003308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_UART_Transmit_DMA+0xcc>)
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_UART_Transmit_DMA+0xd0>)
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_UART_Transmit_DMA+0xd4>)
 8003322:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2200      	movs	r2, #0
 800332a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3304      	adds	r3, #4
 8003340:	461a      	mov	r2, r3
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	f7fd fe68 	bl	8001018 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003350:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003368:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	080036b9 	.word	0x080036b9
 800337c:	0800370b 	.word	0x0800370b
 8003380:	080037ab 	.word	0x080037ab

08003384 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	d166      	bne.n	800346c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_UART_Receive_DMA+0x26>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e05f      	b.n	800346e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_UART_Receive_DMA+0x38>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e058      	b.n	800346e <HAL_UART_Receive_DMA+0xea>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2222      	movs	r2, #34	; 0x22
 80033da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	4a25      	ldr	r2, [pc, #148]	; (8003478 <HAL_UART_Receive_DMA+0xf4>)
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	4a24      	ldr	r2, [pc, #144]	; (800347c <HAL_UART_Receive_DMA+0xf8>)
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_UART_Receive_DMA+0xfc>)
 80033f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	2200      	movs	r2, #0
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80033fe:	f107 0308 	add.w	r3, r7, #8
 8003402:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	f7fd fdff 	bl	8001018 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003446:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003466:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	08003727 	.word	0x08003727
 800347c:	0800378f 	.word	0x0800378f
 8003480:	080037ab 	.word	0x080037ab

08003484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_UART_IRQHandler+0x52>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa6b 	bl	80039aa <UART_Receive_IT>
      return;
 80034d4:	e0cc      	b.n	8003670 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80ab 	beq.w	8003634 <HAL_UART_IRQHandler+0x1b0>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <HAL_UART_IRQHandler+0x70>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80a0 	beq.w	8003634 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_UART_IRQHandler+0x90>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_UART_IRQHandler+0xb0>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	f043 0202 	orr.w	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_UART_IRQHandler+0xd0>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_UART_IRQHandler+0xf0>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	f043 0208 	orr.w	r2, r3, #8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d078      	beq.n	800366e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_UART_IRQHandler+0x112>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa0a 	bl	80039aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <HAL_UART_IRQHandler+0x13a>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d031      	beq.n	8003622 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f953 	bl	800386a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d123      	bne.n	800361a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_UART_IRQHandler+0x1f4>)
 80035f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fd6e 	bl	80010d8 <HAL_DMA_Abort_IT>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800360c:	4610      	mov	r0, r2
 800360e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	e00e      	b.n	8003630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f846 	bl	80036a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	e00a      	b.n	8003630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f842 	bl	80036a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	e006      	b.n	8003630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f83e 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800362e:	e01e      	b.n	800366e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	bf00      	nop
    return;
 8003632:	e01c      	b.n	800366e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_UART_IRQHandler+0x1cc>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f940 	bl	80038ce <UART_Transmit_IT>
    return;
 800364e:	e00f      	b.n	8003670 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_UART_IRQHandler+0x1ec>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f988 	bl	800397a <UART_EndTransmit_IT>
    return;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_UART_IRQHandler+0x1ec>
    return;
 800366e:	bf00      	nop
  }
}
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	080038a7 	.word	0x080038a7

0800367c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d113      	bne.n	80036fc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036fa:	e002      	b.n	8003702 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f001 fdc7 	bl	8005290 <HAL_UART_TxCpltCallback>
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff ffaf 	bl	800367c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11e      	bne.n	8003780 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003756:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003776:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f001 fd97 	bl	80052b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff77 	bl	8003690 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b21      	cmp	r3, #33	; 0x21
 80037dc:	d108      	bne.n	80037f0 <UART_DMAError+0x46>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80037ea:	68b8      	ldr	r0, [r7, #8]
 80037ec:	f000 f827 	bl	800383e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b22      	cmp	r3, #34	; 0x22
 8003810:	d108      	bne.n	8003824 <UART_DMAError+0x7a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800381e:	68b8      	ldr	r0, [r7, #8]
 8003820:	f000 f823 	bl	800386a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003830:	68b8      	ldr	r0, [r7, #8]
 8003832:	f7ff ff37 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003854:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003880:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff feef 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b21      	cmp	r3, #33	; 0x21
 80038e0:	d144      	bne.n	800396c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ea:	d11a      	bne.n	8003922 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003900:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	621a      	str	r2, [r3, #32]
 8003914:	e00e      	b.n	8003934 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	621a      	str	r2, [r3, #32]
 8003920:	e008      	b.n	8003934 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6211      	str	r1, [r2, #32]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10f      	bne.n	8003968 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003956:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003966:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f001 fc78 	bl	8005290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b22      	cmp	r3, #34	; 0x22
 80039bc:	d171      	bne.n	8003aa2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d123      	bne.n	8003a10 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10e      	bne.n	80039f4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	1c9a      	adds	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
 80039f2:	e029      	b.n	8003a48 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a0e:	e01b      	b.n	8003a48 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6858      	ldr	r0, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	1c59      	adds	r1, r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6291      	str	r1, [r2, #40]	; 0x28
 8003a28:	b2c2      	uxtb	r2, r0
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	e00c      	b.n	8003a48 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	1c58      	adds	r0, r3, #1
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	6288      	str	r0, [r1, #40]	; 0x28
 8003a40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4619      	mov	r1, r3
 8003a56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d120      	bne.n	8003a9e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0220 	bic.w	r2, r2, #32
 8003a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f001 fc0d 	bl	80052b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e002      	b.n	8003aa4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aac:	b5b0      	push	{r4, r5, r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aec:	f023 030c 	bic.w	r3, r3, #12
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b18:	f040 80e4 	bne.w	8003ce4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4aab      	ldr	r2, [pc, #684]	; (8003dd0 <UART_SetConfig+0x324>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <UART_SetConfig+0x84>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4aaa      	ldr	r2, [pc, #680]	; (8003dd4 <UART_SetConfig+0x328>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d16c      	bne.n	8003c0a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b30:	f7fe f80a 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	4aa3      	ldr	r2, [pc, #652]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	011c      	lsls	r4, r3, #4
 8003b54:	f7fd fff8 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	009a      	lsls	r2, r3, #2
 8003b62:	441a      	add	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b6e:	f7fd ffeb 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009a      	lsls	r2, r3, #2
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	4a93      	ldr	r2, [pc, #588]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2264      	movs	r2, #100	; 0x64
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	1aeb      	subs	r3, r5, r3
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a8e      	ldr	r2, [pc, #568]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003baa:	441c      	add	r4, r3
 8003bac:	f7fd ffcc 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009a      	lsls	r2, r3, #2
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8003bc6:	f7fd ffbf 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	4a7d      	ldr	r2, [pc, #500]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	; 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1aeb      	subs	r3, r5, r3
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	3332      	adds	r3, #50	; 0x32
 8003bf4:	4a78      	ldr	r2, [pc, #480]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 0207 	and.w	r2, r3, #7
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4422      	add	r2, r4
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	e154      	b.n	8003eb4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003c0a:	f7fd ff89 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a6c      	ldr	r2, [pc, #432]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	011c      	lsls	r4, r3, #4
 8003c2e:	f7fd ff77 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c48:	f7fd ff6a 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2264      	movs	r2, #100	; 0x64
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	1aeb      	subs	r3, r5, r3
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c84:	441c      	add	r4, r3
 8003c86:	f7fd ff4b 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009a      	lsls	r2, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ca0:	f7fd ff3e 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009a      	lsls	r2, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	4a47      	ldr	r2, [pc, #284]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	2264      	movs	r2, #100	; 0x64
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	1aeb      	subs	r3, r5, r3
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3332      	adds	r3, #50	; 0x32
 8003cce:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	f003 0207 	and.w	r2, r3, #7
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4422      	add	r2, r4
 8003ce0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003ce2:	e0e7      	b.n	8003eb4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a39      	ldr	r2, [pc, #228]	; (8003dd0 <UART_SetConfig+0x324>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <UART_SetConfig+0x24c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <UART_SetConfig+0x328>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d171      	bne.n	8003ddc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003cf8:	f7fd ff26 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009a      	lsls	r2, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	011c      	lsls	r4, r3, #4
 8003d1c:	f7fd ff14 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	fbb2 f5f3 	udiv	r5, r2, r3
 8003d36:	f7fd ff07 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009a      	lsls	r2, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2264      	movs	r2, #100	; 0x64
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	1aeb      	subs	r3, r5, r3
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	3332      	adds	r3, #50	; 0x32
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d70:	441c      	add	r4, r3
 8003d72:	f7fd fee9 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	fbb2 f5f3 	udiv	r5, r2, r3
 8003d8c:	f7fd fedc 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009a      	lsls	r2, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2264      	movs	r2, #100	; 0x64
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	1aeb      	subs	r3, r5, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <UART_SetConfig+0x32c>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4422      	add	r2, r4
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	e071      	b.n	8003eb4 <UART_SetConfig+0x408>
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ddc:	f7fd fea0 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009a      	lsls	r2, r3, #2
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	4a31      	ldr	r2, [pc, #196]	; (8003ebc <UART_SetConfig+0x410>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	011c      	lsls	r4, r3, #4
 8003e00:	f7fd fe8e 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e1a:	f7fd fe81 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <UART_SetConfig+0x410>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	1aeb      	subs	r3, r5, r3
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <UART_SetConfig+0x410>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e54:	441c      	add	r4, r3
 8003e56:	f7fd fe63 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e70:	f7fd fe56 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009a      	lsls	r2, r3, #2
 8003e7e:	441a      	add	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <UART_SetConfig+0x410>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	2264      	movs	r2, #100	; 0x64
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	1aeb      	subs	r3, r5, r3
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	3332      	adds	r3, #50	; 0x32
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <UART_SetConfig+0x410>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	f003 020f 	and.w	r2, r3, #15
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4422      	add	r2, r4
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	e7ff      	b.n	8003eb4 <UART_SetConfig+0x408>
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bdb0      	pop	{r4, r5, r7, pc}
 8003ebc:	51eb851f 	.word	0x51eb851f

08003ec0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8003ec4:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ec6:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <MX_CAN1_Init+0x64>)
 8003ec8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003eca:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ecc:	2210      	movs	r2, #16
 8003ece:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003ed6:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003f0c:	4804      	ldr	r0, [pc, #16]	; (8003f20 <MX_CAN1_Init+0x60>)
 8003f0e:	f7fc fb95 	bl	800063c <HAL_CAN_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003f18:	f001 fab0 	bl	800547c <Error_Handler>
  }

}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20001278 	.word	0x20001278
 8003f24:	40006400 	.word	0x40006400

08003f28 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <HAL_CAN_MspInit+0xc4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d14c      	bne.n	8003fe4 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_CAN_MspInit+0xc8>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <HAL_CAN_MspInit+0xc8>)
 8003f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_CAN_MspInit+0xc8>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_CAN_MspInit+0xc8>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_CAN_MspInit+0xc8>)
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	6313      	str	r3, [r2, #48]	; 0x30
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_CAN_MspInit+0xc8>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f90:	2303      	movs	r3, #3
 8003f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f94:	2309      	movs	r3, #9
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f98:	f107 0314 	add.w	r3, r7, #20
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4815      	ldr	r0, [pc, #84]	; (8003ff4 <HAL_CAN_MspInit+0xcc>)
 8003fa0:	f7fd fb24 	bl	80015ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	2013      	movs	r0, #19
 8003faa:	f7fc ff50 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003fae:	2013      	movs	r0, #19
 8003fb0:	f7fc ff69 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2014      	movs	r0, #20
 8003fba:	f7fc ff48 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003fbe:	2014      	movs	r0, #20
 8003fc0:	f7fc ff61 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2015      	movs	r0, #21
 8003fca:	f7fc ff40 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003fce:	2015      	movs	r0, #21
 8003fd0:	f7fc ff59 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	2016      	movs	r0, #22
 8003fda:	f7fc ff38 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003fde:	2016      	movs	r0, #22
 8003fe0:	f7fc ff51 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40006400 	.word	0x40006400
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020400 	.word	0x40020400

08003ff8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <MX_DMA_Init+0xac>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <MX_DMA_Init+0xac>)
 8004008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <MX_DMA_Init+0xac>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	2100      	movs	r1, #0
 800401e:	200b      	movs	r0, #11
 8004020:	f7fc ff15 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004024:	200b      	movs	r0, #11
 8004026:	f7fc ff2e 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800402a:	2200      	movs	r2, #0
 800402c:	2100      	movs	r1, #0
 800402e:	200c      	movs	r0, #12
 8004030:	f7fc ff0d 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004034:	200c      	movs	r0, #12
 8004036:	f7fc ff26 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	200d      	movs	r0, #13
 8004040:	f7fc ff05 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004044:	200d      	movs	r0, #13
 8004046:	f7fc ff1e 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2100      	movs	r1, #0
 800404e:	200e      	movs	r0, #14
 8004050:	f7fc fefd 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004054:	200e      	movs	r0, #14
 8004056:	f7fc ff16 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2100      	movs	r1, #0
 800405e:	200f      	movs	r0, #15
 8004060:	f7fc fef5 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004064:	200f      	movs	r0, #15
 8004066:	f7fc ff0e 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	2010      	movs	r0, #16
 8004070:	f7fc feed 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004074:	2010      	movs	r0, #16
 8004076:	f7fc ff06 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2011      	movs	r0, #17
 8004080:	f7fc fee5 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004084:	2011      	movs	r0, #17
 8004086:	f7fc fefe 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800408a:	2200      	movs	r2, #0
 800408c:	2100      	movs	r1, #0
 800408e:	202f      	movs	r0, #47	; 0x2f
 8004090:	f7fc fedd 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004094:	202f      	movs	r0, #47	; 0x2f
 8004096:	f7fc fef6 	bl	8000e86 <HAL_NVIC_EnableIRQ>

}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ae:	f107 0314 	add.w	r3, r7, #20
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b3e      	ldr	r3, [pc, #248]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a39      	ldr	r2, [pc, #228]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	4b33      	ldr	r3, [pc, #204]	; (80041c8 <MX_GPIO_Init+0x120>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a32      	ldr	r2, [pc, #200]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	4b2c      	ldr	r3, [pc, #176]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <MX_GPIO_Init+0x120>)
 800411c:	f043 0302 	orr.w	r3, r3, #2
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <MX_GPIO_Init+0x120>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, motor0_Pin|motor1_Pin|motor2_Pin|motor3_Pin 
 800414a:	2200      	movs	r2, #0
 800414c:	211f      	movs	r1, #31
 800414e:	481f      	ldr	r0, [pc, #124]	; (80041cc <MX_GPIO_Init+0x124>)
 8004150:	f7fd fbde 	bl	8001910 <HAL_GPIO_WritePin>
                          |ABS1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ABS0_0_Pin|ABS0_1_Pin|ABS0_2_Pin|ABS1_0_Pin, GPIO_PIN_RESET);
 8004154:	2200      	movs	r2, #0
 8004156:	21f0      	movs	r1, #240	; 0xf0
 8004158:	481d      	ldr	r0, [pc, #116]	; (80041d0 <MX_GPIO_Init+0x128>)
 800415a:	f7fd fbd9 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS1_2_Pin|ABS2_0_Pin|ABS2_1_Pin|ABS2_2_Pin 
 800415e:	2200      	movs	r2, #0
 8004160:	f24f 0107 	movw	r1, #61447	; 0xf007
 8004164:	481b      	ldr	r0, [pc, #108]	; (80041d4 <MX_GPIO_Init+0x12c>)
 8004166:	f7fd fbd3 	bl	8001910 <HAL_GPIO_WritePin>
                          |ABS3_0_Pin|ABS3_1_Pin|ABS3_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = motor0_Pin|motor1_Pin|motor2_Pin|motor3_Pin 
 800416a:	231f      	movs	r3, #31
 800416c:	617b      	str	r3, [r7, #20]
                          |ABS1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	4619      	mov	r1, r3
 8004180:	4812      	ldr	r0, [pc, #72]	; (80041cc <MX_GPIO_Init+0x124>)
 8004182:	f7fd fa33 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ABS0_0_Pin|ABS0_1_Pin|ABS0_2_Pin|ABS1_0_Pin;
 8004186:	23f0      	movs	r3, #240	; 0xf0
 8004188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <MX_GPIO_Init+0x128>)
 800419e:	f7fd fa25 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ABS1_2_Pin|ABS2_0_Pin|ABS2_1_Pin|ABS2_2_Pin 
 80041a2:	f24f 0307 	movw	r3, #61447	; 0xf007
 80041a6:	617b      	str	r3, [r7, #20]
                          |ABS3_0_Pin|ABS3_1_Pin|ABS3_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a8:	2301      	movs	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b0:	2300      	movs	r3, #0
 80041b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	4806      	ldr	r0, [pc, #24]	; (80041d4 <MX_GPIO_Init+0x12c>)
 80041bc:	f7fd fa16 	bl	80015ec <HAL_GPIO_Init>

}
 80041c0:	bf00      	nop
 80041c2:	3728      	adds	r7, #40	; 0x28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40020800 	.word	0x40020800
 80041d0:	40020000 	.word	0x40020000
 80041d4:	40020400 	.word	0x40020400

080041d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <_ZN3ros3MsgC1Ev+0x1c>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	080078d4 	.word	0x080078d4

0800421c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
      data()
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ffe8 	bl	80041fc <_ZN3ros3MsgC1Ev>
 800422c:	4a06      	ldr	r2, [pc, #24]	; (8004248 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ffce 	bl	80041d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	080078bc 	.word	0x080078bc

0800424c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	b2ca      	uxtb	r2, r1
 8004266:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0a19      	lsrs	r1, r3, #8
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4413      	add	r3, r2
 8004276:	b2ca      	uxtb	r2, r1
 8004278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	0c19      	lsrs	r1, r3, #16
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3302      	adds	r3, #2
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	4413      	add	r3, r2
 8004288:	b2ca      	uxtb	r2, r1
 800428a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0e19      	lsrs	r1, r3, #24
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3303      	adds	r3, #3
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	b2ca      	uxtb	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6899      	ldr	r1, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	b2ca      	uxtb	r2, r1
 80042b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a19      	lsrs	r1, r3, #8
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	b2ca      	uxtb	r2, r1
 80042c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	0c19      	lsrs	r1, r3, #16
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3302      	adds	r3, #2
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	4413      	add	r3, r2
 80042d2:	b2ca      	uxtb	r2, r1
 80042d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0e19      	lsrs	r1, r3, #24
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3303      	adds	r3, #3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	b2ca      	uxtb	r2, r1
 80042e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3304      	adds	r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80042ee:	68fb      	ldr	r3, [r7, #12]
    }
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	4413      	add	r3, r2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3301      	adds	r3, #1
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	440b      	add	r3, r1
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3302      	adds	r3, #2
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	440b      	add	r3, r1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3303      	adds	r3, #3
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	440b      	add	r3, r1
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3304      	adds	r3, #4
 800435e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3301      	adds	r3, #1
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	440b      	add	r3, r1
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3302      	adds	r3, #2
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	440b      	add	r3, r1
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3303      	adds	r3, #3
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	440b      	add	r3, r1
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3304      	adds	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80043b6:	68fb      	ldr	r3, [r7, #12]
    }
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	080076b0 	.word	0x080076b0

080043e0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	080076c0 	.word	0x080076c0

080043fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fef8 	bl	80041fc <_ZN3ros3MsgC1Ev>
 800440c:	4a0b      	ldr	r2, [pc, #44]	; (800443c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	809a      	strh	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8004422:	60da      	str	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a06      	ldr	r2, [pc, #24]	; (8004440 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
    {
    }
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	080078a4 	.word	0x080078a4
 8004440:	080076e4 	.word	0x080076e4

08004444 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8899      	ldrh	r1, [r3, #4]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	4413      	add	r3, r2
 800445c:	b2ca      	uxtb	r2, r1
 800445e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	889b      	ldrh	r3, [r3, #4]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	b299      	uxth	r1, r3
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	4413      	add	r3, r2
 8004470:	b2ca      	uxtb	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3302      	adds	r3, #2
 8004478:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fb fec0 	bl	8000204 <strlen>
 8004484:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	4413      	add	r3, r2
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fffb 	bl	800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3304      	adds	r3, #4
 8004498:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	18d0      	adds	r0, r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4619      	mov	r1, r3
 80044a8:	f002 ffae 	bl	8007408 <memcpy>
      offset += length_topic_name;
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fb fea3 	bl	8000204 <strlen>
 80044be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ffde 	bl	800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3304      	adds	r3, #4
 80044d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	18d0      	adds	r0, r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4619      	mov	r1, r3
 80044e2:	f002 ff91 	bl	8007408 <memcpy>
      offset += length_message_type;
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fb fe86 	bl	8000204 <strlen>
 80044f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	6939      	ldr	r1, [r7, #16]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 ffc1 	bl	800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3304      	adds	r3, #4
 800450c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	18d0      	adds	r0, r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4619      	mov	r1, r3
 800451c:	f002 ff74 	bl	8007408 <memcpy>
      offset += length_md5sum;
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	4413      	add	r3, r2
 8004536:	b2ca      	uxtb	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	0a19      	lsrs	r1, r3, #8
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	4413      	add	r3, r2
 8004546:	b2ca      	uxtb	r2, r1
 8004548:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0c19      	lsrs	r1, r3, #16
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3302      	adds	r3, #2
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4413      	add	r3, r2
 8004556:	b2ca      	uxtb	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	0e19      	lsrs	r1, r3, #24
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3303      	adds	r3, #3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	b2ca      	uxtb	r2, r1
 8004568:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3304      	adds	r3, #4
 800456e:	61fb      	str	r3, [r7, #28]
      return offset;
 8004570:	69fb      	ldr	r3, [r7, #28]
    }
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800457a:	b580      	push	{r7, lr}
 800457c:	b08a      	sub	sp, #40	; 0x28
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	889b      	ldrh	r3, [r3, #4]
 800459a:	b21a      	sxth	r2, r3
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3301      	adds	r3, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	440b      	add	r3, r1
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	3302      	adds	r3, #2
 80045b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	441a      	add	r2, r3
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 ff7d 	bl	80054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	3304      	adds	r3, #4
 80045d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4413      	add	r3, r2
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	429a      	cmp	r2, r3
 80045e0:	d20c      	bcs.n	80045fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	441a      	add	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	3b01      	subs	r3, #1
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	440b      	add	r3, r1
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	3301      	adds	r3, #1
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e7ec      	b.n	80045d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	4413      	add	r3, r2
 8004602:	3b01      	subs	r3, #1
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	4413      	add	r3, r2
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	3b01      	subs	r3, #1
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	441a      	add	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	441a      	add	r2, r3
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ff4a 	bl	80054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3304      	adds	r3, #4
 8004636:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	429a      	cmp	r2, r3
 8004646:	d20c      	bcs.n	8004662 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	441a      	add	r2, r3
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	3b01      	subs	r3, #1
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	440b      	add	r3, r1
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	3301      	adds	r3, #1
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	e7ec      	b.n	800463c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	3b01      	subs	r3, #1
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	4413      	add	r3, r2
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3b01      	subs	r3, #1
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	441a      	add	r2, r3
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff17 	bl	80054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3304      	adds	r3, #4
 800469c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d20c      	bcs.n	80046c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	441a      	add	r2, r3
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	440b      	add	r3, r1
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e7ec      	b.n	80046a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	3b01      	subs	r3, #1
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	4413      	add	r3, r2
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	3b01      	subs	r3, #1
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	440a      	add	r2, r1
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	3301      	adds	r3, #1
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	440b      	add	r3, r1
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3302      	adds	r3, #2
 8004716:	6839      	ldr	r1, [r7, #0]
 8004718:	440b      	add	r3, r1
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	4313      	orrs	r3, r2
 8004720:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3303      	adds	r3, #3
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	440b      	add	r3, r1
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	061b      	lsls	r3, r3, #24
 8004730:	4313      	orrs	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3304      	adds	r3, #4
 800473e:	61bb      	str	r3, [r7, #24]
     return offset;
 8004740:	69bb      	ldr	r3, [r7, #24]
    }
 8004742:	4618      	mov	r0, r3
 8004744:	3728      	adds	r7, #40	; 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	080076e8 	.word	0x080076e8

08004768 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	08007704 	.word	0x08007704

08004784 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fd34 	bl	80041fc <_ZN3ros3MsgC1Ev>
 8004794:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	711a      	strb	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80047a4:	609a      	str	r2, [r3, #8]
    {
    }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	0800788c 	.word	0x0800788c
 80047b4:	080076e4 	.word	0x080076e4

080047b8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	7912      	ldrb	r2, [r2, #4]
 80047d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fd11 	bl	8000204 <strlen>
 80047e2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fe4c 	bl	800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	18d0      	adds	r0, r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4619      	mov	r1, r3
 8004806:	f002 fdff 	bl	8007408 <memcpy>
      offset += length_msg;
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4413      	add	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
      return offset;
 8004812:	68fb      	ldr	r3, [r7, #12]
    }
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	4413      	add	r3, r2
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	441a      	add	r2, r3
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe3c 	bl	80054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3304      	adds	r3, #4
 8004852:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d20c      	bcs.n	800487e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	441a      	add	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	3b01      	subs	r3, #1
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	440b      	add	r3, r1
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3301      	adds	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e7ec      	b.n	8004858 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	3b01      	subs	r3, #1
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	4413      	add	r3, r2
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	441a      	add	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
     return offset;
 80048a2:	693b      	ldr	r3, [r7, #16]
    }
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	08007728 	.word	0x08007728

080048c8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	0800773c 	.word	0x0800773c

080048e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fc84 	bl	80041fc <_ZN3ros3MsgC1Ev>
 80048f4:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	61da      	str	r2, [r3, #28]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08007874 	.word	0x08007874

0800492c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	4413      	add	r3, r2
 8004944:	b2ca      	uxtb	r2, r1
 8004946:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0a19      	lsrs	r1, r3, #8
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4413      	add	r3, r2
 8004956:	b2ca      	uxtb	r2, r1
 8004958:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	0c19      	lsrs	r1, r3, #16
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	3302      	adds	r3, #2
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	4413      	add	r3, r2
 8004968:	b2ca      	uxtb	r2, r1
 800496a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	0e19      	lsrs	r1, r3, #24
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3303      	adds	r3, #3
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4413      	add	r3, r2
 800497a:	b2ca      	uxtb	r2, r1
 800497c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	3304      	adds	r3, #4
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004984:	2300      	movs	r3, #0
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	429a      	cmp	r2, r3
 8004990:	d22b      	bcs.n	80049ea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80049a0:	6939      	ldr	r1, [r7, #16]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4413      	add	r3, r2
 80049a8:	b2ca      	uxtb	r2, r1
 80049aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	0a19      	lsrs	r1, r3, #8
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	3301      	adds	r3, #1
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	b2ca      	uxtb	r2, r1
 80049ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	0c19      	lsrs	r1, r3, #16
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	3302      	adds	r3, #2
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	b2ca      	uxtb	r2, r1
 80049ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	0e19      	lsrs	r1, r3, #24
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	3303      	adds	r3, #3
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	4413      	add	r3, r2
 80049d8:	b2ca      	uxtb	r2, r1
 80049da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	3304      	adds	r3, #4
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	3301      	adds	r3, #1
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	e7ce      	b.n	8004988 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6919      	ldr	r1, [r3, #16]
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	b2ca      	uxtb	r2, r1
 80049f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	0a19      	lsrs	r1, r3, #8
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	3301      	adds	r3, #1
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	b2ca      	uxtb	r2, r1
 8004a08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	0c19      	lsrs	r1, r3, #16
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	3302      	adds	r3, #2
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	4413      	add	r3, r2
 8004a18:	b2ca      	uxtb	r2, r1
 8004a1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	0e19      	lsrs	r1, r3, #24
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	3303      	adds	r3, #3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4413      	add	r3, r2
 8004a2a:	b2ca      	uxtb	r2, r1
 8004a2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	3304      	adds	r3, #4
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d22b      	bcs.n	8004a9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8004a50:	68f9      	ldr	r1, [r7, #12]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	b2ca      	uxtb	r2, r1
 8004a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	0a19      	lsrs	r1, r3, #8
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	3301      	adds	r3, #1
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	b2ca      	uxtb	r2, r1
 8004a6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0c19      	lsrs	r1, r3, #16
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	3302      	adds	r3, #2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	b2ca      	uxtb	r2, r1
 8004a7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	0e19      	lsrs	r1, r3, #24
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	3303      	adds	r3, #3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	b2ca      	uxtb	r2, r1
 8004a8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	3304      	adds	r3, #4
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e7ce      	b.n	8004a38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69d9      	ldr	r1, [r3, #28]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b2ca      	uxtb	r2, r1
 8004aa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	0a19      	lsrs	r1, r3, #8
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	b2ca      	uxtb	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	0c19      	lsrs	r1, r3, #16
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b2ca      	uxtb	r2, r1
 8004aca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	0e19      	lsrs	r1, r3, #24
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	3303      	adds	r3, #3
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	b2ca      	uxtb	r2, r1
 8004adc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d228      	bcs.n	8004b44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fb80 	bl	8000204 <strlen>
 8004b04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	6979      	ldr	r1, [r7, #20]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fcbb 	bl	800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	3304      	adds	r3, #4
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	18d0      	adds	r0, r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f002 fc6a 	bl	8007408 <memcpy>
      offset += length_stringsi;
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	4413      	add	r3, r2
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e7d1      	b.n	8004ae8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004b46:	4618      	mov	r0, r3
 8004b48:	3728      	adds	r7, #40	; 0x28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08e      	sub	sp, #56	; 0x38
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	3301      	adds	r3, #1
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	3303      	adds	r3, #3
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	6a3a      	ldr	r2, [r7, #32]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d90a      	bls.n	8004bc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f002 fc3a 	bl	8007430 <realloc>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a3a      	ldr	r2, [r7, #32]
 8004bc6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004bc8:	2300      	movs	r3, #0
 8004bca:	633b      	str	r3, [r7, #48]	; 0x30
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d236      	bcs.n	8004c44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	440a      	add	r2, r1
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	3301      	adds	r3, #1
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	440b      	add	r3, r1
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	3302      	adds	r3, #2
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	440b      	add	r3, r1
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	3303      	adds	r3, #3
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	440b      	add	r3, r1
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	3304      	adds	r3, #4
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	3208      	adds	r2, #8
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	3301      	adds	r3, #1
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
 8004c42:	e7c3      	b.n	8004bcc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	4413      	add	r3, r2
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	3301      	adds	r3, #1
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	4413      	add	r3, r2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	3302      	adds	r3, #2
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	3303      	adds	r3, #3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	3304      	adds	r3, #4
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d90a      	bls.n	8004caa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f002 fbc6 	bl	8007430 <realloc>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d236      	bcs.n	8004d2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	440a      	add	r2, r1
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	440b      	add	r3, r1
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	440b      	add	r3, r1
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	3303      	adds	r3, #3
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	440b      	add	r3, r1
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	3304      	adds	r3, #4
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	3214      	adds	r2, #20
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	3301      	adds	r3, #1
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	e7c3      	b.n	8004cb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	4413      	add	r3, r2
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	3301      	adds	r3, #1
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	4413      	add	r3, r2
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	3303      	adds	r3, #3
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	061b      	lsls	r3, r3, #24
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	3304      	adds	r3, #4
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d90a      	bls.n	8004d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f002 fb52 	bl	8007430 <realloc>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d23f      	bcs.n	8004e26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	441a      	add	r2, r3
 8004dac:	f107 030c 	add.w	r3, r7, #12
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fb87 	bl	80054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dba:	3304      	adds	r3, #4
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20c      	bcs.n	8004de8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	441a      	add	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	440b      	add	r3, r1
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	3301      	adds	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	e7ec      	b.n	8004dc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	3b01      	subs	r3, #1
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	441a      	add	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	3220      	adds	r2, #32
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	3301      	adds	r3, #1
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e24:	e7ba      	b.n	8004d9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3738      	adds	r7, #56	; 0x38
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	08007810 	.word	0x08007810

08004e4c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	08007760 	.word	0x08007760

08004e68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	611a      	str	r2, [r3, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68d8      	ldr	r0, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6891      	ldr	r1, [r2, #8]
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	4798      	blx	r3
 8004eb4:	4603      	mov	r3, r0
  };
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
  }
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - huart->hdmarx->Instance->NDTR) & (rbuflen - 1); }
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	425b      	negs	r3, r3
 8004eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
      htim(&htim2), huart(&huart3), rind(0), twind(0), tfind(0){
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <_ZN13STM32HardwareC1Ev+0x3c>)
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <_ZN13STM32HardwareC1Ev+0x40>)
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
    }
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	200013e0 	.word	0x200013e0
 8004f3c:	20001540 	.word	0x20001540

08004f40 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(TIM_HandleTypeDef *htim_, UART_HandleTypeDef *huart_):
      htim(htim_), huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f809 	bl	8004f60 <_ZN13STM32Hardware10reset_rbufEv>

      HAL_TIM_Base_Start(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd fa2f 	bl	80023b6 <HAL_TIM_Base_Start>
    }
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6858      	ldr	r0, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f74:	4619      	mov	r1, r3
 8004f76:	f7fe fa05 	bl	8003384 <HAL_UART_Receive_DMA>
    }
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <_ZN13STM32Hardware4readEv>:

    int read(){
 8004f82:	b590      	push	{r4, r7, lr}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
      int c = -1;
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f8e:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff9d 	bl	8004ed6 <_ZN13STM32Hardware10getRdmaIndEv>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	429c      	cmp	r4, r3
 8004fa0:	bf14      	ite	ne
 8004fa2:	2301      	movne	r3, #1
 8004fa4:	2300      	moveq	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	7a1b      	ldrb	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004fc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
    }
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd90      	pop	{r4, r7, pc}

08004fdc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d108      	bne.n	8005004 <_ZN13STM32Hardware5flushEv+0x28>
 8004ff2:	4b28      	ldr	r3, [pc, #160]	; (8005094 <_ZN13STM32Hardware5flushEv+0xb8>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f083 0301 	eor.w	r3, r3, #1
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <_ZN13STM32Hardware5flushEv+0x28>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <_ZN13STM32Hardware5flushEv+0x2a>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d040      	beq.n	800508c <_ZN13STM32Hardware5flushEv+0xb0>
        mutex = true;
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <_ZN13STM32Hardware5flushEv+0xb8>)
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 800501c:	429a      	cmp	r2, r3
 800501e:	d032      	beq.n	8005086 <_ZN13STM32Hardware5flushEv+0xaa>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 800502c:	429a      	cmp	r2, r3
 800502e:	d20a      	bcs.n	8005046 <_ZN13STM32Hardware5flushEv+0x6a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 800503e:	b29b      	uxth	r3, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	b29b      	uxth	r3, r3
 8005044:	e006      	b.n	8005054 <_ZN13STM32Hardware5flushEv+0x78>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 800504c:	b29b      	uxth	r3, r3
 800504e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8005052:	b29b      	uxth	r3, r3
 8005054:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6858      	ldr	r0, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 8005060:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	3304      	adds	r3, #4
 800506a:	89fa      	ldrh	r2, [r7, #14]
 800506c:	4619      	mov	r1, r3
 800506e:	f7fe f91d 	bl	80032ac <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	4413      	add	r3, r2
 800507c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
        }
        mutex = false;
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <_ZN13STM32Hardware5flushEv+0xb8>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
      }
    }
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200000ec 	.word	0x200000ec

08005098 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
      int n = length;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	61bb      	str	r3, [r7, #24]
      n = n <= tbuflen ? n : tbuflen;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ae:	bfa8      	it	ge
 80050b0:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80050b4:	61bb      	str	r3, [r7, #24]

      int get_tail;

      //int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      int n_tail;
      n <= (int)(tbuflen - twind) ? get_tail = n : get_tail = tbuflen - twind;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 80050bc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80050c0:	461a      	mov	r2, r3
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	dc02      	bgt.n	80050ce <_ZN13STM32Hardware5writeEPhi+0x36>
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e005      	b.n	80050da <_ZN13STM32Hardware5writeEPhi+0x42>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 80050d4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80050d8:	61fb      	str	r3, [r7, #28]


      n_tail = get_tail;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	617b      	str	r3, [r7, #20]

      memcpy(&(tbuf[twind]), data, n_tail);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 80050e4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	3304      	adds	r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f002 f988 	bl	8007408 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	4413      	add	r3, r2
 8005102:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c

      if(n != n_tail){
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	d00b      	beq.n	800512c <_ZN13STM32Hardware5writeEPhi+0x94>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	18d1      	adds	r1, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	461a      	mov	r2, r3
 8005128:	f002 f96e 	bl	8007408 <memcpy>
      }

      flush();
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff ff55 	bl	8004fdc <_ZN13STM32Hardware5flushEv>
    }
 8005132:	bf00      	nop
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return __HAL_TIM_GET_COUNTER(htim); }
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
      data("")
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f84a 	bl	80041fc <_ZN3ros3MsgC1Ev>
 8005168:	4a05      	ldr	r2, [pc, #20]	; (8005180 <_ZN8std_msgs6StringC1Ev+0x28>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8005172:	605a      	str	r2, [r3, #4]
    {
    }
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	08007848 	.word	0x08007848
 8005184:	080076e4 	.word	0x080076e4

08005188 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb f832 	bl	8000204 <strlen>
 80051a0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4413      	add	r3, r2
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f96d 	bl	800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3304      	adds	r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	18d0      	adds	r0, r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	4619      	mov	r1, r3
 80051c4:	f002 f920 	bl	8007408 <memcpy>
      offset += length_data;
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
      return offset;
 80051d0:	68fb      	ldr	r3, [r7, #12]
    }
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	441a      	add	r2, r3
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f966 	bl	80054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3304      	adds	r3, #4
 80051fe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	429a      	cmp	r2, r3
 800520e:	d20c      	bcs.n	800522a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	441a      	add	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	3b01      	subs	r3, #1
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	440b      	add	r3, r1
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3301      	adds	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e7ec      	b.n	8005204 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	3b01      	subs	r3, #1
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	4413      	add	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3b01      	subs	r3, #1
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
     return offset;
 800524e:	693b      	ldr	r3, [r7, #16]
    }
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	08007784 	.word	0x08007784

08005274 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	08007794 	.word	0x08007794

08005290 <HAL_UART_TxCpltCallback>:

char hello[] = "Hello world!";
char device_info[] = "STM32F446RE\nACSL_interface_board\nDesigned by YeongJunKim\ncolson@korea.ac.kr";


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8005298:	4805      	ldr	r0, [pc, #20]	; (80052b0 <HAL_UART_TxCpltCallback+0x20>)
 800529a:	f000 f9d9 	bl	8005650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800529e:	4603      	mov	r3, r0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fe9b 	bl	8004fdc <_ZN13STM32Hardware5flushEv>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200000f0 	.word	0x200000f0

080052b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
   nh.getHardware()->reset_rbuf();
 80052bc:	4805      	ldr	r0, [pc, #20]	; (80052d4 <HAL_UART_RxCpltCallback+0x20>)
 80052be:	f000 f9c7 	bl	8005650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fe4b 	bl	8004f60 <_ZN13STM32Hardware10reset_rbufEv>
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200000f0 	.word	0x200000f0

080052d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052dc:	f7fb f91a 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052e0:	f000 f856 	bl	8005390 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052e4:	f7fe fee0 	bl	80040a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80052e8:	f7fe fe86 	bl	8003ff8 <MX_DMA_Init>
  MX_TIM1_Init();
 80052ec:	f001 f8a4 	bl	8006438 <MX_TIM1_Init>
  MX_TIM2_Init();
 80052f0:	f001 f948 	bl	8006584 <MX_TIM2_Init>
  MX_TIM3_Init();
 80052f4:	f001 f994 	bl	8006620 <MX_TIM3_Init>
  MX_TIM4_Init();
 80052f8:	f001 f9e6 	bl	80066c8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80052fc:	f001 fa38 	bl	8006770 <MX_TIM5_Init>
  MX_TIM8_Init();
 8005300:	f001 fa8a 	bl	8006818 <MX_TIM8_Init>
  MX_CAN1_Init();
 8005304:	f7fe fddc 	bl	8003ec0 <MX_CAN1_Init>
  MX_UART4_Init();
 8005308:	f001 fc7c 	bl	8006c04 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800530c:	f001 fcce 	bl	8006cac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005310:	f001 fcf6 	bl	8006d00 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8005314:	f001 fca0 	bl	8006c58 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  nh.initNode();
 8005318:	4816      	ldr	r0, [pc, #88]	; (8005374 <main+0x9c>)
 800531a:	f000 f9a5 	bl	8005668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(pub_chat);
 800531e:	4916      	ldr	r1, [pc, #88]	; (8005378 <main+0xa0>)
 8005320:	4814      	ldr	r0, [pc, #80]	; (8005374 <main+0x9c>)
 8005322:	f000 f9c6 	bl	80056b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_device);
 8005326:	4915      	ldr	r1, [pc, #84]	; (800537c <main+0xa4>)
 8005328:	4812      	ldr	r0, [pc, #72]	; (8005374 <main+0x9c>)
 800532a:	f000 f9c2 	bl	80056b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  str_msg.data = hello;
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <main+0xa8>)
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <main+0xac>)
 8005332:	605a      	str	r2, [r3, #4]
	  str_device.data = device_info;
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <main+0xb0>)
 8005336:	4a15      	ldr	r2, [pc, #84]	; (800538c <main+0xb4>)
 8005338:	605a      	str	r2, [r3, #4]
	  hello[11]++;
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <main+0xac>)
 800533c:	7adb      	ldrb	r3, [r3, #11]
 800533e:	3301      	adds	r3, #1
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <main+0xac>)
 8005344:	72da      	strb	r2, [r3, #11]
	  if(hello[11] > 127)
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <main+0xac>)
 8005348:	7adb      	ldrb	r3, [r3, #11]
 800534a:	b25b      	sxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	da02      	bge.n	8005356 <main+0x7e>
		  hello[11] = 0;
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <main+0xac>)
 8005352:	2200      	movs	r2, #0
 8005354:	72da      	strb	r2, [r3, #11]



	  pub_chat.publish(&str_msg);
 8005356:	490a      	ldr	r1, [pc, #40]	; (8005380 <main+0xa8>)
 8005358:	4807      	ldr	r0, [pc, #28]	; (8005378 <main+0xa0>)
 800535a:	f7ff fd9c 	bl	8004e96 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  pub_device.publish(&str_device);
 800535e:	490a      	ldr	r1, [pc, #40]	; (8005388 <main+0xb0>)
 8005360:	4806      	ldr	r0, [pc, #24]	; (800537c <main+0xa4>)
 8005362:	f7ff fd98 	bl	8004e96 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 8005366:	4803      	ldr	r0, [pc, #12]	; (8005374 <main+0x9c>)
 8005368:	f000 f9d1 	bl	800570e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	  HAL_Delay(100);
 800536c:	2064      	movs	r0, #100	; 0x64
 800536e:	f7fb f943 	bl	80005f8 <HAL_Delay>
	  str_msg.data = hello;
 8005372:	e7dc      	b.n	800532e <main+0x56>
 8005374:	200000f0 	.word	0x200000f0
 8005378:	20001240 	.word	0x20001240
 800537c:	20001254 	.word	0x20001254
 8005380:	20001230 	.word	0x20001230
 8005384:	20000008 	.word	0x20000008
 8005388:	20001238 	.word	0x20001238
 800538c:	20000018 	.word	0x20000018

08005390 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b094      	sub	sp, #80	; 0x50
 8005394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005396:	f107 031c 	add.w	r3, r7, #28
 800539a:	2234      	movs	r2, #52	; 0x34
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f002 f83d 	bl	800741e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053a4:	f107 0308 	add.w	r3, r7, #8
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	4b2e      	ldr	r3, [pc, #184]	; (8005474 <_Z18SystemClock_Configv+0xe4>)
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	4a2d      	ldr	r2, [pc, #180]	; (8005474 <_Z18SystemClock_Configv+0xe4>)
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6413      	str	r3, [r2, #64]	; 0x40
 80053c4:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <_Z18SystemClock_Configv+0xe4>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80053d0:	2300      	movs	r3, #0
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <_Z18SystemClock_Configv+0xe8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80053dc:	4a26      	ldr	r2, [pc, #152]	; (8005478 <_Z18SystemClock_Configv+0xe8>)
 80053de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b24      	ldr	r3, [pc, #144]	; (8005478 <_Z18SystemClock_Configv+0xe8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053f0:	2302      	movs	r3, #2
 80053f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053f4:	2301      	movs	r3, #1
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053f8:	2310      	movs	r3, #16
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053fc:	2302      	movs	r3, #2
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005400:	2300      	movs	r3, #0
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005404:	2308      	movs	r3, #8
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800540c:	2302      	movs	r3, #2
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005410:	2302      	movs	r3, #2
 8005412:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005414:	2302      	movs	r3, #2
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	4618      	mov	r0, r3
 800541e:	f7fc fd45 	bl	8001eac <HAL_RCC_OscConfig>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8005432:	f000 f823 	bl	800547c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005436:	230f      	movs	r3, #15
 8005438:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800543a:	2302      	movs	r3, #2
 800543c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	2102      	movs	r1, #2
 8005452:	4618      	mov	r0, r3
 8005454:	f7fc fa76 	bl	8001944 <HAL_RCC_ClockConfig>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8005468:	f000 f808 	bl	800547c <Error_Handler>
  }
}
 800546c:	bf00      	nop
 800546e:	3750      	adds	r7, #80	; 0x50
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40023800 	.word	0x40023800
 8005478:	40007000 	.word	0x40007000

0800547c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d80d      	bhi.n	80054ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	fa22 f103 	lsr.w	r1, r2, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	b2ca      	uxtb	r2, r1
 80054b0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3301      	adds	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e7ee      	b.n	8005498 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d811      	bhi.n	8005504 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	440a      	add	r2, r1
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	4611      	mov	r1, r2
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	00d2      	lsls	r2, r2, #3
 80054f2:	fa01 f202 	lsl.w	r2, r1, r2
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e7ea      	b.n	80054da <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	08007860 	.word	0x08007860

08005530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ffe8 	bl	8005510 <_ZN3ros15NodeHandleBase_C1Ev>
 8005540:	4a42      	ldr	r2, [pc, #264]	; (800564c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x11c>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3304      	adds	r3, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff fcd6 	bl	8004efc <_ZN13STM32HardwareC1Ev>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005556:	3304      	adds	r3, #4
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005562:	3318      	adds	r3, #24
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f9bd 	bl	80048e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b18      	cmp	r3, #24
 8005572:	d80a      	bhi.n	800558a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
      publishers[i] = 0;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800557c:	2100      	movs	r1, #0
 800557e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	3301      	adds	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e7f1      	b.n	800556e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b18      	cmp	r3, #24
 8005592:	d80b      	bhi.n	80055ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	2200      	movs	r2, #0
 80055a2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3301      	adds	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	e7f0      	b.n	800558e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b6:	d20a      	bcs.n	80055ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9e>
      message_in[i] = 0;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e7f0      	b.n	80055b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d8:	d20a      	bcs.n	80055f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc0>
      message_out[i] = 0;
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4413      	add	r3, r2
 80055e0:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3301      	adds	r3, #1
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	e7f0      	b.n	80055d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055f6:	331c      	adds	r3, #28
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005602:	3304      	adds	r3, #4
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800560e:	3308      	adds	r3, #8
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800561a:	3310      	adds	r3, #16
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005626:	331c      	adds	r3, #28
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005632:	3304      	adds	r3, #4
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
  }
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	08007834 	.word	0x08007834

08005650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
  }
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fc63 	bl	8004f40 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005680:	3310      	adds	r3, #16
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800568c:	3314      	adds	r3, #20
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005698:	331c      	adds	r3, #28
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056a4:	3318      	adds	r3, #24
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
  };
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b18      	cmp	r3, #24
 80056c4:	dc1c      	bgt.n	8005700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d110      	bne.n	80056f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	60da      	str	r2, [r3, #12]
        return true;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e004      	b.n	8005702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e7df      	b.n	80056c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8005700:	2300      	movs	r3, #0
  }
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fd0d 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005720:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005728:	330c      	adds	r3, #12
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005734:	4293      	cmp	r3, r2
 8005736:	d905      	bls.n	8005744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800573e:	3304      	adds	r3, #4
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800574a:	3310      	adds	r3, #16
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      if (c_time > last_msg_timeout_time)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005758:	3310      	adds	r3, #16
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	429a      	cmp	r2, r3
 8005760:	d905      	bls.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        mode_ = MODE_FIRST_FF;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005768:	3310      	adds	r3, #16
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d014      	beq.n	80057a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x94>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fcdc 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005782:	4602      	mov	r2, r0
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 800578e:	429a      	cmp	r2, r3
 8005790:	bf8c      	ite	hi
 8005792:	2301      	movhi	r3, #1
 8005794:	2300      	movls	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x94>
          return SPIN_TIMEOUT;
 800579c:	f06f 0301 	mvn.w	r3, #1
 80057a0:	e211      	b.n	8005bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
      int data = hardware_.read();
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fbeb 	bl	8004f82 <_ZN13STM32Hardware4readEv>
 80057ac:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f2c0 81eb 	blt.w	8005b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x47e>
      checksum_ += data;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	441a      	add	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80057c8:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057d0:	3310      	adds	r3, #16
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	d12a      	bne.n	800582e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
        message_in[index_++] = data;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057de:	331c      	adds	r3, #28
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	1c51      	adds	r1, r2, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057ea:	331c      	adds	r3, #28
 80057ec:	6019      	str	r1, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	b2d9      	uxtb	r1, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	460a      	mov	r2, r1
 80057f8:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
        bytes_--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005802:	3314      	adds	r3, #20
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1e5a      	subs	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800580e:	3314      	adds	r3, #20
 8005810:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005818:	3314      	adds	r3, #20
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1a6      	bne.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_MSG_CHECKSUM;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005826:	3310      	adds	r3, #16
 8005828:	2208      	movs	r2, #8
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	e79f      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_FIRST_FF)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005834:	3310      	adds	r3, #16
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d131      	bne.n	80058a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x192>
        if (data == 0xff)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2bff      	cmp	r3, #255	; 0xff
 8005840:	d113      	bne.n	800586a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x15c>
          mode_++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005848:	3310      	adds	r3, #16
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005854:	3310      	adds	r3, #16
 8005856:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f103 0214 	add.w	r2, r3, #20
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005864:	3310      	adds	r3, #16
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e781      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fc63 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005874:	4602      	mov	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	; 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	bf8c      	ite	hi
 8005882:	2301      	movhi	r3, #1
 8005884:	2300      	movls	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	f43f af70 	beq.w	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          configured_ = false;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005894:	3304      	adds	r3, #4
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 800589a:	f06f 0301 	mvn.w	r3, #1
 800589e:	e192      	b.n	8005bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058a6:	3310      	adds	r3, #16
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d123      	bne.n	80058f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        if (data == PROTOCOL_VER)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2bfe      	cmp	r3, #254	; 0xfe
 80058b2:	d10b      	bne.n	80058cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
          mode_++;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058ba:	3310      	adds	r3, #16
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058c6:	3310      	adds	r3, #16
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e750      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_FIRST_FF;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058d2:	3310      	adds	r3, #16
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80058de:	3304      	adds	r3, #4
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f083 0301 	eor.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f43f af40 	beq.w	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f96d 	bl	8005bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80058f4:	e73b      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058fc:	3310      	adds	r3, #16
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d11c      	bne.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x230>
        bytes_ = data;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800590a:	3314      	adds	r3, #20
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005916:	331c      	adds	r3, #28
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
        mode_++;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005922:	3310      	adds	r3, #16
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800592e:	3310      	adds	r3, #16
 8005930:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e717      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005944:	3310      	adds	r3, #16
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d118      	bne.n	800597e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x270>
        bytes_ += data << 8;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005952:	3314      	adds	r3, #20
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005962:	3314      	adds	r3, #20
 8005964:	601a      	str	r2, [r3, #0]
        mode_++;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800596c:	3310      	adds	r3, #16
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005978:	3310      	adds	r3, #16
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e6f7      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005984:	3310      	adds	r3, #16
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d11d      	bne.n	80059c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ba>
        if ((checksum_ % 256) == 255)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	425a      	negs	r2, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	bf58      	it	pl
 800599c:	4253      	negpl	r3, r2
 800599e:	2bff      	cmp	r3, #255	; 0xff
 80059a0:	d10b      	bne.n	80059ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ac>
          mode_++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059a8:	3310      	adds	r3, #16
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059b4:	3310      	adds	r3, #16
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e6d9      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059c0:	3310      	adds	r3, #16
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e6d2      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059ce:	3310      	adds	r3, #16
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d116      	bne.n	8005a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f6>
        topic_ = data;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059dc:	3318      	adds	r3, #24
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	601a      	str	r2, [r3, #0]
        mode_++;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059e8:	3310      	adds	r3, #16
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059f4:	3310      	adds	r3, #16
 80059f6:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e6b4      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a0a:	3310      	adds	r3, #16
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d121      	bne.n	8005a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x348>
        topic_ += data << 8;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a18:	3318      	adds	r3, #24
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	441a      	add	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a28:	3318      	adds	r3, #24
 8005a2a:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a32:	3310      	adds	r3, #16
 8005a34:	2207      	movs	r2, #7
 8005a36:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a3e:	3314      	adds	r3, #20
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f47f ae93 	bne.w	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          mode_ = MODE_MSG_CHECKSUM;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a4e:	3310      	adds	r3, #16
 8005a50:	2208      	movs	r2, #8
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e68b      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f47f ae84 	bne.w	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        mode_ = MODE_FIRST_FF;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	425a      	negs	r2, r3
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	bf58      	it	pl
 8005a82:	4253      	negpl	r3, r2
 8005a84:	2bff      	cmp	r3, #255	; 0xff
 8005a86:	f47f ae72 	bne.w	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a90:	3318      	adds	r3, #24
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d114      	bne.n	8005ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b4>
            requestSyncTime();
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f898 	bl	8005bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8b3 	bl	8005c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005aaa:	3308      	adds	r3, #8
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac0:	e081      	b.n	8005bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
          else if (topic_ == TopicInfo::ID_TIME)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ac8:	3318      	adds	r3, #24
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b0a      	cmp	r3, #10
 8005ace:	d107      	bne.n	8005ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
            syncTime(message_in);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f979 	bl	8005dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005ade:	e646      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b06      	cmp	r3, #6
 8005aec:	d111      	bne.n	8005b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x404>
            req_param_resp.deserialize(message_in);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005af4:	3318      	adds	r3, #24
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f825 	bl	8004b4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e62d      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b18:	3318      	adds	r3, #24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d106      	bne.n	8005b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x420>
            configured_ = false;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b26:	3304      	adds	r3, #4
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e61f      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
            if (subscribers[topic_ - 100])
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b34:	3318      	adds	r3, #24
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3b64      	subs	r3, #100	; 0x64
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f43f ae11 	beq.w	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
              subscribers[topic_ - 100]->callback(message_in);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b52:	3318      	adds	r3, #24
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3b64      	subs	r3, #100	; 0x64
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b6a:	3318      	adds	r3, #24
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3b64      	subs	r3, #100	; 0x64
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8005b86:	4611      	mov	r1, r2
 8005b88:	4798      	blx	r3
    while (true)
 8005b8a:	e5f0      	b.n	800576e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x60>
        break;
 8005b8c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b94:	3304      	adds	r3, #4
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d013      	beq.n	8005bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d908      	bls.n	8005bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b6>
      requestSyncTime();
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f80b 	bl	8005bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 8005bc4:	2300      	movs	r3, #0
  }
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005bd6:	f107 030c 	add.w	r3, r7, #12
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fb1e 	bl	800421c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f107 020c 	add.w	r2, r7, #12
 8005bea:	210a      	movs	r1, #10
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
    rt_time = hardware_.time();
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff faa0 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
  }
 8005c02:	bf00      	nop
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005c0a:	b590      	push	{r4, r7, lr}
 8005c0c:	b08b      	sub	sp, #44	; 0x2c
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005c12:	f107 030c 	add.w	r3, r7, #12
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fbf0 	bl	80043fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	2b18      	cmp	r3, #24
 8005c24:	dc5b      	bgt.n	8005cde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04f      	beq.n	8005cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	6859      	ldr	r1, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4608      	mov	r0, r1
 8005c7c:	4798      	blx	r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	6859      	ldr	r1, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4798      	blx	r3
 8005ca8:	4603      	mov	r3, r0
 8005caa:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681c      	ldr	r4, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff f8fa 	bl	8004ebe <_ZN3ros9Publisher15getEndpointTypeEv>
 8005cca:	4601      	mov	r1, r0
 8005ccc:	f107 030c 	add.w	r3, r7, #12
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	3301      	adds	r3, #1
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
 8005cdc:	e7a0      	b.n	8005c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	2b18      	cmp	r3, #24
 8005ce6:	dc68      	bgt.n	8005dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d05b      	beq.n	8005db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4608      	mov	r0, r1
 8005d44:	4798      	blx	r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4798      	blx	r3
 8005d70:	4603      	mov	r3, r0
 8005d72:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d78:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681c      	ldr	r4, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4608      	mov	r0, r1
 8005da4:	4798      	blx	r3
 8005da6:	4601      	mov	r1, r0
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	461a      	mov	r2, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	3301      	adds	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	e793      	b.n	8005ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
  }
 8005dc6:	bf00      	nop
 8005dc8:	372c      	adds	r7, #44	; 0x2c
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd90      	pop	{r4, r7, pc}
	...

08005dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005dda:	f107 0308 	add.w	r3, r7, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fa1c 	bl	800421c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff f9a6 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005dee:	4602      	mov	r2, r0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005dfa:	f107 0308 	add.w	r3, r7, #8
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fa7b 	bl	80042fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4916      	ldr	r1, [pc, #88]	; (8005e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005e0c:	fba1 1303 	umull	r1, r3, r1, r3
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	4413      	add	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005e16:	6939      	ldr	r1, [r7, #16]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005e1c:	fba3 0302 	umull	r0, r3, r3, r2
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e26:	fb00 f303 	mul.w	r3, r0, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	440b      	add	r3, r1
 8005e34:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8a8 	bl	8005f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff f976 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e56:	330c      	adds	r3, #12
 8005e58:	601a      	str	r2, [r3, #0]
  }
 8005e5a:	bf00      	nop
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	10624dd3 	.word	0x10624dd3
 8005e68:	000f4240 	.word	0x000f4240

08005e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b63      	cmp	r3, #99	; 0x63
 8005e7c:	dd0b      	ble.n	8005e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e84:	3304      	adds	r3, #4
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f083 0301 	eor.w	r3, r3, #1
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e077      	b.n	8005f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f602 6228 	addw	r2, r2, #3624	; 0xe28
 8005ea2:	3207      	adds	r2, #7
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	f883 2e28 	strb.w	r2, [r3, #3624]	; 0xe28
    message_out[1] = PROTOCOL_VER;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	22fe      	movs	r2, #254	; 0xfe
 8005eb8:	f883 2e29 	strb.w	r2, [r3, #3625]	; 0xe29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f883 2e2a 	strb.w	r2, [r3, #3626]	; 0xe2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	121b      	asrs	r3, r3, #8
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f883 2e2b 	strb.w	r2, [r3, #3627]	; 0xe2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 2e2a 	ldrb.w	r2, [r3, #3626]	; 0xe2a
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 3e2b 	ldrb.w	r3, [r3, #3627]	; 0xe2b
 8005ee0:	4413      	add	r3, r2
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f883 2e2c 	strb.w	r2, [r3, #3628]	; 0xe2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f883 2e2d 	strb.w	r2, [r3, #3629]	; 0xe2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	121b      	asrs	r3, r3, #8
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f883 2e2e 	strb.w	r2, [r3, #3630]	; 0xe2e

    /* calculate checksum */
    int chk = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3307      	adds	r3, #7
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	da0d      	bge.n	8005f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e7ec      	b.n	8005f0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3307      	adds	r3, #7
 8005f38:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	425a      	negs	r2, r3
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	bf58      	it	pl
 8005f44:	4253      	negpl	r3, r2
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1c59      	adds	r1, r3, #1
 8005f4c:	6179      	str	r1, [r7, #20]
 8005f4e:	43d2      	mvns	r2, r2
 8005f50:	b2d1      	uxtb	r1, r2
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	460a      	mov	r2, r1
 8005f58:	f883 2e28 	strb.w	r2, [r3, #3624]	; 0xe28

    if (l <= OUTPUT_SIZE)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f62:	dc0a      	bgt.n	8005f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1d18      	adds	r0, r3, #4
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f603 6328 	addw	r3, r3, #3624	; 0xe28
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4619      	mov	r1, r3
 8005f72:	f7ff f891 	bl	8005098 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	e005      	b.n	8005f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005f7a:	4905      	ldr	r1, [pc, #20]	; (8005f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f849 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	080077b8 	.word	0x080077b8

08005f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f8c9 	bl	800513a <_ZN13STM32Hardware4timeEv>
 8005fa8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4915      	ldr	r1, [pc, #84]	; (8006008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005fb2:	fba1 1303 	umull	r1, r3, r1, r3
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	1e5a      	subs	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005fca:	fba3 0302 	umull	r0, r3, r3, r2
 8005fce:	099b      	lsrs	r3, r3, #6
 8005fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fd4:	fb00 f303 	mul.w	r3, r0, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	4a0c      	ldr	r2, [pc, #48]	; (800600c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8005fdc:	fb02 f303 	mul.w	r3, r2, r3
 8005fe0:	1aca      	subs	r2, r1, r3
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
    normalizeSecNSec(sec_offset, nsec_offset);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f603 421c 	addw	r2, r3, #3100	; 0xc1c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 fdd6 	bl	8006bac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	10624dd3 	.word	0x10624dd3
 800600c:	000f4240 	.word	0x000f4240
 8006010:	3b9aca00 	.word	0x3b9aca00

08006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	2103      	movs	r1, #3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f804 	bl	8006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	460b      	mov	r3, r1
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800603e:	f107 0314 	add.w	r3, r7, #20
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fb9e 	bl	8004784 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006048:	7afb      	ldrb	r3, [r7, #11]
 800604a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f107 0214 	add.w	r2, r7, #20
 800605a:	2107      	movs	r1, #7
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	4798      	blx	r3
  }
 8006060:	bf00      	nop
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_Z41__static_initialization_and_destruction_0ii>:
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d119      	bne.n	80060ac <_Z41__static_initialization_and_destruction_0ii+0x44>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800607e:	4293      	cmp	r3, r2
 8006080:	d114      	bne.n	80060ac <_Z41__static_initialization_and_destruction_0ii+0x44>
ros::NodeHandle nh;
 8006082:	480c      	ldr	r0, [pc, #48]	; (80060b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006084:	f7ff fa54 	bl	8005530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8006088:	480b      	ldr	r0, [pc, #44]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800608a:	f7ff f865 	bl	8005158 <_ZN8std_msgs6StringC1Ev>
std_msgs::String str_device;
 800608e:	480b      	ldr	r0, [pc, #44]	; (80060bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8006090:	f7ff f862 	bl	8005158 <_ZN8std_msgs6StringC1Ev>
ros::Publisher pub_chat("chatter", &str_msg);
 8006094:	2300      	movs	r3, #0
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006098:	4909      	ldr	r1, [pc, #36]	; (80060c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800609a:	480a      	ldr	r0, [pc, #40]	; (80060c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800609c:	f7fe fee4 	bl	8004e68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_device("dev_info", &str_device);
 80060a0:	2300      	movs	r3, #0
 80060a2:	4a06      	ldr	r2, [pc, #24]	; (80060bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80060a4:	4908      	ldr	r1, [pc, #32]	; (80060c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80060a6:	4809      	ldr	r0, [pc, #36]	; (80060cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80060a8:	f7fe fede 	bl	8004e68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	200000f0 	.word	0x200000f0
 80060b8:	20001230 	.word	0x20001230
 80060bc:	20001238 	.word	0x20001238
 80060c0:	080077f4 	.word	0x080077f4
 80060c4:	20001240 	.word	0x20001240
 80060c8:	080077fc 	.word	0x080077fc
 80060cc:	20001254 	.word	0x20001254

080060d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
    return configured_;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80060de:	3304      	adds	r3, #4
 80060e0:	781b      	ldrb	r3, [r3, #0]
  };
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <_GLOBAL__sub_I_nh>:
 80060ee:	b580      	push	{r7, lr}
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060f6:	2001      	movs	r0, #1
 80060f8:	f7ff ffb6 	bl	8006068 <_Z41__static_initialization_and_destruction_0ii>
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	4b13      	ldr	r3, [pc, #76]	; (8006158 <HAL_MspInit+0x58>)
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	4a12      	ldr	r2, [pc, #72]	; (8006158 <HAL_MspInit+0x58>)
 8006110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006114:	6453      	str	r3, [r2, #68]	; 0x44
 8006116:	4b10      	ldr	r3, [pc, #64]	; (8006158 <HAL_MspInit+0x58>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	603b      	str	r3, [r7, #0]
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <HAL_MspInit+0x58>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	4a0b      	ldr	r2, [pc, #44]	; (8006158 <HAL_MspInit+0x58>)
 800612c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006130:	6413      	str	r3, [r2, #64]	; 0x40
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_MspInit+0x58>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800613e:	2200      	movs	r2, #0
 8006140:	2100      	movs	r1, #0
 8006142:	2005      	movs	r0, #5
 8006144:	f7fa fe83 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006148:	2005      	movs	r0, #5
 800614a:	f7fa fe9c 	bl	8000e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800

0800615c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800616a:	b480      	push	{r7}
 800616c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800616e:	e7fe      	b.n	800616e <HardFault_Handler+0x4>

08006170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006174:	e7fe      	b.n	8006174 <MemManage_Handler+0x4>

08006176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006176:	b480      	push	{r7}
 8006178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800617a:	e7fe      	b.n	800617a <BusFault_Handler+0x4>

0800617c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006180:	e7fe      	b.n	8006180 <UsageFault_Handler+0x4>

08006182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006182:	b480      	push	{r7}
 8006184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800619e:	b480      	push	{r7}
 80061a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061b0:	f7fa fa02 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061b4:	bf00      	nop
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80061cc:	4802      	ldr	r0, [pc, #8]	; (80061d8 <DMA1_Stream0_IRQHandler+0x10>)
 80061ce:	f7fa ffa5 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20001700 	.word	0x20001700

080061dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80061e0:	4802      	ldr	r0, [pc, #8]	; (80061ec <DMA1_Stream1_IRQHandler+0x10>)
 80061e2:	f7fa ff9b 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200014e0 	.word	0x200014e0

080061f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80061f4:	4802      	ldr	r0, [pc, #8]	; (8006200 <DMA1_Stream2_IRQHandler+0x10>)
 80061f6:	f7fa ff91 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20001420 	.word	0x20001420

08006204 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <DMA1_Stream3_IRQHandler+0x10>)
 800620a:	f7fa ff87 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20001580 	.word	0x20001580

08006218 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800621c:	4802      	ldr	r0, [pc, #8]	; (8006228 <DMA1_Stream4_IRQHandler+0x10>)
 800621e:	f7fa ff7d 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20001760 	.word	0x20001760

0800622c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006230:	4802      	ldr	r0, [pc, #8]	; (800623c <DMA1_Stream5_IRQHandler+0x10>)
 8006232:	f7fa ff73 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20001480 	.word	0x20001480

08006240 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006244:	4802      	ldr	r0, [pc, #8]	; (8006250 <DMA1_Stream6_IRQHandler+0x10>)
 8006246:	f7fa ff69 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20001620 	.word	0x20001620

08006254 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006258:	4802      	ldr	r0, [pc, #8]	; (8006264 <CAN1_TX_IRQHandler+0x10>)
 800625a:	f7fa faea 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20001278 	.word	0x20001278

08006268 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800626c:	4802      	ldr	r0, [pc, #8]	; (8006278 <CAN1_RX0_IRQHandler+0x10>)
 800626e:	f7fa fae0 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20001278 	.word	0x20001278

0800627c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006280:	4802      	ldr	r0, [pc, #8]	; (800628c <CAN1_RX1_IRQHandler+0x10>)
 8006282:	f7fa fad6 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006286:	bf00      	nop
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20001278 	.word	0x20001278

08006290 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006294:	4802      	ldr	r0, [pc, #8]	; (80062a0 <CAN1_SCE_IRQHandler+0x10>)
 8006296:	f7fa facc 	bl	8000832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800629a:	bf00      	nop
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20001278 	.word	0x20001278

080062a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80062a8:	4802      	ldr	r0, [pc, #8]	; (80062b4 <TIM3_IRQHandler+0x10>)
 80062aa:	f7fc f965 	bl	8002578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20001360 	.word	0x20001360

080062b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80062bc:	4802      	ldr	r0, [pc, #8]	; (80062c8 <TIM4_IRQHandler+0x10>)
 80062be:	f7fc f95b 	bl	8002578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80062c2:	bf00      	nop
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200012e0 	.word	0x200012e0

080062cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062d0:	4802      	ldr	r0, [pc, #8]	; (80062dc <USART2_IRQHandler+0x10>)
 80062d2:	f7fd f8d7 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200016c0 	.word	0x200016c0

080062e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80062e4:	4802      	ldr	r0, [pc, #8]	; (80062f0 <USART3_IRQHandler+0x10>)
 80062e6:	f7fd f8cd 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20001540 	.word	0x20001540

080062f4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80062f8:	4802      	ldr	r0, [pc, #8]	; (8006304 <DMA1_Stream7_IRQHandler+0x10>)
 80062fa:	f7fa ff0f 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80062fe:	bf00      	nop
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200017c0 	.word	0x200017c0

08006308 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800630c:	4802      	ldr	r0, [pc, #8]	; (8006318 <UART4_IRQHandler+0x10>)
 800630e:	f7fd f8b9 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006312:	bf00      	nop
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20001680 	.word	0x20001680

0800631c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006320:	4802      	ldr	r0, [pc, #8]	; (800632c <UART5_IRQHandler+0x10>)
 8006322:	f7fd f8af 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200015e0 	.word	0x200015e0

08006330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
	return 1;
 8006334:	2301      	movs	r3, #1
}
 8006336:	4618      	mov	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <_kill>:

int _kill(int pid, int sig)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800634a:	f001 f833 	bl	80073b4 <__errno>
 800634e:	4602      	mov	r2, r0
 8006350:	2316      	movs	r3, #22
 8006352:	6013      	str	r3, [r2, #0]
	return -1;
 8006354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <_exit>:

void _exit (int status)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff ffe7 	bl	8006340 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006372:	e7fe      	b.n	8006372 <_exit+0x12>

08006374 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <_sbrk+0x50>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <_sbrk+0x16>
		heap_end = &end;
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <_sbrk+0x50>)
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <_sbrk+0x54>)
 8006388:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <_sbrk+0x50>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <_sbrk+0x50>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4413      	add	r3, r2
 8006398:	466a      	mov	r2, sp
 800639a:	4293      	cmp	r3, r2
 800639c:	d907      	bls.n	80063ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800639e:	f001 f809 	bl	80073b4 <__errno>
 80063a2:	4602      	mov	r2, r0
 80063a4:	230c      	movs	r3, #12
 80063a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ac:	e006      	b.n	80063bc <_sbrk+0x48>
	}

	heap_end += incr;
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <_sbrk+0x50>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4413      	add	r3, r2
 80063b6:	4a03      	ldr	r2, [pc, #12]	; (80063c4 <_sbrk+0x50>)
 80063b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20001268 	.word	0x20001268
 80063c8:	20001828 	.word	0x20001828

080063cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063d0:	4b16      	ldr	r3, [pc, #88]	; (800642c <SystemInit+0x60>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	4a15      	ldr	r2, [pc, #84]	; (800642c <SystemInit+0x60>)
 80063d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <SystemInit+0x64>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a12      	ldr	r2, [pc, #72]	; (8006430 <SystemInit+0x64>)
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80063ec:	4b10      	ldr	r3, [pc, #64]	; (8006430 <SystemInit+0x64>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80063f2:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <SystemInit+0x64>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a0e      	ldr	r2, [pc, #56]	; (8006430 <SystemInit+0x64>)
 80063f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006400:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <SystemInit+0x64>)
 8006404:	4a0b      	ldr	r2, [pc, #44]	; (8006434 <SystemInit+0x68>)
 8006406:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006408:	4b09      	ldr	r3, [pc, #36]	; (8006430 <SystemInit+0x64>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a08      	ldr	r2, [pc, #32]	; (8006430 <SystemInit+0x64>)
 800640e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006412:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006414:	4b06      	ldr	r3, [pc, #24]	; (8006430 <SystemInit+0x64>)
 8006416:	2200      	movs	r2, #0
 8006418:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800641a:	4b04      	ldr	r3, [pc, #16]	; (800642c <SystemInit+0x60>)
 800641c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006420:	609a      	str	r2, [r3, #8]
#endif
}
 8006422:	bf00      	nop
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000ed00 	.word	0xe000ed00
 8006430:	40023800 	.word	0x40023800
 8006434:	24003010 	.word	0x24003010

08006438 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b092      	sub	sp, #72	; 0x48
 800643c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800643e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	611a      	str	r2, [r3, #16]
 8006458:	615a      	str	r2, [r3, #20]
 800645a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	2220      	movs	r2, #32
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f000 ffdb 	bl	800741e <memset>

  htim1.Instance = TIM1;
 8006468:	4b44      	ldr	r3, [pc, #272]	; (800657c <MX_TIM1_Init+0x144>)
 800646a:	4a45      	ldr	r2, [pc, #276]	; (8006580 <MX_TIM1_Init+0x148>)
 800646c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800646e:	4b43      	ldr	r3, [pc, #268]	; (800657c <MX_TIM1_Init+0x144>)
 8006470:	2200      	movs	r2, #0
 8006472:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006474:	4b41      	ldr	r3, [pc, #260]	; (800657c <MX_TIM1_Init+0x144>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800647a:	4b40      	ldr	r3, [pc, #256]	; (800657c <MX_TIM1_Init+0x144>)
 800647c:	2200      	movs	r2, #0
 800647e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006480:	4b3e      	ldr	r3, [pc, #248]	; (800657c <MX_TIM1_Init+0x144>)
 8006482:	2200      	movs	r2, #0
 8006484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006486:	4b3d      	ldr	r3, [pc, #244]	; (800657c <MX_TIM1_Init+0x144>)
 8006488:	2200      	movs	r2, #0
 800648a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800648c:	4b3b      	ldr	r3, [pc, #236]	; (800657c <MX_TIM1_Init+0x144>)
 800648e:	2200      	movs	r2, #0
 8006490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006492:	483a      	ldr	r0, [pc, #232]	; (800657c <MX_TIM1_Init+0x144>)
 8006494:	f7fb ffb3 	bl	80023fe <HAL_TIM_PWM_Init>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800649e:	f7fe ffed 	bl	800547c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064a2:	2300      	movs	r3, #0
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80064aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064ae:	4619      	mov	r1, r3
 80064b0:	4832      	ldr	r0, [pc, #200]	; (800657c <MX_TIM1_Init+0x144>)
 80064b2:	f7fc fe03 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80064bc:	f7fe ffde 	bl	800547c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064c0:	2360      	movs	r3, #96	; 0x60
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064c8:	2300      	movs	r3, #0
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064cc:	2300      	movs	r3, #0
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064d4:	2300      	movs	r3, #0
 80064d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e0:	2200      	movs	r2, #0
 80064e2:	4619      	mov	r1, r3
 80064e4:	4825      	ldr	r0, [pc, #148]	; (800657c <MX_TIM1_Init+0x144>)
 80064e6:	f7fc f94f 	bl	8002788 <HAL_TIM_PWM_ConfigChannel>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80064f0:	f7fe ffc4 	bl	800547c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f8:	2204      	movs	r2, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	481f      	ldr	r0, [pc, #124]	; (800657c <MX_TIM1_Init+0x144>)
 80064fe:	f7fc f943 	bl	8002788 <HAL_TIM_PWM_ConfigChannel>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8006508:	f7fe ffb8 	bl	800547c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800650c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006510:	2208      	movs	r2, #8
 8006512:	4619      	mov	r1, r3
 8006514:	4819      	ldr	r0, [pc, #100]	; (800657c <MX_TIM1_Init+0x144>)
 8006516:	f7fc f937 	bl	8002788 <HAL_TIM_PWM_ConfigChannel>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8006520:	f7fe ffac 	bl	800547c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006528:	220c      	movs	r2, #12
 800652a:	4619      	mov	r1, r3
 800652c:	4813      	ldr	r0, [pc, #76]	; (800657c <MX_TIM1_Init+0x144>)
 800652e:	f7fc f92b 	bl	8002788 <HAL_TIM_PWM_ConfigChannel>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8006538:	f7fe ffa0 	bl	800547c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800653c:	2300      	movs	r3, #0
 800653e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006540:	2300      	movs	r3, #0
 8006542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006556:	2300      	movs	r3, #0
 8006558:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <MX_TIM1_Init+0x144>)
 8006560:	f7fc fdf1 	bl	8003146 <HAL_TIMEx_ConfigBreakDeadTime>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800656a:	f7fe ff87 	bl	800547c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800656e:	4803      	ldr	r0, [pc, #12]	; (800657c <MX_TIM1_Init+0x144>)
 8006570:	f000 fae2 	bl	8006b38 <HAL_TIM_MspPostInit>

}
 8006574:	bf00      	nop
 8006576:	3748      	adds	r7, #72	; 0x48
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	200013a0 	.word	0x200013a0
 8006580:	40010000 	.word	0x40010000

08006584 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800658a:	f107 0308 	add.w	r3, r7, #8
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	605a      	str	r2, [r3, #4]
 8006594:	609a      	str	r2, [r3, #8]
 8006596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006598:	463b      	mov	r3, r7
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <MX_TIM2_Init+0x98>)
 80065a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80065a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 80065a8:	4b1c      	ldr	r3, [pc, #112]	; (800661c <MX_TIM2_Init+0x98>)
 80065aa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80065ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <MX_TIM2_Init+0x98>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80065b6:	4b19      	ldr	r3, [pc, #100]	; (800661c <MX_TIM2_Init+0x98>)
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <MX_TIM2_Init+0x98>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <MX_TIM2_Init+0x98>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80065ca:	4814      	ldr	r0, [pc, #80]	; (800661c <MX_TIM2_Init+0x98>)
 80065cc:	f7fb fec8 	bl	8002360 <HAL_TIM_Base_Init>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80065d6:	f7fe ff51 	bl	800547c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80065e0:	f107 0308 	add.w	r3, r7, #8
 80065e4:	4619      	mov	r1, r3
 80065e6:	480d      	ldr	r0, [pc, #52]	; (800661c <MX_TIM2_Init+0x98>)
 80065e8:	f7fc f994 	bl	8002914 <HAL_TIM_ConfigClockSource>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80065f2:	f7fe ff43 	bl	800547c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065f6:	2300      	movs	r3, #0
 80065f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065fe:	463b      	mov	r3, r7
 8006600:	4619      	mov	r1, r3
 8006602:	4806      	ldr	r0, [pc, #24]	; (800661c <MX_TIM2_Init+0x98>)
 8006604:	f7fc fd5a 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800660e:	f7fe ff35 	bl	800547c <Error_Handler>
  }

}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200013e0 	.word	0x200013e0

08006620 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	; 0x30
 8006624:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8006626:	f107 030c 	add.w	r3, r7, #12
 800662a:	2224      	movs	r2, #36	; 0x24
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fef5 	bl	800741e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800663c:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <MX_TIM3_Init+0xa0>)
 800663e:	4a21      	ldr	r2, [pc, #132]	; (80066c4 <MX_TIM3_Init+0xa4>)
 8006640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006642:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <MX_TIM3_Init+0xa0>)
 8006644:	2200      	movs	r2, #0
 8006646:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <MX_TIM3_Init+0xa0>)
 800664a:	2200      	movs	r2, #0
 800664c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <MX_TIM3_Init+0xa0>)
 8006650:	2200      	movs	r2, #0
 8006652:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006654:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <MX_TIM3_Init+0xa0>)
 8006656:	2200      	movs	r2, #0
 8006658:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800665a:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <MX_TIM3_Init+0xa0>)
 800665c:	2200      	movs	r2, #0
 800665e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006660:	2301      	movs	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006674:	2300      	movs	r3, #0
 8006676:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006678:	2301      	movs	r3, #1
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800667c:	2300      	movs	r3, #0
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006684:	f107 030c 	add.w	r3, r7, #12
 8006688:	4619      	mov	r1, r3
 800668a:	480d      	ldr	r0, [pc, #52]	; (80066c0 <MX_TIM3_Init+0xa0>)
 800668c:	f7fb fee2 	bl	8002454 <HAL_TIM_Encoder_Init>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8006696:	f7fe fef1 	bl	800547c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800669a:	2300      	movs	r3, #0
 800669c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4806      	ldr	r0, [pc, #24]	; (80066c0 <MX_TIM3_Init+0xa0>)
 80066a8:	f7fc fd08 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80066b2:	f7fe fee3 	bl	800547c <Error_Handler>
  }

}
 80066b6:	bf00      	nop
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20001360 	.word	0x20001360
 80066c4:	40000400 	.word	0x40000400

080066c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	2224      	movs	r2, #36	; 0x24
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fea1 	bl	800741e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066dc:	1d3b      	adds	r3, r7, #4
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80066e4:	4b20      	ldr	r3, [pc, #128]	; (8006768 <MX_TIM4_Init+0xa0>)
 80066e6:	4a21      	ldr	r2, [pc, #132]	; (800676c <MX_TIM4_Init+0xa4>)
 80066e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <MX_TIM4_Init+0xa0>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <MX_TIM4_Init+0xa0>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <MX_TIM4_Init+0xa0>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <MX_TIM4_Init+0xa0>)
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <MX_TIM4_Init+0xa0>)
 8006704:	2200      	movs	r2, #0
 8006706:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006708:	2301      	movs	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006710:	2301      	movs	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006714:	2300      	movs	r3, #0
 8006716:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800671c:	2300      	movs	r3, #0
 800671e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006720:	2301      	movs	r3, #1
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006724:	2300      	movs	r3, #0
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800672c:	f107 030c 	add.w	r3, r7, #12
 8006730:	4619      	mov	r1, r3
 8006732:	480d      	ldr	r0, [pc, #52]	; (8006768 <MX_TIM4_Init+0xa0>)
 8006734:	f7fb fe8e 	bl	8002454 <HAL_TIM_Encoder_Init>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800673e:	f7fe fe9d 	bl	800547c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4806      	ldr	r0, [pc, #24]	; (8006768 <MX_TIM4_Init+0xa0>)
 8006750:	f7fc fcb4 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800675a:	f7fe fe8f 	bl	800547c <Error_Handler>
  }

}
 800675e:	bf00      	nop
 8006760:	3730      	adds	r7, #48	; 0x30
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	200012e0 	.word	0x200012e0
 800676c:	40000800 	.word	0x40000800

08006770 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08c      	sub	sp, #48	; 0x30
 8006774:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	2224      	movs	r2, #36	; 0x24
 800677c:	2100      	movs	r1, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fe4d 	bl	800741e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006784:	1d3b      	adds	r3, r7, #4
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800678c:	4b20      	ldr	r3, [pc, #128]	; (8006810 <MX_TIM5_Init+0xa0>)
 800678e:	4a21      	ldr	r2, [pc, #132]	; (8006814 <MX_TIM5_Init+0xa4>)
 8006790:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006792:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <MX_TIM5_Init+0xa0>)
 8006794:	2200      	movs	r2, #0
 8006796:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <MX_TIM5_Init+0xa0>)
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800679e:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <MX_TIM5_Init+0xa0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067a4:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <MX_TIM5_Init+0xa0>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067aa:	4b19      	ldr	r3, [pc, #100]	; (8006810 <MX_TIM5_Init+0xa0>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80067b0:	2301      	movs	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80067b8:	2301      	movs	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80067c4:	2300      	movs	r3, #0
 80067c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80067c8:	2301      	movs	r3, #1
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80067d4:	f107 030c 	add.w	r3, r7, #12
 80067d8:	4619      	mov	r1, r3
 80067da:	480d      	ldr	r0, [pc, #52]	; (8006810 <MX_TIM5_Init+0xa0>)
 80067dc:	f7fb fe3a 	bl	8002454 <HAL_TIM_Encoder_Init>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80067e6:	f7fe fe49 	bl	800547c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80067f2:	1d3b      	adds	r3, r7, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4806      	ldr	r0, [pc, #24]	; (8006810 <MX_TIM5_Init+0xa0>)
 80067f8:	f7fc fc60 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8006802:	f7fe fe3b 	bl	800547c <Error_Handler>
  }

}
 8006806:	bf00      	nop
 8006808:	3730      	adds	r7, #48	; 0x30
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20001320 	.word	0x20001320
 8006814:	40000c00 	.word	0x40000c00

08006818 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800681e:	f107 030c 	add.w	r3, r7, #12
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fdf9 	bl	800741e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800682c:	1d3b      	adds	r3, r7, #4
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <MX_TIM8_Init+0xa4>)
 8006836:	4a22      	ldr	r2, [pc, #136]	; (80068c0 <MX_TIM8_Init+0xa8>)
 8006838:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <MX_TIM8_Init+0xa4>)
 800683c:	2200      	movs	r2, #0
 800683e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006840:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <MX_TIM8_Init+0xa4>)
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <MX_TIM8_Init+0xa4>)
 8006848:	2200      	movs	r2, #0
 800684a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <MX_TIM8_Init+0xa4>)
 800684e:	2200      	movs	r2, #0
 8006850:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006852:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <MX_TIM8_Init+0xa4>)
 8006854:	2200      	movs	r2, #0
 8006856:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006858:	4b18      	ldr	r3, [pc, #96]	; (80068bc <MX_TIM8_Init+0xa4>)
 800685a:	2200      	movs	r2, #0
 800685c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800685e:	2301      	movs	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006862:	2300      	movs	r3, #0
 8006864:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006866:	2301      	movs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800686a:	2300      	movs	r3, #0
 800686c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006872:	2300      	movs	r3, #0
 8006874:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006876:	2301      	movs	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800687a:	2300      	movs	r3, #0
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006882:	f107 030c 	add.w	r3, r7, #12
 8006886:	4619      	mov	r1, r3
 8006888:	480c      	ldr	r0, [pc, #48]	; (80068bc <MX_TIM8_Init+0xa4>)
 800688a:	f7fb fde3 	bl	8002454 <HAL_TIM_Encoder_Init>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8006894:	f7fe fdf2 	bl	800547c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006898:	2300      	movs	r3, #0
 800689a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800689c:	2300      	movs	r3, #0
 800689e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4805      	ldr	r0, [pc, #20]	; (80068bc <MX_TIM8_Init+0xa4>)
 80068a6:	f7fc fc09 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80068b0:	f7fe fde4 	bl	800547c <Error_Handler>
  }

}
 80068b4:	bf00      	nop
 80068b6:	3730      	adds	r7, #48	; 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	200012a0 	.word	0x200012a0
 80068c0:	40010400 	.word	0x40010400

080068c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <HAL_TIM_PWM_MspInit+0x3c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10d      	bne.n	80068f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <HAL_TIM_PWM_MspInit+0x40>)
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <HAL_TIM_PWM_MspInit+0x40>)
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	6453      	str	r3, [r2, #68]	; 0x44
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <HAL_TIM_PWM_MspInit+0x40>)
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000
 8006904:	40023800 	.word	0x40023800

08006908 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d10d      	bne.n	8006936 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_TIM_Base_MspInit+0x3c>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	4a08      	ldr	r2, [pc, #32]	; (8006944 <HAL_TIM_Base_MspInit+0x3c>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	6413      	str	r3, [r2, #64]	; 0x40
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_TIM_Base_MspInit+0x3c>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40023800 	.word	0x40023800

08006948 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b090      	sub	sp, #64	; 0x40
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	609a      	str	r2, [r3, #8]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a6c      	ldr	r2, [pc, #432]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d134      	bne.n	80069d4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800696a:	2300      	movs	r3, #0
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
 800696e:	4b6b      	ldr	r3, [pc, #428]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	4a6a      	ldr	r2, [pc, #424]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	6413      	str	r3, [r2, #64]	; 0x40
 800697a:	4b68      	ldr	r3, [pc, #416]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	4b64      	ldr	r3, [pc, #400]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	4a63      	ldr	r2, [pc, #396]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006990:	f043 0302 	orr.w	r3, r3, #2
 8006994:	6313      	str	r3, [r2, #48]	; 0x30
 8006996:	4b61      	ldr	r3, [pc, #388]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = encoder2_ch1_Pin|encoder2_ch2_Pin;
 80069a2:	2330      	movs	r3, #48	; 0x30
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a6:	2302      	movs	r3, #2
 80069a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80069b2:	2302      	movs	r3, #2
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069ba:	4619      	mov	r1, r3
 80069bc:	4858      	ldr	r0, [pc, #352]	; (8006b20 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80069be:	f7fa fe15 	bl	80015ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	201d      	movs	r0, #29
 80069c8:	f7fa fa41 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80069cc:	201d      	movs	r0, #29
 80069ce:	f7fa fa5a 	bl	8000e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80069d2:	e09c      	b.n	8006b0e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a52      	ldr	r2, [pc, #328]	; (8006b24 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d134      	bne.n	8006a48 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80069de:	2300      	movs	r3, #0
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	4b4e      	ldr	r3, [pc, #312]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	4a4d      	ldr	r2, [pc, #308]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80069e8:	f043 0304 	orr.w	r3, r3, #4
 80069ec:	6413      	str	r3, [r2, #64]	; 0x40
 80069ee:	4b4b      	ldr	r3, [pc, #300]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069fa:	2300      	movs	r3, #0
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	4b47      	ldr	r3, [pc, #284]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	4a46      	ldr	r2, [pc, #280]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a04:	f043 0302 	orr.w	r3, r3, #2
 8006a08:	6313      	str	r3, [r2, #48]	; 0x30
 8006a0a:	4b44      	ldr	r3, [pc, #272]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = encoder3_ch1_Pin|encoder3_ch2_Pin;
 8006a16:	23c0      	movs	r3, #192	; 0xc0
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a22:	2300      	movs	r3, #0
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a26:	2302      	movs	r3, #2
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a2e:	4619      	mov	r1, r3
 8006a30:	483b      	ldr	r0, [pc, #236]	; (8006b20 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8006a32:	f7fa fddb 	bl	80015ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006a36:	2200      	movs	r2, #0
 8006a38:	2100      	movs	r1, #0
 8006a3a:	201e      	movs	r0, #30
 8006a3c:	f7fa fa07 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006a40:	201e      	movs	r0, #30
 8006a42:	f7fa fa20 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8006a46:	e062      	b.n	8006b0e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a36      	ldr	r2, [pc, #216]	; (8006b28 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d12c      	bne.n	8006aac <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a5c:	f043 0308 	orr.w	r3, r3, #8
 8006a60:	6413      	str	r3, [r2, #64]	; 0x40
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	61bb      	str	r3, [r7, #24]
 8006a6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	4a29      	ldr	r2, [pc, #164]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a7e:	4b27      	ldr	r3, [pc, #156]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = encoder0_ch1_Pin|encoder0_ch2_Pin;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4821      	ldr	r0, [pc, #132]	; (8006b2c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8006aa6:	f7fa fda1 	bl	80015ec <HAL_GPIO_Init>
}
 8006aaa:	e030      	b.n	8006b0e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM8)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12b      	bne.n	8006b0e <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	4a17      	ldr	r2, [pc, #92]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006ac0:	f043 0302 	orr.w	r3, r3, #2
 8006ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	4a10      	ldr	r2, [pc, #64]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006adc:	f043 0304 	orr.w	r3, r3, #4
 8006ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = encoder1_ch1_Pin|encoder1_ch2_Pin;
 8006aee:	23c0      	movs	r3, #192	; 0xc0
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af2:	2302      	movs	r3, #2
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006afe:	2303      	movs	r3, #3
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b06:	4619      	mov	r1, r3
 8006b08:	480a      	ldr	r0, [pc, #40]	; (8006b34 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8006b0a:	f7fa fd6f 	bl	80015ec <HAL_GPIO_Init>
}
 8006b0e:	bf00      	nop
 8006b10:	3740      	adds	r7, #64	; 0x40
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	40020400 	.word	0x40020400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40020000 	.word	0x40020000
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40020800 	.word	0x40020800

08006b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <HAL_TIM_MspPostInit+0x68>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d11e      	bne.n	8006b98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <HAL_TIM_MspPostInit+0x6c>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	4a10      	ldr	r2, [pc, #64]	; (8006ba4 <HAL_TIM_MspPostInit+0x6c>)
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <HAL_TIM_MspPostInit+0x6c>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	60bb      	str	r3, [r7, #8]
 8006b74:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8006b76:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006b7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4619      	mov	r1, r3
 8006b92:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <HAL_TIM_MspPostInit+0x70>)
 8006b94:	f7fa fd2a 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006b98:	bf00      	nop
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	40020000 	.word	0x40020000

08006bac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	0a5a      	lsrs	r2, r3, #9
 8006bbc:	490f      	ldr	r1, [pc, #60]	; (8006bfc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006bbe:	fba1 1202 	umull	r1, r2, r1, r2
 8006bc2:	09d2      	lsrs	r2, r2, #7
 8006bc4:	490e      	ldr	r1, [pc, #56]	; (8006c00 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006bc6:	fb01 f202 	mul.w	r2, r1, r2
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	0a5b      	lsrs	r3, r3, #9
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	09db      	lsrs	r3, r3, #7
 8006bdc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	601a      	str	r2, [r3, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	00044b83 	.word	0x00044b83
 8006c00:	3b9aca00 	.word	0x3b9aca00

08006c04 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <MX_UART4_Init+0x50>)
 8006c0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c10:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006c14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c2a:	220c      	movs	r2, #12
 8006c2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c2e:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006c3a:	4805      	ldr	r0, [pc, #20]	; (8006c50 <MX_UART4_Init+0x4c>)
 8006c3c:	f7fc fae9 	bl	8003212 <HAL_UART_Init>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8006c46:	f7fe fc19 	bl	800547c <Error_Handler>
  }

}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20001680 	.word	0x20001680
 8006c54:	40004c00 	.word	0x40004c00

08006c58 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8006c5c:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c5e:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <MX_UART5_Init+0x50>)
 8006c60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8006c62:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c64:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006c68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006c70:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c7e:	220c      	movs	r2, #12
 8006c80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c82:	4b08      	ldr	r3, [pc, #32]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006c8e:	4805      	ldr	r0, [pc, #20]	; (8006ca4 <MX_UART5_Init+0x4c>)
 8006c90:	f7fc fabf 	bl	8003212 <HAL_UART_Init>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006c9a:	f7fe fbef 	bl	800547c <Error_Handler>
  }

}
 8006c9e:	bf00      	nop
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200015e0 	.word	0x200015e0
 8006ca8:	40005000 	.word	0x40005000

08006cac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006cb0:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cb2:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <MX_USART2_UART_Init+0x50>)
 8006cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8006cb6:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cb8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006cd0:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cd2:	220c      	movs	r2, #12
 8006cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cd6:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ce2:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <MX_USART2_UART_Init+0x4c>)
 8006ce4:	f7fc fa95 	bl	8003212 <HAL_UART_Init>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006cee:	f7fe fbc5 	bl	800547c <Error_Handler>
  }

}
 8006cf2:	bf00      	nop
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200016c0 	.word	0x200016c0
 8006cfc:	40004400 	.word	0x40004400

08006d00 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006d04:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <MX_USART3_UART_Init+0x50>)
 8006d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d0c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006d24:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d26:	220c      	movs	r2, #12
 8006d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d2a:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006d36:	4805      	ldr	r0, [pc, #20]	; (8006d4c <MX_USART3_UART_Init+0x4c>)
 8006d38:	f7fc fa6b 	bl	8003212 <HAL_UART_Init>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006d42:	f7fe fb9b 	bl	800547c <Error_Handler>
  }

}
 8006d46:	bf00      	nop
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20001540 	.word	0x20001540
 8006d50:	40004800 	.word	0x40004800

08006d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b092      	sub	sp, #72	; 0x48
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	60da      	str	r2, [r3, #12]
 8006d6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a4b      	ldr	r2, [pc, #300]	; (8006ea0 <HAL_UART_MspInit+0x14c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f040 80a2 	bne.w	8006ebc <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7c:	4b49      	ldr	r3, [pc, #292]	; (8006ea4 <HAL_UART_MspInit+0x150>)
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	4a48      	ldr	r2, [pc, #288]	; (8006ea4 <HAL_UART_MspInit+0x150>)
 8006d82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d86:	6413      	str	r3, [r2, #64]	; 0x40
 8006d88:	4b46      	ldr	r3, [pc, #280]	; (8006ea4 <HAL_UART_MspInit+0x150>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d94:	2300      	movs	r3, #0
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d98:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <HAL_UART_MspInit+0x150>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	4a41      	ldr	r2, [pc, #260]	; (8006ea4 <HAL_UART_MspInit+0x150>)
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	6313      	str	r3, [r2, #48]	; 0x30
 8006da4:	4b3f      	ldr	r3, [pc, #252]	; (8006ea4 <HAL_UART_MspInit+0x150>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006db0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db6:	2302      	movs	r3, #2
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4836      	ldr	r0, [pc, #216]	; (8006ea8 <HAL_UART_MspInit+0x154>)
 8006dce:	f7fa fc0d 	bl	80015ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006dd2:	4b36      	ldr	r3, [pc, #216]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006dd4:	4a36      	ldr	r2, [pc, #216]	; (8006eb0 <HAL_UART_MspInit+0x15c>)
 8006dd6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006dd8:	4b34      	ldr	r3, [pc, #208]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006dde:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006de0:	4b32      	ldr	r3, [pc, #200]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006de6:	4b31      	ldr	r3, [pc, #196]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dec:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006df2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dfa:	4b2c      	ldr	r3, [pc, #176]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8006e00:	4b2a      	ldr	r3, [pc, #168]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e06:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e08:	4b28      	ldr	r3, [pc, #160]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e0e:	4b27      	ldr	r3, [pc, #156]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006e14:	4825      	ldr	r0, [pc, #148]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006e16:	f7fa f851 	bl	8000ebc <HAL_DMA_Init>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006e20:	f7fe fb2c 	bl	800547c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006e28:	635a      	str	r2, [r3, #52]	; 0x34
 8006e2a:	4a20      	ldr	r2, [pc, #128]	; (8006eac <HAL_UART_MspInit+0x158>)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006e30:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e32:	4a21      	ldr	r2, [pc, #132]	; (8006eb8 <HAL_UART_MspInit+0x164>)
 8006e34:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8006e36:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e3c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e40:	2240      	movs	r2, #64	; 0x40
 8006e42:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e50:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e58:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006e5e:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006e70:	4810      	ldr	r0, [pc, #64]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e72:	f7fa f823 	bl	8000ebc <HAL_DMA_Init>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8006e7c:	f7fe fafe 	bl	800547c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a0c      	ldr	r2, [pc, #48]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
 8006e86:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <HAL_UART_MspInit+0x160>)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	2034      	movs	r0, #52	; 0x34
 8006e92:	f7f9 ffdc 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006e96:	2034      	movs	r0, #52	; 0x34
 8006e98:	f7f9 fff5 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006e9c:	e232      	b.n	8007304 <HAL_UART_MspInit+0x5b0>
 8006e9e:	bf00      	nop
 8006ea0:	40004c00 	.word	0x40004c00
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40020800 	.word	0x40020800
 8006eac:	20001420 	.word	0x20001420
 8006eb0:	40026040 	.word	0x40026040
 8006eb4:	20001760 	.word	0x20001760
 8006eb8:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a5a      	ldr	r2, [pc, #360]	; (800702c <HAL_UART_MspInit+0x2d8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	f040 80c2 	bne.w	800704c <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006ec8:	2300      	movs	r3, #0
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ecc:	4b58      	ldr	r3, [pc, #352]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	4a57      	ldr	r2, [pc, #348]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed8:	4b55      	ldr	r3, [pc, #340]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	4b51      	ldr	r3, [pc, #324]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	4a50      	ldr	r2, [pc, #320]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006eee:	f043 0304 	orr.w	r3, r3, #4
 8006ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef4:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f00:	2300      	movs	r3, #0
 8006f02:	623b      	str	r3, [r7, #32]
 8006f04:	4b4a      	ldr	r3, [pc, #296]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	4a49      	ldr	r2, [pc, #292]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006f0a:	f043 0308 	orr.w	r3, r3, #8
 8006f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f10:	4b47      	ldr	r3, [pc, #284]	; (8007030 <HAL_UART_MspInit+0x2dc>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	623b      	str	r3, [r7, #32]
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f22:	2302      	movs	r3, #2
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f26:	2301      	movs	r3, #1
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f36:	4619      	mov	r1, r3
 8006f38:	483e      	ldr	r0, [pc, #248]	; (8007034 <HAL_UART_MspInit+0x2e0>)
 8006f3a:	f7fa fb57 	bl	80015ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f3e:	2304      	movs	r3, #4
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f42:	2302      	movs	r3, #2
 8006f44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f46:	2301      	movs	r3, #1
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006f4e:	2308      	movs	r3, #8
 8006f50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f56:	4619      	mov	r1, r3
 8006f58:	4837      	ldr	r0, [pc, #220]	; (8007038 <HAL_UART_MspInit+0x2e4>)
 8006f5a:	f7fa fb47 	bl	80015ec <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006f5e:	4b37      	ldr	r3, [pc, #220]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f60:	4a37      	ldr	r2, [pc, #220]	; (8007040 <HAL_UART_MspInit+0x2ec>)
 8006f62:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f6a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f6c:	4b33      	ldr	r3, [pc, #204]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f72:	4b32      	ldr	r3, [pc, #200]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f7e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f80:	4b2e      	ldr	r3, [pc, #184]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f86:	4b2d      	ldr	r3, [pc, #180]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f92:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f94:	4b29      	ldr	r3, [pc, #164]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f9a:	4b28      	ldr	r3, [pc, #160]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006fa0:	4826      	ldr	r0, [pc, #152]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006fa2:	f7f9 ff8b 	bl	8000ebc <HAL_DMA_Init>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8006fac:	f7fe fa66 	bl	800547c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a22      	ldr	r2, [pc, #136]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8006fb6:	4a21      	ldr	r2, [pc, #132]	; (800703c <HAL_UART_MspInit+0x2e8>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006fbc:	4b21      	ldr	r3, [pc, #132]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_UART_MspInit+0x2f4>)
 8006fc0:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006fc2:	4b20      	ldr	r3, [pc, #128]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fc8:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fca:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fcc:	2240      	movs	r2, #64	; 0x40
 8006fce:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fd0:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fdc:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fde:	4b19      	ldr	r3, [pc, #100]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fe4:	4b17      	ldr	r3, [pc, #92]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006ff0:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ff6:	4b13      	ldr	r3, [pc, #76]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006ffc:	4811      	ldr	r0, [pc, #68]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8006ffe:	f7f9 ff5d 	bl	8000ebc <HAL_DMA_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8007008:	f7fe fa38 	bl	800547c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
 8007012:	4a0c      	ldr	r2, [pc, #48]	; (8007044 <HAL_UART_MspInit+0x2f0>)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	2035      	movs	r0, #53	; 0x35
 800701e:	f7f9 ff16 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007022:	2035      	movs	r0, #53	; 0x35
 8007024:	f7f9 ff2f 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8007028:	e16c      	b.n	8007304 <HAL_UART_MspInit+0x5b0>
 800702a:	bf00      	nop
 800702c:	40005000 	.word	0x40005000
 8007030:	40023800 	.word	0x40023800
 8007034:	40020800 	.word	0x40020800
 8007038:	40020c00 	.word	0x40020c00
 800703c:	20001700 	.word	0x20001700
 8007040:	40026010 	.word	0x40026010
 8007044:	200017c0 	.word	0x200017c0
 8007048:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a4a      	ldr	r2, [pc, #296]	; (800717c <HAL_UART_MspInit+0x428>)
 8007052:	4293      	cmp	r3, r2
 8007054:	f040 80a0 	bne.w	8007198 <HAL_UART_MspInit+0x444>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	4b48      	ldr	r3, [pc, #288]	; (8007180 <HAL_UART_MspInit+0x42c>)
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	4a47      	ldr	r2, [pc, #284]	; (8007180 <HAL_UART_MspInit+0x42c>)
 8007062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007066:	6413      	str	r3, [r2, #64]	; 0x40
 8007068:	4b45      	ldr	r3, [pc, #276]	; (8007180 <HAL_UART_MspInit+0x42c>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007074:	2300      	movs	r3, #0
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	4b41      	ldr	r3, [pc, #260]	; (8007180 <HAL_UART_MspInit+0x42c>)
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	4a40      	ldr	r2, [pc, #256]	; (8007180 <HAL_UART_MspInit+0x42c>)
 800707e:	f043 0301 	orr.w	r3, r3, #1
 8007082:	6313      	str	r3, [r2, #48]	; 0x30
 8007084:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <HAL_UART_MspInit+0x42c>)
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007090:	230c      	movs	r3, #12
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007094:	2302      	movs	r3, #2
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007098:	2301      	movs	r3, #1
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800709c:	2303      	movs	r3, #3
 800709e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070a0:	2307      	movs	r3, #7
 80070a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070a8:	4619      	mov	r1, r3
 80070aa:	4836      	ldr	r0, [pc, #216]	; (8007184 <HAL_UART_MspInit+0x430>)
 80070ac:	f7fa fa9e 	bl	80015ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80070b0:	4b35      	ldr	r3, [pc, #212]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070b2:	4a36      	ldr	r2, [pc, #216]	; (800718c <HAL_UART_MspInit+0x438>)
 80070b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80070b6:	4b34      	ldr	r3, [pc, #208]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070be:	4b32      	ldr	r3, [pc, #200]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070ca:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070d2:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070d8:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070da:	2200      	movs	r2, #0
 80070dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80070de:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070e6:	4b28      	ldr	r3, [pc, #160]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070ec:	4b26      	ldr	r3, [pc, #152]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80070f2:	4825      	ldr	r0, [pc, #148]	; (8007188 <HAL_UART_MspInit+0x434>)
 80070f4:	f7f9 fee2 	bl	8000ebc <HAL_DMA_Init>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_UART_MspInit+0x3ae>
      Error_Handler();
 80070fe:	f7fe f9bd 	bl	800547c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a20      	ldr	r2, [pc, #128]	; (8007188 <HAL_UART_MspInit+0x434>)
 8007106:	635a      	str	r2, [r3, #52]	; 0x34
 8007108:	4a1f      	ldr	r2, [pc, #124]	; (8007188 <HAL_UART_MspInit+0x434>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800710e:	4b20      	ldr	r3, [pc, #128]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007110:	4a20      	ldr	r2, [pc, #128]	; (8007194 <HAL_UART_MspInit+0x440>)
 8007112:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800711a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800711c:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <HAL_UART_MspInit+0x43c>)
 800711e:	2240      	movs	r2, #64	; 0x40
 8007120:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007122:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007124:	2200      	movs	r2, #0
 8007126:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007128:	4b19      	ldr	r3, [pc, #100]	; (8007190 <HAL_UART_MspInit+0x43c>)
 800712a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800712e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007132:	2200      	movs	r2, #0
 8007134:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007136:	4b16      	ldr	r3, [pc, #88]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007138:	2200      	movs	r2, #0
 800713a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800713c:	4b14      	ldr	r3, [pc, #80]	; (8007190 <HAL_UART_MspInit+0x43c>)
 800713e:	2200      	movs	r2, #0
 8007140:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007142:	4b13      	ldr	r3, [pc, #76]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007144:	2200      	movs	r2, #0
 8007146:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_UART_MspInit+0x43c>)
 800714a:	2200      	movs	r2, #0
 800714c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800714e:	4810      	ldr	r0, [pc, #64]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007150:	f7f9 feb4 	bl	8000ebc <HAL_DMA_Init>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_UART_MspInit+0x40a>
      Error_Handler();
 800715a:	f7fe f98f 	bl	800547c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <HAL_UART_MspInit+0x43c>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	2026      	movs	r0, #38	; 0x26
 8007170:	f7f9 fe6d 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007174:	2026      	movs	r0, #38	; 0x26
 8007176:	f7f9 fe86 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 800717a:	e0c3      	b.n	8007304 <HAL_UART_MspInit+0x5b0>
 800717c:	40004400 	.word	0x40004400
 8007180:	40023800 	.word	0x40023800
 8007184:	40020000 	.word	0x40020000
 8007188:	20001480 	.word	0x20001480
 800718c:	40026088 	.word	0x40026088
 8007190:	20001620 	.word	0x20001620
 8007194:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5b      	ldr	r2, [pc, #364]	; (800730c <HAL_UART_MspInit+0x5b8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	f040 80b0 	bne.w	8007304 <HAL_UART_MspInit+0x5b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	4b59      	ldr	r3, [pc, #356]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	4a58      	ldr	r2, [pc, #352]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071b2:	6413      	str	r3, [r2, #64]	; 0x40
 80071b4:	4b56      	ldr	r3, [pc, #344]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	4b52      	ldr	r3, [pc, #328]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	4a51      	ldr	r2, [pc, #324]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071ca:	f043 0304 	orr.w	r3, r3, #4
 80071ce:	6313      	str	r3, [r2, #48]	; 0x30
 80071d0:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	4a4a      	ldr	r2, [pc, #296]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071e6:	f043 0302 	orr.w	r3, r3, #2
 80071ea:	6313      	str	r3, [r2, #48]	; 0x30
 80071ec:	4b48      	ldr	r3, [pc, #288]	; (8007310 <HAL_UART_MspInit+0x5bc>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80071f8:	2320      	movs	r3, #32
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fc:	2302      	movs	r3, #2
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007200:	2301      	movs	r3, #1
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007204:	2303      	movs	r3, #3
 8007206:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007208:	2307      	movs	r3, #7
 800720a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800720c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007210:	4619      	mov	r1, r3
 8007212:	4840      	ldr	r0, [pc, #256]	; (8007314 <HAL_UART_MspInit+0x5c0>)
 8007214:	f7fa f9ea 	bl	80015ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721e:	2302      	movs	r3, #2
 8007220:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007222:	2301      	movs	r3, #1
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007226:	2303      	movs	r3, #3
 8007228:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800722a:	2307      	movs	r3, #7
 800722c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800722e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007232:	4619      	mov	r1, r3
 8007234:	4838      	ldr	r0, [pc, #224]	; (8007318 <HAL_UART_MspInit+0x5c4>)
 8007236:	f7fa f9d9 	bl	80015ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800723a:	4b38      	ldr	r3, [pc, #224]	; (800731c <HAL_UART_MspInit+0x5c8>)
 800723c:	4a38      	ldr	r2, [pc, #224]	; (8007320 <HAL_UART_MspInit+0x5cc>)
 800723e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8007240:	4b36      	ldr	r3, [pc, #216]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007246:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007248:	4b34      	ldr	r3, [pc, #208]	; (800731c <HAL_UART_MspInit+0x5c8>)
 800724a:	2200      	movs	r2, #0
 800724c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800724e:	4b33      	ldr	r3, [pc, #204]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007250:	2200      	movs	r2, #0
 8007252:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007254:	4b31      	ldr	r3, [pc, #196]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800725a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800725c:	4b2f      	ldr	r3, [pc, #188]	; (800731c <HAL_UART_MspInit+0x5c8>)
 800725e:	2200      	movs	r2, #0
 8007260:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007264:	2200      	movs	r2, #0
 8007266:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8007268:	4b2c      	ldr	r3, [pc, #176]	; (800731c <HAL_UART_MspInit+0x5c8>)
 800726a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800726e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007270:	4b2a      	ldr	r3, [pc, #168]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007272:	2200      	movs	r2, #0
 8007274:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007278:	2200      	movs	r2, #0
 800727a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800727c:	4827      	ldr	r0, [pc, #156]	; (800731c <HAL_UART_MspInit+0x5c8>)
 800727e:	f7f9 fe1d 	bl	8000ebc <HAL_DMA_Init>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <HAL_UART_MspInit+0x538>
      Error_Handler();
 8007288:	f7fe f8f8 	bl	800547c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a23      	ldr	r2, [pc, #140]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007290:	635a      	str	r2, [r3, #52]	; 0x34
 8007292:	4a22      	ldr	r2, [pc, #136]	; (800731c <HAL_UART_MspInit+0x5c8>)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8007298:	4b22      	ldr	r3, [pc, #136]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 800729a:	4a23      	ldr	r2, [pc, #140]	; (8007328 <HAL_UART_MspInit+0x5d4>)
 800729c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800729e:	4b21      	ldr	r3, [pc, #132]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072a8:	2240      	movs	r2, #64	; 0x40
 80072aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072ac:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072b2:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072ba:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072bc:	2200      	movs	r2, #0
 80072be:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072c0:	4b18      	ldr	r3, [pc, #96]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80072c6:	4b17      	ldr	r3, [pc, #92]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80072cc:	4b15      	ldr	r3, [pc, #84]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072d2:	4b14      	ldr	r3, [pc, #80]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80072d8:	4812      	ldr	r0, [pc, #72]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072da:	f7f9 fdef 	bl	8000ebc <HAL_DMA_Init>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <HAL_UART_MspInit+0x594>
      Error_Handler();
 80072e4:	f7fe f8ca 	bl	800547c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a0e      	ldr	r2, [pc, #56]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
 80072ee:	4a0d      	ldr	r2, [pc, #52]	; (8007324 <HAL_UART_MspInit+0x5d0>)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80072f4:	2200      	movs	r2, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	2027      	movs	r0, #39	; 0x27
 80072fa:	f7f9 fda8 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80072fe:	2027      	movs	r0, #39	; 0x27
 8007300:	f7f9 fdc1 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8007304:	bf00      	nop
 8007306:	3748      	adds	r7, #72	; 0x48
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40004800 	.word	0x40004800
 8007310:	40023800 	.word	0x40023800
 8007314:	40020800 	.word	0x40020800
 8007318:	40020400 	.word	0x40020400
 800731c:	200014e0 	.word	0x200014e0
 8007320:	40026028 	.word	0x40026028
 8007324:	20001580 	.word	0x20001580
 8007328:	40026058 	.word	0x40026058

0800732c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800732c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007332:	e003      	b.n	800733c <LoopCopyDataInit>

08007334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800733a:	3104      	adds	r1, #4

0800733c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800733c:	480b      	ldr	r0, [pc, #44]	; (800736c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800733e:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007344:	d3f6      	bcc.n	8007334 <CopyDataInit>
  ldr  r2, =_sbss
 8007346:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007348:	e002      	b.n	8007350 <LoopFillZerobss>

0800734a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800734a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800734c:	f842 3b04 	str.w	r3, [r2], #4

08007350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007350:	4b09      	ldr	r3, [pc, #36]	; (8007378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007354:	d3f9      	bcc.n	800734a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007356:	f7ff f839 	bl	80063cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800735a:	f000 f831 	bl	80073c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800735e:	f7fd ffbb 	bl	80052d8 <main>
  bx  lr    
 8007362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007364:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8007368:	08007910 	.word	0x08007910
  ldr  r0, =_sdata
 800736c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007370:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8007374:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8007378:	20001824 	.word	0x20001824

0800737c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800737c:	e7fe      	b.n	800737c <ADC_IRQHandler>

0800737e <__cxa_pure_virtual>:
 800737e:	b508      	push	{r3, lr}
 8007380:	f000 f80c 	bl	800739c <_ZSt9terminatev>

08007384 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007384:	b508      	push	{r3, lr}
 8007386:	4780      	blx	r0
 8007388:	f000 f80d 	bl	80073a6 <abort>

0800738c <_ZSt13get_terminatev>:
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <_ZSt13get_terminatev+0xc>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	f3bf 8f5b 	dmb	ish
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20000068 	.word	0x20000068

0800739c <_ZSt9terminatev>:
 800739c:	b508      	push	{r3, lr}
 800739e:	f7ff fff5 	bl	800738c <_ZSt13get_terminatev>
 80073a2:	f7ff ffef 	bl	8007384 <_ZN10__cxxabiv111__terminateEPFvvE>

080073a6 <abort>:
 80073a6:	b508      	push	{r3, lr}
 80073a8:	2006      	movs	r0, #6
 80073aa:	f000 f871 	bl	8007490 <raise>
 80073ae:	2001      	movs	r0, #1
 80073b0:	f7fe ffd6 	bl	8006360 <_exit>

080073b4 <__errno>:
 80073b4:	4b01      	ldr	r3, [pc, #4]	; (80073bc <__errno+0x8>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	2000006c 	.word	0x2000006c

080073c0 <__libc_init_array>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4e0d      	ldr	r6, [pc, #52]	; (80073f8 <__libc_init_array+0x38>)
 80073c4:	4c0d      	ldr	r4, [pc, #52]	; (80073fc <__libc_init_array+0x3c>)
 80073c6:	1ba4      	subs	r4, r4, r6
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	2500      	movs	r5, #0
 80073cc:	42a5      	cmp	r5, r4
 80073ce:	d109      	bne.n	80073e4 <__libc_init_array+0x24>
 80073d0:	4e0b      	ldr	r6, [pc, #44]	; (8007400 <__libc_init_array+0x40>)
 80073d2:	4c0c      	ldr	r4, [pc, #48]	; (8007404 <__libc_init_array+0x44>)
 80073d4:	f000 f960 	bl	8007698 <_init>
 80073d8:	1ba4      	subs	r4, r4, r6
 80073da:	10a4      	asrs	r4, r4, #2
 80073dc:	2500      	movs	r5, #0
 80073de:	42a5      	cmp	r5, r4
 80073e0:	d105      	bne.n	80073ee <__libc_init_array+0x2e>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073e8:	4798      	blx	r3
 80073ea:	3501      	adds	r5, #1
 80073ec:	e7ee      	b.n	80073cc <__libc_init_array+0xc>
 80073ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f2:	4798      	blx	r3
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7f2      	b.n	80073de <__libc_init_array+0x1e>
 80073f8:	08007904 	.word	0x08007904
 80073fc:	08007904 	.word	0x08007904
 8007400:	08007904 	.word	0x08007904
 8007404:	0800790c 	.word	0x0800790c

08007408 <memcpy>:
 8007408:	b510      	push	{r4, lr}
 800740a:	1e43      	subs	r3, r0, #1
 800740c:	440a      	add	r2, r1
 800740e:	4291      	cmp	r1, r2
 8007410:	d100      	bne.n	8007414 <memcpy+0xc>
 8007412:	bd10      	pop	{r4, pc}
 8007414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741c:	e7f7      	b.n	800740e <memcpy+0x6>

0800741e <memset>:
 800741e:	4402      	add	r2, r0
 8007420:	4603      	mov	r3, r0
 8007422:	4293      	cmp	r3, r2
 8007424:	d100      	bne.n	8007428 <memset+0xa>
 8007426:	4770      	bx	lr
 8007428:	f803 1b01 	strb.w	r1, [r3], #1
 800742c:	e7f9      	b.n	8007422 <memset+0x4>
	...

08007430 <realloc>:
 8007430:	4b02      	ldr	r3, [pc, #8]	; (800743c <realloc+0xc>)
 8007432:	460a      	mov	r2, r1
 8007434:	4601      	mov	r1, r0
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	f000 b8a0 	b.w	800757c <_realloc_r>
 800743c:	2000006c 	.word	0x2000006c

08007440 <_raise_r>:
 8007440:	291f      	cmp	r1, #31
 8007442:	b538      	push	{r3, r4, r5, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	460d      	mov	r5, r1
 8007448:	d904      	bls.n	8007454 <_raise_r+0x14>
 800744a:	2316      	movs	r3, #22
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007456:	b112      	cbz	r2, 800745e <_raise_r+0x1e>
 8007458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800745c:	b94b      	cbnz	r3, 8007472 <_raise_r+0x32>
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f830 	bl	80074c4 <_getpid_r>
 8007464:	462a      	mov	r2, r5
 8007466:	4601      	mov	r1, r0
 8007468:	4620      	mov	r0, r4
 800746a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746e:	f000 b817 	b.w	80074a0 <_kill_r>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d00a      	beq.n	800748c <_raise_r+0x4c>
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	d103      	bne.n	8007482 <_raise_r+0x42>
 800747a:	2316      	movs	r3, #22
 800747c:	6003      	str	r3, [r0, #0]
 800747e:	2001      	movs	r0, #1
 8007480:	e7e7      	b.n	8007452 <_raise_r+0x12>
 8007482:	2400      	movs	r4, #0
 8007484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007488:	4628      	mov	r0, r5
 800748a:	4798      	blx	r3
 800748c:	2000      	movs	r0, #0
 800748e:	e7e0      	b.n	8007452 <_raise_r+0x12>

08007490 <raise>:
 8007490:	4b02      	ldr	r3, [pc, #8]	; (800749c <raise+0xc>)
 8007492:	4601      	mov	r1, r0
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f7ff bfd3 	b.w	8007440 <_raise_r>
 800749a:	bf00      	nop
 800749c:	2000006c 	.word	0x2000006c

080074a0 <_kill_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4c07      	ldr	r4, [pc, #28]	; (80074c0 <_kill_r+0x20>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	4605      	mov	r5, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	f7fe ff47 	bl	8006340 <_kill>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d102      	bne.n	80074bc <_kill_r+0x1c>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	b103      	cbz	r3, 80074bc <_kill_r+0x1c>
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	20001820 	.word	0x20001820

080074c4 <_getpid_r>:
 80074c4:	f7fe bf34 	b.w	8006330 <_getpid>

080074c8 <_malloc_r>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	1ccd      	adds	r5, r1, #3
 80074cc:	f025 0503 	bic.w	r5, r5, #3
 80074d0:	3508      	adds	r5, #8
 80074d2:	2d0c      	cmp	r5, #12
 80074d4:	bf38      	it	cc
 80074d6:	250c      	movcc	r5, #12
 80074d8:	2d00      	cmp	r5, #0
 80074da:	4606      	mov	r6, r0
 80074dc:	db01      	blt.n	80074e2 <_malloc_r+0x1a>
 80074de:	42a9      	cmp	r1, r5
 80074e0:	d903      	bls.n	80074ea <_malloc_r+0x22>
 80074e2:	230c      	movs	r3, #12
 80074e4:	6033      	str	r3, [r6, #0]
 80074e6:	2000      	movs	r0, #0
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	f000 f87d 	bl	80075e8 <__malloc_lock>
 80074ee:	4a21      	ldr	r2, [pc, #132]	; (8007574 <_malloc_r+0xac>)
 80074f0:	6814      	ldr	r4, [r2, #0]
 80074f2:	4621      	mov	r1, r4
 80074f4:	b991      	cbnz	r1, 800751c <_malloc_r+0x54>
 80074f6:	4c20      	ldr	r4, [pc, #128]	; (8007578 <_malloc_r+0xb0>)
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	b91b      	cbnz	r3, 8007504 <_malloc_r+0x3c>
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 f863 	bl	80075c8 <_sbrk_r>
 8007502:	6020      	str	r0, [r4, #0]
 8007504:	4629      	mov	r1, r5
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f85e 	bl	80075c8 <_sbrk_r>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d124      	bne.n	800755a <_malloc_r+0x92>
 8007510:	230c      	movs	r3, #12
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f868 	bl	80075ea <__malloc_unlock>
 800751a:	e7e4      	b.n	80074e6 <_malloc_r+0x1e>
 800751c:	680b      	ldr	r3, [r1, #0]
 800751e:	1b5b      	subs	r3, r3, r5
 8007520:	d418      	bmi.n	8007554 <_malloc_r+0x8c>
 8007522:	2b0b      	cmp	r3, #11
 8007524:	d90f      	bls.n	8007546 <_malloc_r+0x7e>
 8007526:	600b      	str	r3, [r1, #0]
 8007528:	50cd      	str	r5, [r1, r3]
 800752a:	18cc      	adds	r4, r1, r3
 800752c:	4630      	mov	r0, r6
 800752e:	f000 f85c 	bl	80075ea <__malloc_unlock>
 8007532:	f104 000b 	add.w	r0, r4, #11
 8007536:	1d23      	adds	r3, r4, #4
 8007538:	f020 0007 	bic.w	r0, r0, #7
 800753c:	1ac3      	subs	r3, r0, r3
 800753e:	d0d3      	beq.n	80074e8 <_malloc_r+0x20>
 8007540:	425a      	negs	r2, r3
 8007542:	50e2      	str	r2, [r4, r3]
 8007544:	e7d0      	b.n	80074e8 <_malloc_r+0x20>
 8007546:	428c      	cmp	r4, r1
 8007548:	684b      	ldr	r3, [r1, #4]
 800754a:	bf16      	itet	ne
 800754c:	6063      	strne	r3, [r4, #4]
 800754e:	6013      	streq	r3, [r2, #0]
 8007550:	460c      	movne	r4, r1
 8007552:	e7eb      	b.n	800752c <_malloc_r+0x64>
 8007554:	460c      	mov	r4, r1
 8007556:	6849      	ldr	r1, [r1, #4]
 8007558:	e7cc      	b.n	80074f4 <_malloc_r+0x2c>
 800755a:	1cc4      	adds	r4, r0, #3
 800755c:	f024 0403 	bic.w	r4, r4, #3
 8007560:	42a0      	cmp	r0, r4
 8007562:	d005      	beq.n	8007570 <_malloc_r+0xa8>
 8007564:	1a21      	subs	r1, r4, r0
 8007566:	4630      	mov	r0, r6
 8007568:	f000 f82e 	bl	80075c8 <_sbrk_r>
 800756c:	3001      	adds	r0, #1
 800756e:	d0cf      	beq.n	8007510 <_malloc_r+0x48>
 8007570:	6025      	str	r5, [r4, #0]
 8007572:	e7db      	b.n	800752c <_malloc_r+0x64>
 8007574:	2000126c 	.word	0x2000126c
 8007578:	20001270 	.word	0x20001270

0800757c <_realloc_r>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	4607      	mov	r7, r0
 8007580:	4614      	mov	r4, r2
 8007582:	460e      	mov	r6, r1
 8007584:	b921      	cbnz	r1, 8007590 <_realloc_r+0x14>
 8007586:	4611      	mov	r1, r2
 8007588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800758c:	f7ff bf9c 	b.w	80074c8 <_malloc_r>
 8007590:	b922      	cbnz	r2, 800759c <_realloc_r+0x20>
 8007592:	f000 f82b 	bl	80075ec <_free_r>
 8007596:	4625      	mov	r5, r4
 8007598:	4628      	mov	r0, r5
 800759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759c:	f000 f874 	bl	8007688 <_malloc_usable_size_r>
 80075a0:	42a0      	cmp	r0, r4
 80075a2:	d20f      	bcs.n	80075c4 <_realloc_r+0x48>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4638      	mov	r0, r7
 80075a8:	f7ff ff8e 	bl	80074c8 <_malloc_r>
 80075ac:	4605      	mov	r5, r0
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d0f2      	beq.n	8007598 <_realloc_r+0x1c>
 80075b2:	4631      	mov	r1, r6
 80075b4:	4622      	mov	r2, r4
 80075b6:	f7ff ff27 	bl	8007408 <memcpy>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4638      	mov	r0, r7
 80075be:	f000 f815 	bl	80075ec <_free_r>
 80075c2:	e7e9      	b.n	8007598 <_realloc_r+0x1c>
 80075c4:	4635      	mov	r5, r6
 80075c6:	e7e7      	b.n	8007598 <_realloc_r+0x1c>

080075c8 <_sbrk_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4c06      	ldr	r4, [pc, #24]	; (80075e4 <_sbrk_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4605      	mov	r5, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	f7fe fece 	bl	8006374 <_sbrk>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_sbrk_r+0x1a>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_sbrk_r+0x1a>
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20001820 	.word	0x20001820

080075e8 <__malloc_lock>:
 80075e8:	4770      	bx	lr

080075ea <__malloc_unlock>:
 80075ea:	4770      	bx	lr

080075ec <_free_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4605      	mov	r5, r0
 80075f0:	2900      	cmp	r1, #0
 80075f2:	d045      	beq.n	8007680 <_free_r+0x94>
 80075f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f8:	1f0c      	subs	r4, r1, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bfb8      	it	lt
 80075fe:	18e4      	addlt	r4, r4, r3
 8007600:	f7ff fff2 	bl	80075e8 <__malloc_lock>
 8007604:	4a1f      	ldr	r2, [pc, #124]	; (8007684 <_free_r+0x98>)
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	4610      	mov	r0, r2
 800760a:	b933      	cbnz	r3, 800761a <_free_r+0x2e>
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	6014      	str	r4, [r2, #0]
 8007610:	4628      	mov	r0, r5
 8007612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007616:	f7ff bfe8 	b.w	80075ea <__malloc_unlock>
 800761a:	42a3      	cmp	r3, r4
 800761c:	d90c      	bls.n	8007638 <_free_r+0x4c>
 800761e:	6821      	ldr	r1, [r4, #0]
 8007620:	1862      	adds	r2, r4, r1
 8007622:	4293      	cmp	r3, r2
 8007624:	bf04      	itt	eq
 8007626:	681a      	ldreq	r2, [r3, #0]
 8007628:	685b      	ldreq	r3, [r3, #4]
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	bf04      	itt	eq
 800762e:	1852      	addeq	r2, r2, r1
 8007630:	6022      	streq	r2, [r4, #0]
 8007632:	6004      	str	r4, [r0, #0]
 8007634:	e7ec      	b.n	8007610 <_free_r+0x24>
 8007636:	4613      	mov	r3, r2
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	b10a      	cbz	r2, 8007640 <_free_r+0x54>
 800763c:	42a2      	cmp	r2, r4
 800763e:	d9fa      	bls.n	8007636 <_free_r+0x4a>
 8007640:	6819      	ldr	r1, [r3, #0]
 8007642:	1858      	adds	r0, r3, r1
 8007644:	42a0      	cmp	r0, r4
 8007646:	d10b      	bne.n	8007660 <_free_r+0x74>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	4401      	add	r1, r0
 800764c:	1858      	adds	r0, r3, r1
 800764e:	4282      	cmp	r2, r0
 8007650:	6019      	str	r1, [r3, #0]
 8007652:	d1dd      	bne.n	8007610 <_free_r+0x24>
 8007654:	6810      	ldr	r0, [r2, #0]
 8007656:	6852      	ldr	r2, [r2, #4]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	4401      	add	r1, r0
 800765c:	6019      	str	r1, [r3, #0]
 800765e:	e7d7      	b.n	8007610 <_free_r+0x24>
 8007660:	d902      	bls.n	8007668 <_free_r+0x7c>
 8007662:	230c      	movs	r3, #12
 8007664:	602b      	str	r3, [r5, #0]
 8007666:	e7d3      	b.n	8007610 <_free_r+0x24>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	1821      	adds	r1, r4, r0
 800766c:	428a      	cmp	r2, r1
 800766e:	bf04      	itt	eq
 8007670:	6811      	ldreq	r1, [r2, #0]
 8007672:	6852      	ldreq	r2, [r2, #4]
 8007674:	6062      	str	r2, [r4, #4]
 8007676:	bf04      	itt	eq
 8007678:	1809      	addeq	r1, r1, r0
 800767a:	6021      	streq	r1, [r4, #0]
 800767c:	605c      	str	r4, [r3, #4]
 800767e:	e7c7      	b.n	8007610 <_free_r+0x24>
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	bf00      	nop
 8007684:	2000126c 	.word	0x2000126c

08007688 <_malloc_usable_size_r>:
 8007688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768c:	1f18      	subs	r0, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfbc      	itt	lt
 8007692:	580b      	ldrlt	r3, [r1, r0]
 8007694:	18c0      	addlt	r0, r0, r3
 8007696:	4770      	bx	lr

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
