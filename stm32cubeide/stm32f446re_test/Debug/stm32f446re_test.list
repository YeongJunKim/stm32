
stm32f446re_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004340  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004524  08004524  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800452c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  08004538  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004538  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e67a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a8  00000000  00000000  0002e6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c0c  00000000  00000000  000323d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b389  00000000  00000000  00053fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd40b  00000000  00000000  0005f36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  0012c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080044ec 	.word	0x080044ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080044ec 	.word	0x080044ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fc59 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f003 f902 	bl	8003740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fc71 	bl	8000e4e <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 fc39 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e0ed      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 ff06 	bl	8003418 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 0202 	bic.w	r2, r2, #2
 800061a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800061c:	f7ff ffd8 	bl	80005d0 <HAL_GetTick>
 8000620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000622:	e012      	b.n	800064a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000624:	f7ff ffd4 	bl	80005d0 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d90b      	bls.n	800064a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2205      	movs	r2, #5
 8000642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e0c5      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1e5      	bne.n	8000624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f042 0201 	orr.w	r2, r2, #1
 8000666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800066e:	e012      	b.n	8000696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000670:	f7ff ffae 	bl	80005d0 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b0a      	cmp	r3, #10
 800067c:	d90b      	bls.n	8000696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2205      	movs	r2, #5
 800068e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e09f      	b.n	80007d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0e5      	beq.n	8000670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7e1b      	ldrb	r3, [r3, #24]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e007      	b.n	80006ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7e5b      	ldrb	r3, [r3, #25]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d108      	bne.n	80006e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e007      	b.n	80006f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7e9b      	ldrb	r3, [r3, #26]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d108      	bne.n	8000712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0220 	orr.w	r2, r2, #32
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e007      	b.n	8000722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f022 0220 	bic.w	r2, r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7edb      	ldrb	r3, [r3, #27]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d108      	bne.n	800073c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0210 	bic.w	r2, r2, #16
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e007      	b.n	800074c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0210 	orr.w	r2, r2, #16
 800074a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7f1b      	ldrb	r3, [r3, #28]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0208 	orr.w	r2, r2, #8
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0208 	bic.w	r2, r2, #8
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7f5b      	ldrb	r3, [r3, #29]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0204 	orr.w	r2, r2, #4
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0204 	bic.w	r2, r2, #4
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	ea42 0103 	orr.w	r1, r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b08a      	sub	sp, #40	; 0x28
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d07c      	beq.n	800091e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d023      	beq.n	8000876 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2201      	movs	r2, #1
 8000834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f97d 	bl	8000b40 <HAL_CAN_TxMailbox0CompleteCallback>
 8000846:	e016      	b.n	8000876 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
 800085a:	e00c      	b.n	8000876 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	2b00      	cmp	r3, #0
 8000864:	d004      	beq.n	8000870 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
 800086e:	e002      	b.n	8000876 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f983 	bl	8000b7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800087c:	2b00      	cmp	r3, #0
 800087e:	d024      	beq.n	80008ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f95d 	bl	8000b54 <HAL_CAN_TxMailbox1CompleteCallback>
 800089a:	e016      	b.n	80008ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	e00c      	b.n	80008ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	e002      	b.n	80008ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f963 	bl	8000b90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d024      	beq.n	800091e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f93d 	bl	8000b68 <HAL_CAN_TxMailbox2CompleteCallback>
 80008ee:	e016      	b.n	800091e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d004      	beq.n	8000904 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
 8000902:	e00c      	b.n	800091e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	e002      	b.n	800091e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f943 	bl	8000ba4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00c      	beq.n	8000942 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	2b00      	cmp	r3, #0
 8000930:	d007      	beq.n	8000942 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2210      	movs	r2, #16
 8000940:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00b      	beq.n	8000964 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	2b00      	cmp	r3, #0
 8000954:	d006      	beq.n	8000964 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2208      	movs	r2, #8
 800095c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f934 	bl	8000bcc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	2b00      	cmp	r3, #0
 800096c:	d009      	beq.n	8000982 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f91b 	bl	8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00c      	beq.n	80009a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2210      	movs	r2, #16
 80009a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00b      	beq.n	80009c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d006      	beq.n	80009c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2208      	movs	r2, #8
 80009c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f916 	bl	8000bf4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d009      	beq.n	80009e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f8fd 	bl	8000be0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00b      	beq.n	8000a08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d006      	beq.n	8000a08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2210      	movs	r2, #16
 8000a00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f900 	bl	8000c08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00b      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2208      	movs	r2, #8
 8000a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f8f9 	bl	8000c1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d075      	beq.n	8000b20 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d06c      	beq.n	8000b18 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d008      	beq.n	8000a5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d008      	beq.n	8000a92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d03d      	beq.n	8000b18 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d038      	beq.n	8000b18 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000aac:	2b30      	cmp	r3, #48	; 0x30
 8000aae:	d017      	beq.n	8000ae0 <HAL_CAN_IRQHandler+0x302>
 8000ab0:	2b30      	cmp	r3, #48	; 0x30
 8000ab2:	d804      	bhi.n	8000abe <HAL_CAN_IRQHandler+0x2e0>
 8000ab4:	2b10      	cmp	r3, #16
 8000ab6:	d009      	beq.n	8000acc <HAL_CAN_IRQHandler+0x2ee>
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d00c      	beq.n	8000ad6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000abc:	e024      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000abe:	2b50      	cmp	r3, #80	; 0x50
 8000ac0:	d018      	beq.n	8000af4 <HAL_CAN_IRQHandler+0x316>
 8000ac2:	2b60      	cmp	r3, #96	; 0x60
 8000ac4:	d01b      	beq.n	8000afe <HAL_CAN_IRQHandler+0x320>
 8000ac6:	2b40      	cmp	r3, #64	; 0x40
 8000ac8:	d00f      	beq.n	8000aea <HAL_CAN_IRQHandler+0x30c>
            break;
 8000aca:	e01d      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	f043 0308 	orr.w	r3, r3, #8
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ad4:	e018      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ade:	e013      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	f043 0320 	orr.w	r3, r3, #32
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ae8:	e00e      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000af2:	e009      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000afc:	e004      	b.n	8000b08 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d008      	beq.n	8000b38 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 f87c 	bl	8000c30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff3e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff31 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffa2 	bl	8000da0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d004      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e00c      	b.n	8000e9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2205      	movs	r2, #5
 8000e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0201 	bic.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e165      	b.n	8001194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8154 	bne.w	800118e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x4a>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d123      	bne.n	8000f3e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	69b9      	ldr	r1, [r7, #24]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0203 	and.w	r2, r3, #3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d00b      	beq.n	8000f92 <HAL_GPIO_Init+0xe6>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f86:	2b11      	cmp	r3, #17
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80ae 	beq.w	800118e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a57      	ldr	r2, [pc, #348]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x21a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_GPIO_Init+0x308>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x216>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_GPIO_Init+0x30c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x212>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_GPIO_Init+0x310>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x20e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x314>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x20a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x318>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x206>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x31c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x202>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00a      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4934      	ldr	r1, [pc, #208]	; (80011ac <HAL_GPIO_Init+0x300>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_GPIO_Init+0x320>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110a:	4a30      	ldr	r2, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x320>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x320>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_GPIO_Init+0x320>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_GPIO_Init+0x320>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f ae96 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0ca      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_ClockConfig+0x1b4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d90c      	bls.n	8001240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0b6      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a57      	ldr	r2, [pc, #348]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800125e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001270:	4b52      	ldr	r3, [pc, #328]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800127a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	494c      	ldr	r1, [pc, #304]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d044      	beq.n	8001324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d119      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07d      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e06d      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e065      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f023 0203 	bic.w	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4933      	ldr	r1, [pc, #204]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff f96c 	bl	80005d0 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff f968 	bl	80005d0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e04d      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 020c 	and.w	r2, r3, #12
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	429a      	cmp	r2, r3
 8001322:	d1eb      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d20c      	bcs.n	800134c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_RCC_ClockConfig+0x1b4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e030      	b.n	80013ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4915      	ldr	r1, [pc, #84]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	490d      	ldr	r1, [pc, #52]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	4313      	orrs	r3, r2
 8001388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138a:	f000 f851 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 800138e:	4601      	mov	r1, r0
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	fa21 f303 	lsr.w	r3, r1, r3
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff f8ce 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00
 80013bc:	40023800 	.word	0x40023800
 80013c0:	08004504 	.word	0x08004504
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_RCC_GetHCLKFreq+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013e4:	f7ff fff0 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
 80013e8:	4601      	mov	r1, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0a9b      	lsrs	r3, r3, #10
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	08004514 	.word	0x08004514

08001408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800140c:	f7ff ffdc 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
 8001410:	4601      	mov	r1, r0
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	0b5b      	lsrs	r3, r3, #13
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	4a03      	ldr	r2, [pc, #12]	; (800142c <HAL_RCC_GetPCLK2Freq+0x24>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	08004514 	.word	0x08004514

08001430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800144a:	4bc6      	ldr	r3, [pc, #792]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b0c      	cmp	r3, #12
 8001454:	f200 817e 	bhi.w	8001754 <HAL_RCC_GetSysClockFreq+0x324>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <HAL_RCC_GetSysClockFreq+0x30>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001495 	.word	0x08001495
 8001464:	08001755 	.word	0x08001755
 8001468:	08001755 	.word	0x08001755
 800146c:	08001755 	.word	0x08001755
 8001470:	0800149b 	.word	0x0800149b
 8001474:	08001755 	.word	0x08001755
 8001478:	08001755 	.word	0x08001755
 800147c:	08001755 	.word	0x08001755
 8001480:	080014a1 	.word	0x080014a1
 8001484:	08001755 	.word	0x08001755
 8001488:	08001755 	.word	0x08001755
 800148c:	08001755 	.word	0x08001755
 8001490:	080015fd 	.word	0x080015fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4bb4      	ldr	r3, [pc, #720]	; (8001768 <HAL_RCC_GetSysClockFreq+0x338>)
 8001496:	613b      	str	r3, [r7, #16]
       break;
 8001498:	e15f      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800149a:	4bb3      	ldr	r3, [pc, #716]	; (8001768 <HAL_RCC_GetSysClockFreq+0x338>)
 800149c:	613b      	str	r3, [r7, #16]
      break;
 800149e:	e15c      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a0:	4bb0      	ldr	r3, [pc, #704]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014aa:	4bae      	ldr	r3, [pc, #696]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d04a      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b6:	4bab      	ldr	r3, [pc, #684]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	099b      	lsrs	r3, r3, #6
 80014bc:	f04f 0400 	mov.w	r4, #0
 80014c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	ea03 0501 	and.w	r5, r3, r1
 80014cc:	ea04 0602 	and.w	r6, r4, r2
 80014d0:	4629      	mov	r1, r5
 80014d2:	4632      	mov	r2, r6
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	f04f 0400 	mov.w	r4, #0
 80014dc:	0154      	lsls	r4, r2, #5
 80014de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014e2:	014b      	lsls	r3, r1, #5
 80014e4:	4619      	mov	r1, r3
 80014e6:	4622      	mov	r2, r4
 80014e8:	1b49      	subs	r1, r1, r5
 80014ea:	eb62 0206 	sbc.w	r2, r2, r6
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	0194      	lsls	r4, r2, #6
 80014f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014fc:	018b      	lsls	r3, r1, #6
 80014fe:	1a5b      	subs	r3, r3, r1
 8001500:	eb64 0402 	sbc.w	r4, r4, r2
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	00e2      	lsls	r2, r4, #3
 800150e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001512:	00d9      	lsls	r1, r3, #3
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	195b      	adds	r3, r3, r5
 800151a:	eb44 0406 	adc.w	r4, r4, r6
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	02a2      	lsls	r2, r4, #10
 8001528:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800152c:	0299      	lsls	r1, r3, #10
 800152e:	460b      	mov	r3, r1
 8001530:	4614      	mov	r4, r2
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f04f 0400 	mov.w	r4, #0
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	f7fe fe60 	bl	8000204 <__aeabi_uldivmod>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e049      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	4b85      	ldr	r3, [pc, #532]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	f240 11ff 	movw	r1, #511	; 0x1ff
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	ea03 0501 	and.w	r5, r3, r1
 8001562:	ea04 0602 	and.w	r6, r4, r2
 8001566:	4629      	mov	r1, r5
 8001568:	4632      	mov	r2, r6
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f04f 0400 	mov.w	r4, #0
 8001572:	0154      	lsls	r4, r2, #5
 8001574:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001578:	014b      	lsls	r3, r1, #5
 800157a:	4619      	mov	r1, r3
 800157c:	4622      	mov	r2, r4
 800157e:	1b49      	subs	r1, r1, r5
 8001580:	eb62 0206 	sbc.w	r2, r2, r6
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f04f 0400 	mov.w	r4, #0
 800158c:	0194      	lsls	r4, r2, #6
 800158e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	1a5b      	subs	r3, r3, r1
 8001596:	eb64 0402 	sbc.w	r4, r4, r2
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	00e2      	lsls	r2, r4, #3
 80015a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015a8:	00d9      	lsls	r1, r3, #3
 80015aa:	460b      	mov	r3, r1
 80015ac:	4614      	mov	r4, r2
 80015ae:	195b      	adds	r3, r3, r5
 80015b0:	eb44 0406 	adc.w	r4, r4, r6
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	02a2      	lsls	r2, r4, #10
 80015be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015c2:	0299      	lsls	r1, r3, #10
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f04f 0400 	mov.w	r4, #0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7fe fe15 	bl	8000204 <__aeabi_uldivmod>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	3301      	adds	r3, #1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f8:	613b      	str	r3, [r7, #16]
      break;
 80015fa:	e0ae      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001604:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001606:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d04a      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	099b      	lsrs	r3, r3, #6
 8001618:	f04f 0400 	mov.w	r4, #0
 800161c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	ea03 0501 	and.w	r5, r3, r1
 8001628:	ea04 0602 	and.w	r6, r4, r2
 800162c:	4629      	mov	r1, r5
 800162e:	4632      	mov	r2, r6
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f04f 0400 	mov.w	r4, #0
 8001638:	0154      	lsls	r4, r2, #5
 800163a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800163e:	014b      	lsls	r3, r1, #5
 8001640:	4619      	mov	r1, r3
 8001642:	4622      	mov	r2, r4
 8001644:	1b49      	subs	r1, r1, r5
 8001646:	eb62 0206 	sbc.w	r2, r2, r6
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	f04f 0400 	mov.w	r4, #0
 8001652:	0194      	lsls	r4, r2, #6
 8001654:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001658:	018b      	lsls	r3, r1, #6
 800165a:	1a5b      	subs	r3, r3, r1
 800165c:	eb64 0402 	sbc.w	r4, r4, r2
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	00e2      	lsls	r2, r4, #3
 800166a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800166e:	00d9      	lsls	r1, r3, #3
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	195b      	adds	r3, r3, r5
 8001676:	eb44 0406 	adc.w	r4, r4, r6
 800167a:	f04f 0100 	mov.w	r1, #0
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	02a2      	lsls	r2, r4, #10
 8001684:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001688:	0299      	lsls	r1, r3, #10
 800168a:	460b      	mov	r3, r1
 800168c:	4614      	mov	r4, r2
 800168e:	4618      	mov	r0, r3
 8001690:	4621      	mov	r1, r4
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f04f 0400 	mov.w	r4, #0
 8001698:	461a      	mov	r2, r3
 800169a:	4623      	mov	r3, r4
 800169c:	f7fe fdb2 	bl	8000204 <__aeabi_uldivmod>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e049      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	f04f 0400 	mov.w	r4, #0
 80016b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	ea03 0501 	and.w	r5, r3, r1
 80016be:	ea04 0602 	and.w	r6, r4, r2
 80016c2:	4629      	mov	r1, r5
 80016c4:	4632      	mov	r2, r6
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f04f 0400 	mov.w	r4, #0
 80016ce:	0154      	lsls	r4, r2, #5
 80016d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016d4:	014b      	lsls	r3, r1, #5
 80016d6:	4619      	mov	r1, r3
 80016d8:	4622      	mov	r2, r4
 80016da:	1b49      	subs	r1, r1, r5
 80016dc:	eb62 0206 	sbc.w	r2, r2, r6
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	f04f 0400 	mov.w	r4, #0
 80016e8:	0194      	lsls	r4, r2, #6
 80016ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016ee:	018b      	lsls	r3, r1, #6
 80016f0:	1a5b      	subs	r3, r3, r1
 80016f2:	eb64 0402 	sbc.w	r4, r4, r2
 80016f6:	f04f 0100 	mov.w	r1, #0
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	00e2      	lsls	r2, r4, #3
 8001700:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001704:	00d9      	lsls	r1, r3, #3
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	195b      	adds	r3, r3, r5
 800170c:	eb44 0406 	adc.w	r4, r4, r6
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	02a2      	lsls	r2, r4, #10
 800171a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800171e:	0299      	lsls	r1, r3, #10
 8001720:	460b      	mov	r3, r1
 8001722:	4614      	mov	r4, r2
 8001724:	4618      	mov	r0, r3
 8001726:	4621      	mov	r1, r4
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	461a      	mov	r2, r3
 8001730:	4623      	mov	r3, r4
 8001732:	f7fe fd67 	bl	8000204 <__aeabi_uldivmod>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_GetSysClockFreq+0x334>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0f1b      	lsrs	r3, r3, #28
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001750:	613b      	str	r3, [r7, #16]
      break;
 8001752:	e002      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_RCC_GetSysClockFreq+0x338>)
 8001756:	613b      	str	r3, [r7, #16]
      break;
 8001758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175a:	693b      	ldr	r3, [r7, #16]
}
 800175c:	4618      	mov	r0, r3
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	00f42400 	.word	0x00f42400

0800176c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8083 	beq.w	800188c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001786:	4b95      	ldr	r3, [pc, #596]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d019      	beq.n	80017c6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001792:	4b92      	ldr	r3, [pc, #584]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800179a:	2b08      	cmp	r3, #8
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800179e:	4b8f      	ldr	r3, [pc, #572]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017aa:	d00c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ac:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d112      	bne.n	80017de <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b8:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c4:	d10b      	bne.n	80017de <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c6:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d05b      	beq.n	800188a <HAL_RCC_OscConfig+0x11e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d157      	bne.n	800188a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e216      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x8a>
 80017e8:	4b7c      	ldr	r3, [pc, #496]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a7b      	ldr	r2, [pc, #492]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e01d      	b.n	8001832 <HAL_RCC_OscConfig+0xc6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0xae>
 8001800:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a75      	ldr	r2, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b73      	ldr	r3, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a72      	ldr	r2, [pc, #456]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e00b      	b.n	8001832 <HAL_RCC_OscConfig+0xc6>
 800181a:	4b70      	ldr	r3, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6f      	ldr	r2, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b6d      	ldr	r3, [pc, #436]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6c      	ldr	r2, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d013      	beq.n	8001862 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7fe fec9 	bl	80005d0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001842:	f7fe fec5 	bl	80005d0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b64      	cmp	r3, #100	; 0x64
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1db      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0xd6>
 8001860:	e014      	b.n	800188c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7fe feb5 	bl	80005d0 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186a:	f7fe feb1 	bl	80005d0 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1c7      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187c:	4b57      	ldr	r3, [pc, #348]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0xfe>
 8001888:	e000      	b.n	800188c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d06f      	beq.n	8001978 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d017      	beq.n	80018d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018bc:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d11c      	bne.n	8001902 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c8:	4b44      	ldr	r3, [pc, #272]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d116      	bne.n	8001902 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d4:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x180>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e18f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4938      	ldr	r1, [pc, #224]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001900:	e03a      	b.n	8001978 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d020      	beq.n	800194c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7fe fe5e 	bl	80005d0 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001918:	f7fe fe5a 	bl	80005d0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e170      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4925      	ldr	r1, [pc, #148]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
 800194a:	e015      	b.n	8001978 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7fe fe3d 	bl	80005d0 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7fe fe39 	bl	80005d0 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e14f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d037      	beq.n	80019f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d016      	beq.n	80019ba <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_RCC_OscConfig+0x278>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7fe fe1d 	bl	80005d0 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199a:	f7fe fe19 	bl	80005d0 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e12f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 80019ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x22e>
 80019b8:	e01c      	b.n	80019f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_OscConfig+0x278>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7fe fe06 	bl	80005d0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	e00f      	b.n	80019e8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7fe fe02 	bl	80005d0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d908      	bls.n	80019e8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e118      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	42470000 	.word	0x42470000
 80019e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e8:	4b8a      	ldr	r3, [pc, #552]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 80019ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1e9      	bne.n	80019c8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 8097 	beq.w	8001b30 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a06:	4b83      	ldr	r3, [pc, #524]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b7f      	ldr	r3, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b7c      	ldr	r3, [pc, #496]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a75      	ldr	r2, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe fdc1 	bl	80005d0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7fe fdbd 	bl	80005d0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0d3      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x4ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x31a>
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	e01c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x354>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x33c>
 8001a8e:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9a:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a5d      	ldr	r2, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x354>
 8001aa8:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a59      	ldr	r2, [pc, #356]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab4:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a56      	ldr	r2, [pc, #344]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001aba:	f023 0304 	bic.w	r3, r3, #4
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7fe fd82 	bl	80005d0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7fe fd7e 	bl	80005d0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e092      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ee      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x364>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7fe fd6c 	bl	80005d0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7fe fd68 	bl	80005d0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e07c      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ee      	bne.n	8001afc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d068      	beq.n	8001c0a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d060      	beq.n	8001c06 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d145      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <HAL_RCC_OscConfig+0x4b0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7fe fd3d 	bl	80005d0 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7fe fd39 	bl	80005d0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e04f      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	019b      	lsls	r3, r3, #6
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	3b01      	subs	r3, #1
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	071b      	lsls	r3, r3, #28
 8001ba4:	491b      	ldr	r1, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_RCC_OscConfig+0x4b0>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fd0e 	bl	80005d0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe fd0a 	bl	80005d0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e020      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x44c>
 8001bd6:	e018      	b.n	8001c0a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_RCC_OscConfig+0x4b0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7fe fcf7 	bl	80005d0 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fcf3 	bl	80005d0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e009      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_RCC_OscConfig+0x4a8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x47a>
 8001c04:	e001      	b.n	8001c0a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42470060 	.word	0x42470060

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e01d      	b.n	8001c6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f002 f8d8 	bl	8003dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 fb7e 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01d      	b.n	8001cc4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d106      	bne.n	8001ca2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f002 f87d 	bl	8003d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f000 fb53 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e083      	b.n	8001de8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f002 f8a1 	bl	8003e3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d10:	f023 0307 	bic.w	r3, r3, #7
 8001d14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4610      	mov	r0, r2
 8001d22:	f000 fb1d 	bl	8002360 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d6c:	f023 030c 	bic.w	r3, r3, #12
 8001d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	011a      	lsls	r2, r3, #4
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	031b      	lsls	r3, r3, #12
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001daa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001db2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0202 	mvn.w	r2, #2
 8001e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa75 	bl	8002322 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fa67 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fa78 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa4b 	bl	8002322 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fa3d 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa4e 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0208 	mvn.w	r2, #8
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa21 	bl	8002322 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fa13 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fa24 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f9f7 	bl	8002322 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f9e9 	bl	800230e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f9fa 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0201 	mvn.w	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9c3 	bl	80022fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fd6b 	bl	8002a76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9bf 	bl	800234a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0220 	mvn.w	r2, #32
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fd35 	bl	8002a62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e0b4      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x184>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	f200 809f 	bhi.w	8002170 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	0800206d 	.word	0x0800206d
 800203c:	08002171 	.word	0x08002171
 8002040:	08002171 	.word	0x08002171
 8002044:	08002171 	.word	0x08002171
 8002048:	080020ad 	.word	0x080020ad
 800204c:	08002171 	.word	0x08002171
 8002050:	08002171 	.word	0x08002171
 8002054:	08002171 	.word	0x08002171
 8002058:	080020ef 	.word	0x080020ef
 800205c:	08002171 	.word	0x08002171
 8002060:	08002171 	.word	0x08002171
 8002064:	08002171 	.word	0x08002171
 8002068:	0800212f 	.word	0x0800212f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fa14 	bl	80024a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0208 	orr.w	r2, r2, #8
 8002086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6999      	ldr	r1, [r3, #24]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	619a      	str	r2, [r3, #24]
      break;
 80020aa:	e062      	b.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fa64 	bl	8002580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	021a      	lsls	r2, r3, #8
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	619a      	str	r2, [r3, #24]
      break;
 80020ec:	e041      	b.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fab9 	bl	800266c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0208 	orr.w	r2, r2, #8
 8002108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0204 	bic.w	r2, r2, #4
 8002118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69d9      	ldr	r1, [r3, #28]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	61da      	str	r2, [r3, #28]
      break;
 800212c:	e021      	b.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fb0d 	bl	8002754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	021a      	lsls	r2, r3, #8
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	61da      	str	r2, [r3, #28]
      break;
 800216e:	e000      	b.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002170:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x18>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0a6      	b.n	80022f2 <HAL_TIM_ConfigClockSource+0x166>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d067      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0x120>
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d80b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x6c>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d073      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x140>
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d802      	bhi.n	80021ee <HAL_TIM_ConfigClockSource+0x62>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d06f      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80021ec:	e078      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d06c      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x140>
 80021f2:	2b30      	cmp	r3, #48	; 0x30
 80021f4:	d06a      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021f6:	e073      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d00d      	beq.n	8002218 <HAL_TIM_ConfigClockSource+0x8c>
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d804      	bhi.n	800220a <HAL_TIM_ConfigClockSource+0x7e>
 8002200:	2b50      	cmp	r3, #80	; 0x50
 8002202:	d033      	beq.n	800226c <HAL_TIM_ConfigClockSource+0xe0>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d041      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002208:	e06a      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d066      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x152>
 8002210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002214:	d017      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002216:	e063      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f000 fb64 	bl	80028f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800223a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]
      break;
 8002244:	e04c      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f000 fb4d 	bl	80028f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002268:	609a      	str	r2, [r3, #8]
      break;
 800226a:	e039      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	461a      	mov	r2, r3
 800227a:	f000 fac1 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2150      	movs	r1, #80	; 0x50
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fb1a 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800228a:	e029      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	461a      	mov	r2, r3
 800229a:	f000 fae0 	bl	800285e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2160      	movs	r1, #96	; 0x60
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb0a 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80022aa:	e019      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f000 faa1 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fafa 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80022ca:	e009      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f000 faf1 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80022dc:	e000      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80022de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a40      	ldr	r2, [pc, #256]	; (8002474 <TIM_Base_SetConfig+0x114>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d00f      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <TIM_Base_SetConfig+0x118>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00b      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3c      	ldr	r2, [pc, #240]	; (800247c <TIM_Base_SetConfig+0x11c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <TIM_Base_SetConfig+0x120>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <TIM_Base_SetConfig+0x124>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d108      	bne.n	80023b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <TIM_Base_SetConfig+0x114>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c0:	d027      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2c      	ldr	r2, [pc, #176]	; (8002478 <TIM_Base_SetConfig+0x118>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d023      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <TIM_Base_SetConfig+0x11c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01f      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2a      	ldr	r2, [pc, #168]	; (8002480 <TIM_Base_SetConfig+0x120>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01b      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <TIM_Base_SetConfig+0x124>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d017      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a28      	ldr	r2, [pc, #160]	; (8002488 <TIM_Base_SetConfig+0x128>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a27      	ldr	r2, [pc, #156]	; (800248c <TIM_Base_SetConfig+0x12c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00f      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <TIM_Base_SetConfig+0x130>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a25      	ldr	r2, [pc, #148]	; (8002494 <TIM_Base_SetConfig+0x134>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <TIM_Base_SetConfig+0x138>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <TIM_Base_SetConfig+0x13c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <TIM_Base_SetConfig+0x114>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <TIM_Base_SetConfig+0xf8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <TIM_Base_SetConfig+0x124>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d103      	bne.n	8002460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	615a      	str	r2, [r3, #20]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40010400 	.word	0x40010400
 8002488:	40014000 	.word	0x40014000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800
 8002494:	40001800 	.word	0x40001800
 8002498:	40001c00 	.word	0x40001c00
 800249c:	40002000 	.word	0x40002000

080024a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0201 	bic.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f023 0302 	bic.w	r3, r3, #2
 80024e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a20      	ldr	r2, [pc, #128]	; (8002578 <TIM_OC1_SetConfig+0xd8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_OC1_SetConfig+0x64>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <TIM_OC1_SetConfig+0xdc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10c      	bne.n	800251e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0308 	bic.w	r3, r3, #8
 800250a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a15      	ldr	r2, [pc, #84]	; (8002578 <TIM_OC1_SetConfig+0xd8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_OC1_SetConfig+0x8e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <TIM_OC1_SetConfig+0xdc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d111      	bne.n	8002552 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800253c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	621a      	str	r2, [r3, #32]
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40010000 	.word	0x40010000
 800257c:	40010400 	.word	0x40010400

08002580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f023 0210 	bic.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0320 	bic.w	r3, r3, #32
 80025ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <TIM_OC2_SetConfig+0xe4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d003      	beq.n	80025e8 <TIM_OC2_SetConfig+0x68>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <TIM_OC2_SetConfig+0xe8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10d      	bne.n	8002604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <TIM_OC2_SetConfig+0xe4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_OC2_SetConfig+0x94>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <TIM_OC2_SetConfig+0xe8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d113      	bne.n	800263c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800261a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000
 8002668:	40010400 	.word	0x40010400

0800266c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0303 	bic.w	r3, r3, #3
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <TIM_OC3_SetConfig+0xe0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_OC3_SetConfig+0x66>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <TIM_OC3_SetConfig+0xe4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10d      	bne.n	80026ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <TIM_OC3_SetConfig+0xe0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d003      	beq.n	80026fe <TIM_OC3_SetConfig+0x92>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a15      	ldr	r2, [pc, #84]	; (8002750 <TIM_OC3_SetConfig+0xe4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d113      	bne.n	8002726 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800270c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40010000 	.word	0x40010000
 8002750:	40010400 	.word	0x40010400

08002754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	031b      	lsls	r3, r3, #12
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <TIM_OC4_SetConfig+0xa4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_OC4_SetConfig+0x68>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <TIM_OC4_SetConfig+0xa8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d109      	bne.n	80027d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	621a      	str	r2, [r3, #32]
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40010400 	.word	0x40010400

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e032      	b.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002984:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4313      	orrs	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e03d      	b.n	8002a56 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e03f      	b.n	8002b1c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 fb8d 	bl	80041d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2224      	movs	r2, #36	; 0x24
 8002aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002acc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa64 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_UART_IRQHandler+0x52>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f992 	bl	8002e98 <UART_Receive_IT>
      return;
 8002b74:	e0cc      	b.n	8002d10 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80ab 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x1b0>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_UART_IRQHandler+0x70>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80a0 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x90>
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_UART_IRQHandler+0xb0>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	f043 0202 	orr.w	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xd0>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_UART_IRQHandler+0xf0>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	f043 0208 	orr.w	r2, r3, #8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d078      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_UART_IRQHandler+0x112>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f931 	bl	8002e98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_UART_IRQHandler+0x13a>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d031      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f87a 	bl	8002d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d123      	bne.n	8002cba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d013      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_UART_IRQHandler+0x1f4>)
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f8e5 	bl	8000e66 <HAL_DMA_Abort_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cac:	4610      	mov	r0, r2
 8002cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00e      	b.n	8002cd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f846 	bl	8002d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e00a      	b.n	8002cd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f842 	bl	8002d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e006      	b.n	8002cd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f83e 	bl	8002d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cce:	e01e      	b.n	8002d0e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	bf00      	nop
    return;
 8002cd2:	e01c      	b.n	8002d0e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x1cc>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f867 	bl	8002dbc <UART_Transmit_IT>
    return;
 8002cee:	e00f      	b.n	8002d10 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_UART_IRQHandler+0x1ec>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8af 	bl	8002e68 <UART_EndTransmit_IT>
    return;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002d0e:	bf00      	nop
  }
}
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	08002d95 	.word	0x08002d95

08002d1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff ffc8 	bl	8002d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b21      	cmp	r3, #33	; 0x21
 8002dce:	d144      	bne.n	8002e5a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d11a      	bne.n	8002e10 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	621a      	str	r2, [r3, #32]
 8002e02:	e00e      	b.n	8002e22 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	621a      	str	r2, [r3, #32]
 8002e0e:	e008      	b.n	8002e22 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6211      	str	r1, [r2, #32]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff47 	bl	8002d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b22      	cmp	r3, #34	; 0x22
 8002eaa:	d171      	bne.n	8002f90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	d123      	bne.n	8002efe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10e      	bne.n	8002ee2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	1c9a      	adds	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee0:	e029      	b.n	8002f36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
 8002efc:	e01b      	b.n	8002f36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6858      	ldr	r0, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6291      	str	r1, [r2, #40]	; 0x28
 8002f16:	b2c2      	uxtb	r2, r0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e00c      	b.n	8002f36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	1c58      	adds	r0, r3, #1
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	6288      	str	r0, [r1, #40]	; 0x28
 8002f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4619      	mov	r1, r3
 8002f44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d120      	bne.n	8002f8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0220 	bic.w	r2, r2, #32
 8002f58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fed4 	bl	8002d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e002      	b.n	8002f92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fdc:	f023 030c 	bic.w	r3, r3, #12
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	f040 80e4 	bne.w	80031d4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4aab      	ldr	r2, [pc, #684]	; (80032c0 <UART_SetConfig+0x324>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <UART_SetConfig+0x84>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4aaa      	ldr	r2, [pc, #680]	; (80032c4 <UART_SetConfig+0x328>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d16c      	bne.n	80030fa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003020:	f7fe f9f2 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 8003024:	4602      	mov	r2, r0
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009a      	lsls	r2, r3, #2
 800302e:	441a      	add	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	4aa3      	ldr	r2, [pc, #652]	; (80032c8 <UART_SetConfig+0x32c>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	011c      	lsls	r4, r3, #4
 8003044:	f7fe f9e0 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 8003048:	4602      	mov	r2, r0
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009a      	lsls	r2, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fbb2 f5f3 	udiv	r5, r2, r3
 800305e:	f7fe f9d3 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 8003062:	4602      	mov	r2, r0
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009a      	lsls	r2, r3, #2
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	4a93      	ldr	r2, [pc, #588]	; (80032c8 <UART_SetConfig+0x32c>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2264      	movs	r2, #100	; 0x64
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	1aeb      	subs	r3, r5, r3
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	3332      	adds	r3, #50	; 0x32
 800308c:	4a8e      	ldr	r2, [pc, #568]	; (80032c8 <UART_SetConfig+0x32c>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800309a:	441c      	add	r4, r3
 800309c:	f7fe f9b4 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009a      	lsls	r2, r3, #2
 80030aa:	441a      	add	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80030b6:	f7fe f9a7 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	4a7d      	ldr	r2, [pc, #500]	; (80032c8 <UART_SetConfig+0x32c>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2264      	movs	r2, #100	; 0x64
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	1aeb      	subs	r3, r5, r3
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	3332      	adds	r3, #50	; 0x32
 80030e4:	4a78      	ldr	r2, [pc, #480]	; (80032c8 <UART_SetConfig+0x32c>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	f003 0207 	and.w	r2, r3, #7
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4422      	add	r2, r4
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	e154      	b.n	80033a4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80030fa:	f7fe f971 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	4a6c      	ldr	r2, [pc, #432]	; (80032c8 <UART_SetConfig+0x32c>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011c      	lsls	r4, r3, #4
 800311e:	f7fe f95f 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 8003122:	4602      	mov	r2, r0
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009a      	lsls	r2, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fbb2 f5f3 	udiv	r5, r2, r3
 8003138:	f7fe f952 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 800313c:	4602      	mov	r2, r0
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009a      	lsls	r2, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	4a5d      	ldr	r2, [pc, #372]	; (80032c8 <UART_SetConfig+0x32c>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	2264      	movs	r2, #100	; 0x64
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	1aeb      	subs	r3, r5, r3
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3332      	adds	r3, #50	; 0x32
 8003166:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <UART_SetConfig+0x32c>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003174:	441c      	add	r4, r3
 8003176:	f7fe f933 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 800317a:	4602      	mov	r2, r0
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009a      	lsls	r2, r3, #2
 8003184:	441a      	add	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003190:	f7fe f926 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 8003194:	4602      	mov	r2, r0
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009a      	lsls	r2, r3, #2
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	4a47      	ldr	r2, [pc, #284]	; (80032c8 <UART_SetConfig+0x32c>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2264      	movs	r2, #100	; 0x64
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	1aeb      	subs	r3, r5, r3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a42      	ldr	r2, [pc, #264]	; (80032c8 <UART_SetConfig+0x32c>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 0207 	and.w	r2, r3, #7
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4422      	add	r2, r4
 80031d0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80031d2:	e0e7      	b.n	80033a4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a39      	ldr	r2, [pc, #228]	; (80032c0 <UART_SetConfig+0x324>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <UART_SetConfig+0x24c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <UART_SetConfig+0x328>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d171      	bne.n	80032cc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031e8:	f7fe f90e 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <UART_SetConfig+0x32c>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	011c      	lsls	r4, r3, #4
 800320c:	f7fe f8fc 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 8003210:	4602      	mov	r2, r0
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009a      	lsls	r2, r3, #2
 800321a:	441a      	add	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	fbb2 f5f3 	udiv	r5, r2, r3
 8003226:	f7fe f8ef 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 800322a:	4602      	mov	r2, r0
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <UART_SetConfig+0x32c>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2264      	movs	r2, #100	; 0x64
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	1aeb      	subs	r3, r5, r3
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	3332      	adds	r3, #50	; 0x32
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <UART_SetConfig+0x32c>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	441c      	add	r4, r3
 8003262:	f7fe f8d1 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 8003266:	4602      	mov	r2, r0
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f5f3 	udiv	r5, r2, r3
 800327c:	f7fe f8c4 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 8003280:	4602      	mov	r2, r0
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <UART_SetConfig+0x32c>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2264      	movs	r2, #100	; 0x64
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	1aeb      	subs	r3, r5, r3
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	3332      	adds	r3, #50	; 0x32
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <UART_SetConfig+0x32c>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 020f 	and.w	r2, r3, #15
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4422      	add	r2, r4
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	e071      	b.n	80033a4 <UART_SetConfig+0x408>
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40011400 	.word	0x40011400
 80032c8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032cc:	f7fe f888 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009a      	lsls	r2, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4a31      	ldr	r2, [pc, #196]	; (80033ac <UART_SetConfig+0x410>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	011c      	lsls	r4, r3, #4
 80032f0:	f7fe f876 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	fbb2 f5f3 	udiv	r5, r2, r3
 800330a:	f7fe f869 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 800330e:	4602      	mov	r2, r0
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	009a      	lsls	r2, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <UART_SetConfig+0x410>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2264      	movs	r2, #100	; 0x64
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	1aeb      	subs	r3, r5, r3
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	3332      	adds	r3, #50	; 0x32
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <UART_SetConfig+0x410>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003344:	441c      	add	r4, r3
 8003346:	f7fe f84b 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 800334a:	4602      	mov	r2, r0
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009a      	lsls	r2, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003360:	f7fe f83e 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 8003364:	4602      	mov	r2, r0
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009a      	lsls	r2, r3, #2
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <UART_SetConfig+0x410>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2264      	movs	r2, #100	; 0x64
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	1aeb      	subs	r3, r5, r3
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a07      	ldr	r2, [pc, #28]	; (80033ac <UART_SetConfig+0x410>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 020f 	and.w	r2, r3, #15
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4422      	add	r2, r4
 80033a0:	609a      	str	r2, [r3, #8]
}
 80033a2:	e7ff      	b.n	80033a4 <UART_SetConfig+0x408>
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdb0      	pop	{r4, r5, r7, pc}
 80033ac:	51eb851f 	.word	0x51eb851f

080033b0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <MX_CAN1_Init+0x60>)
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <MX_CAN1_Init+0x64>)
 80033b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <MX_CAN1_Init+0x60>)
 80033bc:	2210      	movs	r2, #16
 80033be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <MX_CAN1_Init+0x60>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <MX_CAN1_Init+0x60>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <MX_CAN1_Init+0x60>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <MX_CAN1_Init+0x60>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <MX_CAN1_Init+0x60>)
 80033da:	2200      	movs	r2, #0
 80033dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <MX_CAN1_Init+0x60>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <MX_CAN1_Init+0x60>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <MX_CAN1_Init+0x60>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <MX_CAN1_Init+0x60>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <MX_CAN1_Init+0x60>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80033fc:	4804      	ldr	r0, [pc, #16]	; (8003410 <MX_CAN1_Init+0x60>)
 80033fe:	f7fd f8f3 	bl	80005e8 <HAL_CAN_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003408:	f000 f992 	bl	8003730 <Error_Handler>
  }

}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	2000002c 	.word	0x2000002c
 8003414:	40006400 	.word	0x40006400

08003418 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_CAN_MspInit+0xc4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d14c      	bne.n	80034d4 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_CAN_MspInit+0xc8>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <HAL_CAN_MspInit+0xc8>)
 8003444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_CAN_MspInit+0xc8>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_CAN_MspInit+0xc8>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_CAN_MspInit+0xc8>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <HAL_CAN_MspInit+0xc8>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003472:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003484:	2309      	movs	r3, #9
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4619      	mov	r1, r3
 800348e:	4815      	ldr	r0, [pc, #84]	; (80034e4 <HAL_CAN_MspInit+0xcc>)
 8003490:	f7fd fd0c 	bl	8000eac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2100      	movs	r1, #0
 8003498:	2013      	movs	r0, #19
 800349a:	f7fd fcae 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800349e:	2013      	movs	r0, #19
 80034a0:	f7fd fcc7 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	2100      	movs	r1, #0
 80034a8:	2014      	movs	r0, #20
 80034aa:	f7fd fca6 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80034ae:	2014      	movs	r0, #20
 80034b0:	f7fd fcbf 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2015      	movs	r0, #21
 80034ba:	f7fd fc9e 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80034be:	2015      	movs	r0, #21
 80034c0:	f7fd fcb7 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	2016      	movs	r0, #22
 80034ca:	f7fd fc96 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80034ce:	2016      	movs	r0, #22
 80034d0:	f7fd fcaf 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80034d4:	bf00      	nop
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40006400 	.word	0x40006400
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020400 	.word	0x40020400

080034e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	60da      	str	r2, [r3, #12]
 80034fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <MX_GPIO_Init+0x120>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <MX_GPIO_Init+0x120>)
 8003508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <MX_GPIO_Init+0x120>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <MX_GPIO_Init+0x120>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a39      	ldr	r2, [pc, #228]	; (8003608 <MX_GPIO_Init+0x120>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <MX_GPIO_Init+0x120>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b33      	ldr	r3, [pc, #204]	; (8003608 <MX_GPIO_Init+0x120>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a32      	ldr	r2, [pc, #200]	; (8003608 <MX_GPIO_Init+0x120>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b30      	ldr	r3, [pc, #192]	; (8003608 <MX_GPIO_Init+0x120>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <MX_GPIO_Init+0x120>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <MX_GPIO_Init+0x120>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b29      	ldr	r3, [pc, #164]	; (8003608 <MX_GPIO_Init+0x120>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <MX_GPIO_Init+0x120>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a24      	ldr	r2, [pc, #144]	; (8003608 <MX_GPIO_Init+0x120>)
 8003578:	f043 0308 	orr.w	r3, r3, #8
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <MX_GPIO_Init+0x120>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, motor0_Pin|motor1_Pin|motor2_Pin|motor3_Pin 
 800358a:	2200      	movs	r2, #0
 800358c:	211f      	movs	r1, #31
 800358e:	481f      	ldr	r0, [pc, #124]	; (800360c <MX_GPIO_Init+0x124>)
 8003590:	f7fd fe1e 	bl	80011d0 <HAL_GPIO_WritePin>
                          |ABS1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ABS0_0_Pin|ABS0_1_Pin|ABS0_2_Pin|ABS1_0_Pin, GPIO_PIN_RESET);
 8003594:	2200      	movs	r2, #0
 8003596:	21f0      	movs	r1, #240	; 0xf0
 8003598:	481d      	ldr	r0, [pc, #116]	; (8003610 <MX_GPIO_Init+0x128>)
 800359a:	f7fd fe19 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS1_2_Pin|ABS2_0_Pin|ABS2_1_Pin|ABS2_2_Pin 
 800359e:	2200      	movs	r2, #0
 80035a0:	f24f 0107 	movw	r1, #61447	; 0xf007
 80035a4:	481b      	ldr	r0, [pc, #108]	; (8003614 <MX_GPIO_Init+0x12c>)
 80035a6:	f7fd fe13 	bl	80011d0 <HAL_GPIO_WritePin>
                          |ABS3_0_Pin|ABS3_1_Pin|ABS3_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = motor0_Pin|motor1_Pin|motor2_Pin|motor3_Pin 
 80035aa:	231f      	movs	r3, #31
 80035ac:	617b      	str	r3, [r7, #20]
                          |ABS1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	4812      	ldr	r0, [pc, #72]	; (800360c <MX_GPIO_Init+0x124>)
 80035c2:	f7fd fc73 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ABS0_0_Pin|ABS0_1_Pin|ABS0_2_Pin|ABS1_0_Pin;
 80035c6:	23f0      	movs	r3, #240	; 0xf0
 80035c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <MX_GPIO_Init+0x128>)
 80035de:	f7fd fc65 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ABS1_2_Pin|ABS2_0_Pin|ABS2_1_Pin|ABS2_2_Pin 
 80035e2:	f24f 0307 	movw	r3, #61447	; 0xf007
 80035e6:	617b      	str	r3, [r7, #20]
                          |ABS3_0_Pin|ABS3_1_Pin|ABS3_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	; (8003614 <MX_GPIO_Init+0x12c>)
 80035fc:	f7fd fc56 	bl	8000eac <HAL_GPIO_Init>

}
 8003600:	bf00      	nop
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	40020800 	.word	0x40020800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400

08003618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800361c:	f7fc ff72 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003620:	f000 f81a 	bl	8003658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003624:	f7ff ff60 	bl	80034e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003628:	f000 f974 	bl	8003914 <MX_TIM1_Init>
  MX_TIM2_Init();
 800362c:	f000 fa18 	bl	8003a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003630:	f000 fa62 	bl	8003af8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003634:	f000 fab4 	bl	8003ba0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8003638:	f000 fb06 	bl	8003c48 <MX_TIM5_Init>
  MX_TIM8_Init();
 800363c:	f000 fb58 	bl	8003cf0 <MX_TIM8_Init>
  MX_CAN1_Init();
 8003640:	f7ff feb6 	bl	80033b0 <MX_CAN1_Init>
  MX_UART4_Init();
 8003644:	f000 fd1c 	bl	8004080 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8003648:	f000 fd6e 	bl	8004128 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800364c:	f000 fd96 	bl	800417c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8003650:	f000 fd40 	bl	80040d4 <MX_UART5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003654:	e7fe      	b.n	8003654 <main+0x3c>
	...

08003658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b094      	sub	sp, #80	; 0x50
 800365c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	2234      	movs	r2, #52	; 0x34
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f000 ff38 	bl	80044dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <SystemClock_Config+0xd0>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a28      	ldr	r2, [pc, #160]	; (8003728 <SystemClock_Config+0xd0>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
 800368c:	4b26      	ldr	r3, [pc, #152]	; (8003728 <SystemClock_Config+0xd0>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003698:	2300      	movs	r3, #0
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4b23      	ldr	r3, [pc, #140]	; (800372c <SystemClock_Config+0xd4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036a4:	4a21      	ldr	r2, [pc, #132]	; (800372c <SystemClock_Config+0xd4>)
 80036a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b1f      	ldr	r3, [pc, #124]	; (800372c <SystemClock_Config+0xd4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036b8:	2302      	movs	r3, #2
 80036ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036bc:	2301      	movs	r3, #1
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036c0:	2310      	movs	r3, #16
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c4:	2302      	movs	r3, #2
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036c8:	2300      	movs	r3, #0
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036cc:	2308      	movs	r3, #8
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80036d0:	2340      	movs	r3, #64	; 0x40
 80036d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036d4:	2302      	movs	r3, #2
 80036d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80036d8:	2302      	movs	r3, #2
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036dc:	2302      	movs	r3, #2
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036e0:	f107 031c 	add.w	r3, r7, #28
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe f841 	bl	800176c <HAL_RCC_OscConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80036f0:	f000 f81e 	bl	8003730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036f4:	230f      	movs	r3, #15
 80036f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036f8:	2302      	movs	r3, #2
 80036fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fd77 	bl	8001204 <HAL_RCC_ClockConfig>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800371c:	f000 f808 	bl	8003730 <Error_Handler>
  }
}
 8003720:	bf00      	nop
 8003722:	3750      	adds	r7, #80	; 0x50
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	40007000 	.word	0x40007000

08003730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_MspInit+0x58>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_MspInit+0x58>)
 8003750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_MspInit+0x58>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_MspInit+0x58>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <HAL_MspInit+0x58>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_MspInit+0x58>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2005      	movs	r0, #5
 8003784:	f7fd fb39 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003788:	2005      	movs	r0, #5
 800378a:	f7fd fb52 	bl	8000e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ae:	e7fe      	b.n	80037ae <HardFault_Handler+0x4>

080037b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <MemManage_Handler+0x4>

080037b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037ba:	e7fe      	b.n	80037ba <BusFault_Handler+0x4>

080037bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037c0:	e7fe      	b.n	80037c0 <UsageFault_Handler+0x4>

080037c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037f0:	f7fc feda 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <CAN1_TX_IRQHandler+0x10>)
 800380e:	f7fc ffe6 	bl	80007de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2000002c 	.word	0x2000002c

0800381c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <CAN1_RX0_IRQHandler+0x10>)
 8003822:	f7fc ffdc 	bl	80007de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	2000002c 	.word	0x2000002c

08003830 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <CAN1_RX1_IRQHandler+0x10>)
 8003836:	f7fc ffd2 	bl	80007de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2000002c 	.word	0x2000002c

08003844 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <CAN1_SCE_IRQHandler+0x10>)
 800384a:	f7fc ffc8 	bl	80007de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000002c 	.word	0x2000002c

08003858 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800385e:	f7fe fac7 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000154 	.word	0x20000154

0800386c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003872:	f7fe fabd 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000154 	.word	0x20000154

08003880 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <UART4_IRQHandler+0x10>)
 8003886:	f7ff f94d 	bl	8002b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000254 	.word	0x20000254

08003894 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <UART5_IRQHandler+0x10>)
 800389a:	f7ff f943 	bl	8002b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000214 	.word	0x20000214

080038a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <SystemInit+0x60>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <SystemInit+0x60>)
 80038b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <SystemInit+0x64>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a12      	ldr	r2, [pc, #72]	; (800390c <SystemInit+0x64>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <SystemInit+0x64>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <SystemInit+0x64>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <SystemInit+0x64>)
 80038d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <SystemInit+0x64>)
 80038e0:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <SystemInit+0x68>)
 80038e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <SystemInit+0x64>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <SystemInit+0x64>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <SystemInit+0x64>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <SystemInit+0x60>)
 80038f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038fc:	609a      	str	r2, [r3, #8]
#endif
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00
 800390c:	40023800 	.word	0x40023800
 8003910:	24003010 	.word	0x24003010

08003914 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b092      	sub	sp, #72	; 0x48
 8003918:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800391a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	611a      	str	r2, [r3, #16]
 8003934:	615a      	str	r2, [r3, #20]
 8003936:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2220      	movs	r2, #32
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fdcc 	bl	80044dc <memset>

  htim1.Instance = TIM1;
 8003944:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003946:	4a45      	ldr	r2, [pc, #276]	; (8003a5c <MX_TIM1_Init+0x148>)
 8003948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <MX_TIM1_Init+0x144>)
 800394c:	2200      	movs	r2, #0
 800394e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003950:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003956:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395c:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <MX_TIM1_Init+0x144>)
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003962:	4b3d      	ldr	r3, [pc, #244]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003968:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <MX_TIM1_Init+0x144>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800396e:	483a      	ldr	r0, [pc, #232]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003970:	f7fe f981 	bl	8001c76 <HAL_TIM_PWM_Init>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800397a:	f7ff fed9 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003986:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800398a:	4619      	mov	r1, r3
 800398c:	4832      	ldr	r0, [pc, #200]	; (8003a58 <MX_TIM1_Init+0x144>)
 800398e:	f7fe ffd1 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003998:	f7ff feca 	bl	8003730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800399c:	2360      	movs	r3, #96	; 0x60
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a8:	2300      	movs	r3, #0
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039bc:	2200      	movs	r2, #0
 80039be:	4619      	mov	r1, r3
 80039c0:	4825      	ldr	r0, [pc, #148]	; (8003a58 <MX_TIM1_Init+0x144>)
 80039c2:	f7fe fb1d 	bl	8002000 <HAL_TIM_PWM_ConfigChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80039cc:	f7ff feb0 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	2204      	movs	r2, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	481f      	ldr	r0, [pc, #124]	; (8003a58 <MX_TIM1_Init+0x144>)
 80039da:	f7fe fb11 	bl	8002000 <HAL_TIM_PWM_ConfigChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80039e4:	f7ff fea4 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ec:	2208      	movs	r2, #8
 80039ee:	4619      	mov	r1, r3
 80039f0:	4819      	ldr	r0, [pc, #100]	; (8003a58 <MX_TIM1_Init+0x144>)
 80039f2:	f7fe fb05 	bl	8002000 <HAL_TIM_PWM_ConfigChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80039fc:	f7ff fe98 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a04:	220c      	movs	r2, #12
 8003a06:	4619      	mov	r1, r3
 8003a08:	4813      	ldr	r0, [pc, #76]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003a0a:	f7fe faf9 	bl	8002000 <HAL_TIM_PWM_ConfigChannel>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8003a14:	f7ff fe8c 	bl	8003730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4807      	ldr	r0, [pc, #28]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003a3c:	f7fe ffbf 	bl	80029be <HAL_TIMEx_ConfigBreakDeadTime>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8003a46:	f7ff fe73 	bl	8003730 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003a4a:	4803      	ldr	r0, [pc, #12]	; (8003a58 <MX_TIM1_Init+0x144>)
 8003a4c:	f000 fade 	bl	800400c <HAL_TIM_MspPostInit>

}
 8003a50:	bf00      	nop
 8003a52:	3748      	adds	r7, #72	; 0x48
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000154 	.word	0x20000154
 8003a5c:	40010000 	.word	0x40010000

08003a60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a66:	f107 0308 	add.w	r3, r7, #8
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a74:	463b      	mov	r3, r7
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9c:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003aa2:	4814      	ldr	r0, [pc, #80]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003aa4:	f7fe f8bc 	bl	8001c20 <HAL_TIM_Base_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003aae:	f7ff fe3f 	bl	8003730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ab8:	f107 0308 	add.w	r3, r7, #8
 8003abc:	4619      	mov	r1, r3
 8003abe:	480d      	ldr	r0, [pc, #52]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003ac0:	f7fe fb64 	bl	800218c <HAL_TIM_ConfigClockSource>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003aca:	f7ff fe31 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4806      	ldr	r0, [pc, #24]	; (8003af4 <MX_TIM2_Init+0x94>)
 8003adc:	f7fe ff2a 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003ae6:	f7ff fe23 	bl	8003730 <Error_Handler>
  }

}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000194 	.word	0x20000194

08003af8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fce8 	bl	80044dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b16:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <MX_TIM3_Init+0xa4>)
 8003b18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	4619      	mov	r1, r3
 8003b62:	480d      	ldr	r0, [pc, #52]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b64:	f7fe f8b2 	bl	8001ccc <HAL_TIM_Encoder_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003b6e:	f7ff fddf 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4806      	ldr	r0, [pc, #24]	; (8003b98 <MX_TIM3_Init+0xa0>)
 8003b80:	f7fe fed8 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003b8a:	f7ff fdd1 	bl	8003730 <Error_Handler>
  }

}
 8003b8e:	bf00      	nop
 8003b90:	3730      	adds	r7, #48	; 0x30
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000114 	.word	0x20000114
 8003b9c:	40000400 	.word	0x40000400

08003ba0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fc94 	bl	80044dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003bbe:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <MX_TIM4_Init+0xa4>)
 8003bc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003be0:	2301      	movs	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003be8:	2301      	movs	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c04:	f107 030c 	add.w	r3, r7, #12
 8003c08:	4619      	mov	r1, r3
 8003c0a:	480d      	ldr	r0, [pc, #52]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003c0c:	f7fe f85e 	bl	8001ccc <HAL_TIM_Encoder_Init>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003c16:	f7ff fd8b 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4806      	ldr	r0, [pc, #24]	; (8003c40 <MX_TIM4_Init+0xa0>)
 8003c28:	f7fe fe84 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8003c32:	f7ff fd7d 	bl	8003730 <Error_Handler>
  }

}
 8003c36:	bf00      	nop
 8003c38:	3730      	adds	r7, #48	; 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000094 	.word	0x20000094
 8003c44:	40000800 	.word	0x40000800

08003c48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fc40 	bl	80044dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <MX_TIM5_Init+0xa4>)
 8003c68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003cb4:	f7fe f80a 	bl	8001ccc <HAL_TIM_Encoder_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8003cbe:	f7ff fd37 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4806      	ldr	r0, [pc, #24]	; (8003ce8 <MX_TIM5_Init+0xa0>)
 8003cd0:	f7fe fe30 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8003cda:	f7ff fd29 	bl	8003730 <Error_Handler>
  }

}
 8003cde:	bf00      	nop
 8003ce0:	3730      	adds	r7, #48	; 0x30
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200000d4 	.word	0x200000d4
 8003cec:	40000c00 	.word	0x40000c00

08003cf0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cf6:	f107 030c 	add.w	r3, r7, #12
 8003cfa:	2224      	movs	r2, #36	; 0x24
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fbec 	bl	80044dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d0e:	4a22      	ldr	r2, [pc, #136]	; (8003d98 <MX_TIM8_Init+0xa8>)
 8003d10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003d5a:	f107 030c 	add.w	r3, r7, #12
 8003d5e:	4619      	mov	r1, r3
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d62:	f7fd ffb3 	bl	8001ccc <HAL_TIM_Encoder_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8003d6c:	f7ff fce0 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4805      	ldr	r0, [pc, #20]	; (8003d94 <MX_TIM8_Init+0xa4>)
 8003d7e:	f7fe fdd9 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8003d88:	f7ff fcd2 	bl	8003730 <Error_Handler>
  }

}
 8003d8c:	bf00      	nop
 8003d8e:	3730      	adds	r7, #48	; 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000054 	.word	0x20000054
 8003d98:	40010400 	.word	0x40010400

08003d9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <HAL_TIM_PWM_MspInit+0x58>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d11d      	bne.n	8003dea <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_TIM_PWM_MspInit+0x5c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <HAL_TIM_PWM_MspInit+0x5c>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_TIM_PWM_MspInit+0x5c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	2018      	movs	r0, #24
 8003dd0:	f7fd f813 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003dd4:	2018      	movs	r0, #24
 8003dd6:	f7fd f82c 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2019      	movs	r0, #25
 8003de0:	f7fd f80b 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003de4:	2019      	movs	r0, #25
 8003de6:	f7fd f824 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d10d      	bne.n	8003e2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_TIM_Base_MspInit+0x3c>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_TIM_Base_MspInit+0x3c>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_TIM_Base_MspInit+0x3c>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800

08003e3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b090      	sub	sp, #64	; 0x40
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a64      	ldr	r2, [pc, #400]	; (8003fec <HAL_TIM_Encoder_MspInit+0x1b0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d12c      	bne.n	8003eb8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a62      	ldr	r2, [pc, #392]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a5b      	ldr	r2, [pc, #364]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b59      	ldr	r3, [pc, #356]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e96:	2330      	movs	r3, #48	; 0x30
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4850      	ldr	r0, [pc, #320]	; (8003ff4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003eb2:	f7fc fffb 	bl	8000eac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003eb6:	e094      	b.n	8003fe2 <HAL_TIM_Encoder_MspInit+0x1a6>
  else if(tim_encoderHandle->Instance==TIM4)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a4e      	ldr	r2, [pc, #312]	; (8003ff8 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d12c      	bne.n	8003f1c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a49      	ldr	r2, [pc, #292]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4a42      	ldr	r2, [pc, #264]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003efa:	23c0      	movs	r3, #192	; 0xc0
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efe:	2302      	movs	r3, #2
 8003f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f06:	2300      	movs	r3, #0
 8003f08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f12:	4619      	mov	r1, r3
 8003f14:	4837      	ldr	r0, [pc, #220]	; (8003ff4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003f16:	f7fc ffc9 	bl	8000eac <HAL_GPIO_Init>
}
 8003f1a:	e062      	b.n	8003fe2 <HAL_TIM_Encoder_MspInit+0x1a6>
  else if(tim_encoderHandle->Instance==TIM5)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <HAL_TIM_Encoder_MspInit+0x1c0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d12c      	bne.n	8003f80 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a30      	ldr	r2, [pc, #192]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	2302      	movs	r3, #2
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f76:	4619      	mov	r1, r3
 8003f78:	4821      	ldr	r0, [pc, #132]	; (8004000 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003f7a:	f7fc ff97 	bl	8000eac <HAL_GPIO_Init>
}
 8003f7e:	e030      	b.n	8003fe2 <HAL_TIM_Encoder_MspInit+0x1a6>
  else if(tim_encoderHandle->Instance==TIM8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d12b      	bne.n	8003fe2 <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fc2:	23c0      	movs	r3, #192	; 0xc0
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fda:	4619      	mov	r1, r3
 8003fdc:	480a      	ldr	r0, [pc, #40]	; (8004008 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003fde:	f7fc ff65 	bl	8000eac <HAL_GPIO_Init>
}
 8003fe2:	bf00      	nop
 8003fe4:	3740      	adds	r7, #64	; 0x40
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020400 	.word	0x40020400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40020000 	.word	0x40020000
 8004004:	40010400 	.word	0x40010400
 8004008:	40020800 	.word	0x40020800

0800400c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a12      	ldr	r2, [pc, #72]	; (8004074 <HAL_TIM_MspPostInit+0x68>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d11e      	bne.n	800406c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_TIM_MspPostInit+0x6c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <HAL_TIM_MspPostInit+0x6c>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6313      	str	r3, [r2, #48]	; 0x30
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_TIM_MspPostInit+0x6c>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800404a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800404e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	2302      	movs	r3, #2
 8004052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800405c:	2301      	movs	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4619      	mov	r1, r3
 8004066:	4805      	ldr	r0, [pc, #20]	; (800407c <HAL_TIM_MspPostInit+0x70>)
 8004068:	f7fc ff20 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800406c:	bf00      	nop
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40010000 	.word	0x40010000
 8004078:	40023800 	.word	0x40023800
 800407c:	40020000 	.word	0x40020000

08004080 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <MX_UART4_Init+0x4c>)
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <MX_UART4_Init+0x50>)
 8004088:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <MX_UART4_Init+0x4c>)
 800408c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004090:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <MX_UART4_Init+0x4c>)
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <MX_UART4_Init+0x4c>)
 800409a:	2200      	movs	r2, #0
 800409c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <MX_UART4_Init+0x4c>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <MX_UART4_Init+0x4c>)
 80040a6:	220c      	movs	r2, #12
 80040a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <MX_UART4_Init+0x4c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <MX_UART4_Init+0x4c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <MX_UART4_Init+0x4c>)
 80040b8:	f7fe fce7 	bl	8002a8a <HAL_UART_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80040c2:	f7ff fb35 	bl	8003730 <Error_Handler>
  }

}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000254 	.word	0x20000254
 80040d0:	40004c00 	.word	0x40004c00

080040d4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <MX_UART5_Init+0x4c>)
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <MX_UART5_Init+0x50>)
 80040dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80040de:	4b10      	ldr	r3, [pc, #64]	; (8004120 <MX_UART5_Init+0x4c>)
 80040e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <MX_UART5_Init+0x4c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <MX_UART5_Init+0x4c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <MX_UART5_Init+0x4c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <MX_UART5_Init+0x4c>)
 80040fa:	220c      	movs	r2, #12
 80040fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <MX_UART5_Init+0x4c>)
 8004100:	2200      	movs	r2, #0
 8004102:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <MX_UART5_Init+0x4c>)
 8004106:	2200      	movs	r2, #0
 8004108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800410a:	4805      	ldr	r0, [pc, #20]	; (8004120 <MX_UART5_Init+0x4c>)
 800410c:	f7fe fcbd 	bl	8002a8a <HAL_UART_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004116:	f7ff fb0b 	bl	8003730 <Error_Handler>
  }

}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000214 	.word	0x20000214
 8004124:	40005000 	.word	0x40005000

08004128 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <MX_USART2_UART_Init+0x50>)
 8004130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 8004134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 800414e:	220c      	movs	r2, #12
 8004150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800415e:	4805      	ldr	r0, [pc, #20]	; (8004174 <MX_USART2_UART_Init+0x4c>)
 8004160:	f7fe fc93 	bl	8002a8a <HAL_UART_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800416a:	f7ff fae1 	bl	8003730 <Error_Handler>
  }

}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000294 	.word	0x20000294
 8004178:	40004400 	.word	0x40004400

0800417c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <MX_USART3_UART_Init+0x50>)
 8004184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 8004188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800418c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 8004196:	2200      	movs	r2, #0
 8004198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 80041a2:	220c      	movs	r2, #12
 80041a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041b2:	4805      	ldr	r0, [pc, #20]	; (80041c8 <MX_USART3_UART_Init+0x4c>)
 80041b4:	f7fe fc69 	bl	8002a8a <HAL_UART_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80041be:	f7ff fab7 	bl	8003730 <Error_Handler>
  }

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	200001d4 	.word	0x200001d4
 80041cc:	40004800 	.word	0x40004800

080041d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b092      	sub	sp, #72	; 0x48
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a8b      	ldr	r2, [pc, #556]	; (800441c <HAL_UART_MspInit+0x24c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d135      	bne.n	800425e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
 80041f6:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <HAL_UART_MspInit+0x250>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a89      	ldr	r2, [pc, #548]	; (8004420 <HAL_UART_MspInit+0x250>)
 80041fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b87      	ldr	r3, [pc, #540]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	4b83      	ldr	r3, [pc, #524]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4a82      	ldr	r2, [pc, #520]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004218:	f043 0304 	orr.w	r3, r3, #4
 800421c:	6313      	str	r3, [r2, #48]	; 0x30
 800421e:	4b80      	ldr	r3, [pc, #512]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800422a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004234:	2301      	movs	r3, #1
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004238:	2303      	movs	r3, #3
 800423a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800423c:	2308      	movs	r3, #8
 800423e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004244:	4619      	mov	r1, r3
 8004246:	4877      	ldr	r0, [pc, #476]	; (8004424 <HAL_UART_MspInit+0x254>)
 8004248:	f7fc fe30 	bl	8000eac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800424c:	2200      	movs	r2, #0
 800424e:	2100      	movs	r1, #0
 8004250:	2034      	movs	r0, #52	; 0x34
 8004252:	f7fc fdd2 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004256:	2034      	movs	r0, #52	; 0x34
 8004258:	f7fc fdeb 	bl	8000e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800425c:	e0da      	b.n	8004414 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==UART5)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a71      	ldr	r2, [pc, #452]	; (8004428 <HAL_UART_MspInit+0x258>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d153      	bne.n	8004310 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004268:	2300      	movs	r3, #0
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
 800426c:	4b6c      	ldr	r3, [pc, #432]	; (8004420 <HAL_UART_MspInit+0x250>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a6b      	ldr	r2, [pc, #428]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b69      	ldr	r3, [pc, #420]	; (8004420 <HAL_UART_MspInit+0x250>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
 8004288:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_UART_MspInit+0x250>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	4a64      	ldr	r2, [pc, #400]	; (8004420 <HAL_UART_MspInit+0x250>)
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	6313      	str	r3, [r2, #48]	; 0x30
 8004294:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_UART_MspInit+0x250>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4a5d      	ldr	r2, [pc, #372]	; (8004420 <HAL_UART_MspInit+0x250>)
 80042aa:	f043 0308 	orr.w	r3, r3, #8
 80042ae:	6313      	str	r3, [r2, #48]	; 0x30
 80042b0:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <HAL_UART_MspInit+0x250>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	623b      	str	r3, [r7, #32]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80042bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c6:	2301      	movs	r3, #1
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ca:	2303      	movs	r3, #3
 80042cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80042ce:	2308      	movs	r3, #8
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042d6:	4619      	mov	r1, r3
 80042d8:	4852      	ldr	r0, [pc, #328]	; (8004424 <HAL_UART_MspInit+0x254>)
 80042da:	f7fc fde7 	bl	8000eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042de:	2304      	movs	r3, #4
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e6:	2301      	movs	r3, #1
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ea:	2303      	movs	r3, #3
 80042ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80042ee:	2308      	movs	r3, #8
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042f6:	4619      	mov	r1, r3
 80042f8:	484c      	ldr	r0, [pc, #304]	; (800442c <HAL_UART_MspInit+0x25c>)
 80042fa:	f7fc fdd7 	bl	8000eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	2035      	movs	r0, #53	; 0x35
 8004304:	f7fc fd79 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004308:	2035      	movs	r0, #53	; 0x35
 800430a:	f7fc fd92 	bl	8000e32 <HAL_NVIC_EnableIRQ>
}
 800430e:	e081      	b.n	8004414 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a46      	ldr	r2, [pc, #280]	; (8004430 <HAL_UART_MspInit+0x260>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d12c      	bne.n	8004374 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	4b40      	ldr	r3, [pc, #256]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a3f      	ldr	r2, [pc, #252]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b3d      	ldr	r3, [pc, #244]	; (8004420 <HAL_UART_MspInit+0x250>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_UART_MspInit+0x250>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	4a38      	ldr	r2, [pc, #224]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6313      	str	r3, [r2, #48]	; 0x30
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004352:	230c      	movs	r3, #12
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800435a:	2301      	movs	r3, #1
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800435e:	2303      	movs	r3, #3
 8004360:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004362:	2307      	movs	r3, #7
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004366:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800436a:	4619      	mov	r1, r3
 800436c:	4831      	ldr	r0, [pc, #196]	; (8004434 <HAL_UART_MspInit+0x264>)
 800436e:	f7fc fd9d 	bl	8000eac <HAL_GPIO_Init>
}
 8004372:	e04f      	b.n	8004414 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART3)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2f      	ldr	r2, [pc, #188]	; (8004438 <HAL_UART_MspInit+0x268>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d14a      	bne.n	8004414 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_UART_MspInit+0x250>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_UART_MspInit+0x250>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_UART_MspInit+0x250>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	6313      	str	r3, [r2, #48]	; 0x30
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_UART_MspInit+0x250>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4b19      	ldr	r3, [pc, #100]	; (8004420 <HAL_UART_MspInit+0x250>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_UART_MspInit+0x250>)
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <HAL_UART_MspInit+0x250>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80043d2:	2320      	movs	r3, #32
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d6:	2302      	movs	r3, #2
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043da:	2301      	movs	r3, #1
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043de:	2303      	movs	r3, #3
 80043e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043e2:	2307      	movs	r3, #7
 80043e4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ea:	4619      	mov	r1, r3
 80043ec:	480d      	ldr	r0, [pc, #52]	; (8004424 <HAL_UART_MspInit+0x254>)
 80043ee:	f7fc fd5d 	bl	8000eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f8:	2302      	movs	r3, #2
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043fc:	2301      	movs	r3, #1
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004400:	2303      	movs	r3, #3
 8004402:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004404:	2307      	movs	r3, #7
 8004406:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800440c:	4619      	mov	r1, r3
 800440e:	480b      	ldr	r0, [pc, #44]	; (800443c <HAL_UART_MspInit+0x26c>)
 8004410:	f7fc fd4c 	bl	8000eac <HAL_GPIO_Init>
}
 8004414:	bf00      	nop
 8004416:	3748      	adds	r7, #72	; 0x48
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40004c00 	.word	0x40004c00
 8004420:	40023800 	.word	0x40023800
 8004424:	40020800 	.word	0x40020800
 8004428:	40005000 	.word	0x40005000
 800442c:	40020c00 	.word	0x40020c00
 8004430:	40004400 	.word	0x40004400
 8004434:	40020000 	.word	0x40020000
 8004438:	40004800 	.word	0x40004800
 800443c:	40020400 	.word	0x40020400

08004440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004478 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004444:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004446:	e003      	b.n	8004450 <LoopCopyDataInit>

08004448 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800444a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800444c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800444e:	3104      	adds	r1, #4

08004450 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004450:	480b      	ldr	r0, [pc, #44]	; (8004480 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004454:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004456:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004458:	d3f6      	bcc.n	8004448 <CopyDataInit>
  ldr  r2, =_sbss
 800445a:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800445c:	e002      	b.n	8004464 <LoopFillZerobss>

0800445e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800445e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004460:	f842 3b04 	str.w	r3, [r2], #4

08004464 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004466:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004468:	d3f9      	bcc.n	800445e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800446a:	f7ff fa1d 	bl	80038a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800446e:	f000 f811 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004472:	f7ff f8d1 	bl	8003618 <main>
  bx  lr    
 8004476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004478:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 800447c:	0800452c 	.word	0x0800452c
  ldr  r0, =_sdata
 8004480:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004484:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004488:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800448c:	200002d4 	.word	0x200002d4

08004490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004490:	e7fe      	b.n	8004490 <ADC_IRQHandler>
	...

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4e0d      	ldr	r6, [pc, #52]	; (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	; (80044d0 <__libc_init_array+0x3c>)
 800449a:	1ba4      	subs	r4, r4, r6
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2500      	movs	r5, #0
 80044a0:	42a5      	cmp	r5, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4e0b      	ldr	r6, [pc, #44]	; (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	; (80044d8 <__libc_init_array+0x44>)
 80044a8:	f000 f820 	bl	80044ec <_init>
 80044ac:	1ba4      	subs	r4, r4, r6
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2500      	movs	r5, #0
 80044b2:	42a5      	cmp	r5, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044bc:	4798      	blx	r3
 80044be:	3501      	adds	r5, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c6:	4798      	blx	r3
 80044c8:	3501      	adds	r5, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	08004524 	.word	0x08004524
 80044d0:	08004524 	.word	0x08004524
 80044d4:	08004524 	.word	0x08004524
 80044d8:	08004528 	.word	0x08004528

080044dc <memset>:
 80044dc:	4402      	add	r2, r0
 80044de:	4603      	mov	r3, r0
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d100      	bne.n	80044e6 <memset+0xa>
 80044e4:	4770      	bx	lr
 80044e6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ea:	e7f9      	b.n	80044e0 <memset+0x4>

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
